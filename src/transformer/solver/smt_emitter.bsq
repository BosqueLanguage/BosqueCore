namespace SMTEmit;

import TreeIR;

typedef SMTParams = {
    key_type_tag_decls: String,
    key_type_tag_distincts: String,
    key_type_tag_sort: String,
    oo_decls: String,
    oo_constructors: String,
    type_box_constructors: String,
    term_box_constructors: String,
    term_unbox_constructors: String,
    type_subtype: String,
    global_decls: String,
    uf_decls: String,
    function_decls: String,
    global_definitions: String
};

function processSMTFile(params: SMTParams, smtcode: String): String {
    let vmm = "(declare-const @INT_MIN Int) (assert (= @INT_MIN -255)) (declare-const @INT_MAX Int) (assert (= @INT_MAX 255)) (declare-const @NAT_MAX Int) (assert (= @NAT_MAX 255)) (declare-const @SLEN_MAX Int) (assert (= @SLEN_MAX 64)) (declare-const @BLEN_MAX Int) (assert (= @BLEN_MAX 64)) (declare-const @CSIZE_MAX Int) (assert (= @CSIZE_MAX 3))";

    return smtcode
        .replaceUnique(";;--KEY_TYPE_TAG_DECLS--;;", params.key_type_tag_decls)
        .replaceUnique(";;--KEY_TYPE_TAG_DISTINCTS--;;", params.key_type_tag_distincts)
        .replaceUnique(";;--KEY_TYPE_TAG_SORT--;;", params.key_type_tag_sort)
        .replaceUnique(";;--OO_DECLS--;;", params.oo_decls)
        .replaceUnique(";;--OO_CONSTRUCTORS--;;", params.oo_constructors)
        .replaceUnique(";;--TYPE_BOX_CONSTRUCTORS--;;", params.type_box_constructors)
        .replaceUnique(";;--TERM_BOX_CONSTRUCTORS--;;", params.term_box_constructors)
        .replaceUnique(";;--TERM_BOX_UNBOXERS--;;", params.term_unbox_constructors)
        .replaceUnique(";;--TYPE_SUBTYPE--;;", params.type_subtype)
        .replaceUnique(";;--V_MIN_MAX--;;", vmm)
        .replaceUnique(";;--GLOBAL_DECLS--;;", params.global_decls)
        .replaceUnique(";;--UF_DECLS--;;", params.uf_decls)
        .replaceUnique(";;--FUNCTION_DECLS--;;", params.function_decls)
        .replaceUnique(";;--GLOBAL_DEFINITIONS--;;", params.global_definitions);
}

export function main(asm: TreeIR::Assembly, smtcode: String): String {
    let flatasm = AssemblyEmitter::processAssembly(asm); //TODO should go into tree rewriter
    
    let nemitter = NameEmitter{flatasm};
    let temitter = TypeInfoEmitter{flatasm, nemitter};
    let asmemitter = AssemblyEmitter{flatasm, nemitter, temitter};

    let key_tag_info = asmemitter.generateKeyTypeTagInfo();
    let decls_cons = asmemitter.generateDeclAndConsInfo();
    let bxops = asmemitter.generateBoxAndUnboxInfo();
    
    let function_decl_info = asmemitter.generateSMTCode(Map<TreeIR::InvokeKey, TreeIR::ErrorKind>{});

    let params = {
        key_type_tag_decls = key_tag_info.key_type_tag_decls,
        key_type_tag_distincts = key_tag_info.key_type_tag_distincts,
        key_type_tag_sort = key_tag_info.key_type_tag_sort,
        oo_decls = decls_cons.decls,
        oo_constructors = decls_cons.cons,
        type_box_constructors = bxops.typebox,
        term_box_constructors = bxops.box,
        term_unbox_constructors = bxops.unbox,
        type_subtype = "[NOT IMPLEMENTED]",
        global_decls = "[NOT IMPLEMENTED]",
        uf_decls = "[NOT IMPLEMENTED]",
        function_decls = function_decl_info,
        global_definitions = "[NOT IMPLEMENTED]"
    };

    let resolvedSMT = processSMTFile(params, smtcode);
    return resolvedSMT;
}
