namespace CPPEmitter;

%%
%% TODO: We will need to properly overload our conversion from bosque types to cpp types to ensure
%% everything stays safe (such as Nat in bosque only being 63 bits not 64)
%%

%% CPP Pre-defined backend
namespace PathStack {
    function emitPathStackCreate(): CString {
        return 'PathStack ps = PathStack::create();';
    }

    function emitPathStackLeft(): CString {
        return 'ps.left();';
    }

    function emitPathStackRight(): CString {
        return 'ps.right();';
    }

    function emitPathStackUp(): CString {
        return 'ps.up();';
    }
}

namespace CCharBuffer {
    %% Emit c++ for buffer creation here
}

namespace UnicodeCharBuffer {
    %% Emit c++ for buffer creation here
}

function emitTypeSignature(ts: CPPAssembly::TypeSignature): CString {
    return ts.tkeystr.value;
}

function emitIdentifier(ident: CPPAssembly::Identifier): CString {
    return ident.value;
}

function emitVarIdentifier(vident: CPPAssembly::VarIdentifier): CString {
    return vident.value;
}

function emitFunction(ik: CPPAssembly::InvokeKey): CString {
    return ik.value;
}

function emitLiteralSimpleExpression(exp: CPPAssembly::LiteralSimpleExpression): CString {
    return exp.value;
}

function emitAccessVariableExpression(exp: CPPAssembly::AccessVariableExpression): CString {
    %% May need some work with type
    return emitVarIdentifier(exp.vname);
}

recursive function emitBinAddExpression(add: CPPAssembly::BinAddExpression): CString {
    let lhs = emitExpression[recursive](add.lhs);
    let rhs = emitExpression[recursive](add.rhs);

    %% In my cppruntime header I need to for each primitive write out a struct
    %% with correct operator overloading to correctly map Int -> int64_t and stuff
    %% Here we also need to something like Struct Int_TypeInfo IN THE HEADER ITSELF.
    %% We also want to do overflow safe like __safe_add__ . We overload plus with these values

    return CString::concat('(', lhs, ' + ', rhs, ')');
}

recursive function emitBinSubExpression(add: CPPAssembly::BinSubExpression): CString {
    abort; %% TODO
}

function emitBinaryArithExpression(e: CPPAssembly::BinaryArithExpression): CString {
    match(e)@ {
        CPPAssembly::BinAddExpression => { return emitBinAddExpression[recursive]($e); }
        %% | CPPAssembly::BinSubExpression => { return emitBinSubExpression[recursive]($e); }
        | _ => { abort; }
    }
}

function emitExpression(e: CPPAssembly::Expression): CString {
    match(e)@ {
        CPPAssembly::BinaryArithExpression => { return emitBinaryArithExpression[recursive]($e); }
        | CPPAssembly::LiteralSimpleExpression => { return emitLiteralSimpleExpression($e); }
        | CPPAssembly::AccessVariableExpression => { return emitAccessVariableExpression($e); }
        | _ => { abort; }
    }
}

function emitVariableInitializationStatement(stmt: CPPAssembly::VariableInitializationStatement): CString {
    let name = emitIdentifier(stmt.name);
    let stype = emitTypeSignature(stmt.vtype);
    let exp = emitExpression(stmt.exp);

    return CString::concat(stype, ' ', name, ' = ', exp, ';');
}

function emitStatement(stmt: CPPAssembly::Statement): CString {
    match(stmt)@ {
        CPPAssembly::VariableInitializationStatement => { return emitVariableInitializationStatement($stmt); }
        | CPPAssembly::ReturnSingleStatement => { return ''; } %% TODO
        | _ => { abort; }
    }
}

function emitStandardBodyImplementation(body: CPPAssembly::StandardBodyImplementation): CString {
    return CString::joinAll('%n;', body.statements.map<CString>(fn(stmt) => emitStatement(stmt)));
}

function emitBodyImplementation(body: CPPAssembly::BodyImplementation): CString {
    match(body)@ {
        %% CPPAssembly::AbstractBodyImplementation => { abort; }
        %% | CPPAssembly::PredicateUFBodyImplementation => { abort; }
        %% | CPPAssembly::BuiltinBodyImplementation => { abort; }
        %% | CPPAssembly::SynthesisBodyImplementation => { abort; }
        %% | CPPAssembly::ExpressionBodyImplementation => { abort; }
        CPPAssembly::StandardBodyImplementation => { return emitStandardBodyImplementation($body); }
        | _ => { abort; }
    }
}


function emitNamespaceFunctionDecl(func: CPPAssembly::NamespaceFunctionDecl): CString {
    %% Function name
    %% Params
    %% Return?
    return emitBodyImplementation(func.body);
}

function emitAssembly(asm: CPPAssembly::Assembly): CString {
    %% For now we just grab every function
    let efuncs_list = asm.allfuncs.map<CString>(fn(t) => { 
        if(asm.nsfuncs.has(t)) {
            return emitNamespaceFunctionDecl(asm.nsfuncs.get(t));
        }
        return 'NOT IMPLEMENTED!';
    });
    let efuncs = CString::joinAll('%n;', efuncs_list);

    %% For CCharBuf and Unicode... will need to emit builtin functions explicitly

    %% We dont even emit the headers, so something must be causing aborting
    return CString::join('%n;', efuncs);
}