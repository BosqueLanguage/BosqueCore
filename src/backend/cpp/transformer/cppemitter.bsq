namespace CPPEmitter;

%% CPP Pre-defined backend
namespace PathStack {
    function emitPathStackCreate(): CString {
        return 'PathStack ps = PathStack::create();';
    }

    function emitPathStackLeft(): CString {
        return 'ps.left();';
    }

    function emitPathStackRight(): CString {
        return 'ps.right();';
    }

    function emitPathStackUp(): CString {
        return 'ps.up();';
    }
}

namespace CCharBuffer {
    %% Emit c++ for buffer creation here
}

namespace UnicodeCharBuffer {
    %% Emit c++ for buffer creation here
}

entity Context {
    field fullns_key: CPPAssembly::NamespaceKey; %% Main::Foo::Bar::...
    field fullns_list: List<CString>; %% ['Main', 'Foo', 'Bar', ...]
    field nsdecls: Map<CString, CPPAssembly::NamespaceDecl>;

    method updateCurrentNamespace(new_ns: CPPAssembly::NamespaceKey, new_nsname: List<CString>): Context {
        return Context{ new_ns, new_nsname, this.nsdecls };
    }
}

function emitTypeSignature(ts: CPPAssembly::TypeSignature, ctx: Context): CString {
    let resolved_typesig = emitResolvedNamespace(ctx.fullns_list, ts.tkeystr.value);
    
    return resolved_typesig;
}

function emitIdentifier(ident: CPPAssembly::Identifier): CString {
    return ident.value;
}

function emitVarIdentifier(vident: CPPAssembly::VarIdentifier): CString {
    return vident.value;
}

function emitInvokeKey(ik: CPPAssembly::InvokeKey): CString {
    return ik.value;
}

function emitNamespaceKey(nsk: CPPAssembly::NamespaceKey): CString {
    return nsk.value;
}

%%
%% Given a namespace key (like Main::Foo::Bar), remove all matching prefix strings
%% giving resolved namespace for given scope
%%
function emitResolvedNamespace(fullns_list: List<CString>, fullns: CString): CString {
    return fullns_list.reduce<CString>(fullns, fn(acc, s) => {
        if(acc.startsWithString(s)) {
            let nopre = acc.removePrefixString(s);
            if(nopre.startsWithString('::')) {
                return nopre.removePrefixString('::');
            }
            return nopre;
        }
        return acc;
    });
}

function emitLiteralSimpleExpression(exp: CPPAssembly::LiteralSimpleExpression): CString {
    %% We may want to make this matching a tad nicer, although not too bad as is 
    switch(exp.etype.tkeystr.value) {
        '__CoreCpp::Int' => { return CString::concat(exp.value, '_i'); }
        | '__CoreCpp::BigInt' => { return CString::concat(exp.value, '_I'); } 
        | '__CoreCpp::Nat' => { return CString::concat(exp.value, '_n'); }
        | '__CoreCpp::BigNat' => { return CString::concat(exp.value, '_N'); }
        | '__CoreCpp::Float' => { return CString::concat(exp.value, '_f'); }
        | 'bool' => { return exp.value; }
        | _ => { abort; }
    }
}

function emitAccessVariableExpression(exp: CPPAssembly::AccessVariableExpression): CString {
    %% May need some work with type
    return emitVarIdentifier(exp.vname);
}

function emitReturnSingleStatement(ret: CPPAssembly::ReturnSingleStatement, ctx: Context, indent: CString): CString {
    %% let rtype = emitTypeSignature(ret.rtype);
    let exp = emitExpression(ret.value, ctx);

    let full_indent: CString = CString::concat(indent, '    ');
    return CString::concat(full_indent, 'return ', exp, ';%n;');
}

recursive function emitBinAddExpression(add: CPPAssembly::BinAddExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](add.lhs, ctx);
    let rhs = emitExpression[recursive](add.rhs, ctx);

    return CString::concat('(', lhs, ' + ', rhs, ')');
}

recursive function emitBinSubExpression(sub: CPPAssembly::BinSubExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](sub.lhs, ctx);
    let rhs = emitExpression[recursive](sub.rhs, ctx);

    return CString::concat('(', lhs, ' - ', rhs, ')');
}

recursive function emitBinDivExpression(div: CPPAssembly::BinDivExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](div.lhs, ctx);
    let rhs = emitExpression[recursive](div.rhs, ctx);

    return CString::concat('(', lhs, ' / ', rhs, ')');
}

recursive function emitBinMultExpression(mult: CPPAssembly::BinMultExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](mult.lhs, ctx);
    let rhs = emitExpression[recursive](mult.rhs, ctx);

    return CString::concat('(', lhs, ' * ', rhs, ')');
}

recursive function emitBinaryArithExpression(e: CPPAssembly::BinaryArithExpression, ctx: Context): CString {
    match(e)@ {
        CPPAssembly::BinAddExpression => { return emitBinAddExpression[recursive]($e, ctx); }
        | CPPAssembly::BinSubExpression => { return emitBinSubExpression[recursive]($e, ctx); }
        | CPPAssembly::BinDivExpression => { return emitBinDivExpression[recursive]($e, ctx); }
        | CPPAssembly::BinMultExpression => { return emitBinMultExpression[recursive]($e, ctx); }
    }
}

recursive function emitPrefixNotOpExpression(notop: CPPAssembly::PrefixNotOpExpression, ctx: Context): CString {
    let expr = emitExpression[recursive](notop.expr, ctx);
    return CString::concat('!', expr);
}

recursive function emitPrefixNegateOpExpression(negop: CPPAssembly::PrefixNegateOpExpression, ctx: Context): CString {
    let expr = emitExpression[recursive](negop.expr, ctx);
    return CString::concat('-', expr);
}

recursive function emitPrefixPlusOpExpression(plusop: CPPAssembly::PrefixPlusOpExpression, ctx: Context): CString {
    return emitExpression[recursive](plusop.expr, ctx);
}

recursive function emitUnaryExpression(e: CPPAssembly::UnaryExpression, ctx: Context): CString {
    match(e)@ {
        CPPAssembly::PrefixNotOpExpression => { return emitPrefixNotOpExpression[recursive]($e, ctx); }
        | CPPAssembly::PrefixNegateOpExpression => { return emitPrefixNegateOpExpression[recursive]($e, ctx); }
        | CPPAssembly::PrefixPlusOpExpression => { return emitPrefixPlusOpExpression[recursive]($e, ctx); }
    }
}

recursive function emitNumericEqExpression(e: CPPAssembly::NumericEqExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](e.lhs, ctx);
    let rhs = emitExpression[recursive](e.rhs, ctx);

    return CString::concat('(', lhs, ' == ', rhs, ')');   
}

recursive function emitNumericNeqExpression(e: CPPAssembly::NumericNeqExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](e.lhs, ctx);
    let rhs = emitExpression[recursive](e.rhs, ctx);

    return CString::concat('(', lhs, ' != ', rhs, ')');   
}

recursive function emitNumericLessExpression(e: CPPAssembly::NumericLessExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](e.lhs, ctx);
    let rhs = emitExpression[recursive](e.rhs, ctx);

    return CString::concat('(', lhs, ' < ', rhs, ')');   
}

recursive function emitNumericLessEqExpression(e: CPPAssembly::NumericLessEqExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](e.lhs, ctx);
    let rhs = emitExpression[recursive](e.rhs, ctx);

    return CString::concat('(', lhs, ' <= ', rhs, ')');   
}

recursive function emitNumericGreaterExpression(e: CPPAssembly::NumericGreaterExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](e.lhs, ctx);
    let rhs = emitExpression[recursive](e.rhs, ctx);

    return CString::concat('(', lhs, ' > ', rhs, ')');   
}

recursive function emitNumericGreaterEqExpression(e: CPPAssembly::NumericGreaterEqExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](e.lhs, ctx);
    let rhs = emitExpression[recursive](e.rhs, ctx);

    return CString::concat('(', lhs, ' >= ', rhs, ')');   
}

recursive function emitBinaryNumericExpression(e: CPPAssembly::BinaryNumericExpression, ctx: Context): CString {
    match(e)@ {
        CPPAssembly::NumericEqExpression => { return emitNumericEqExpression[recursive]($e, ctx); }
        | CPPAssembly::NumericNeqExpression => { return emitNumericNeqExpression[recursive]($e, ctx); }
        | CPPAssembly::NumericLessExpression => { return emitNumericLessExpression[recursive]($e, ctx); }
        | CPPAssembly::NumericLessEqExpression => { return emitNumericLessEqExpression[recursive]($e, ctx); }
        | CPPAssembly::NumericGreaterExpression => { return emitNumericGreaterExpression[recursive]($e, ctx); }
        | CPPAssembly::NumericGreaterEqExpression => { return emitNumericGreaterEqExpression[recursive]($e, ctx); }
    }
}

recursive function emitBinLogicAndExpression(e: CPPAssembly::BinLogicAndExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](e.lhs, ctx);
    let rhs = emitExpression[recursive](e.rhs, ctx);   

    return CString::concat('(', lhs, ' && ', rhs, ')');
}

recursive function emitBinLogicOrExpression(e: CPPAssembly::BinLogicOrExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](e.lhs, ctx);
    let rhs = emitExpression[recursive](e.rhs, ctx);   

    return CString::concat('(', lhs, ' || ', rhs, ')');
}

recursive function emitBinLogicImpliesExpression(e: CPPAssembly::BinLogicImpliesExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](e.lhs, ctx);
    let rhs = emitExpression[recursive](e.rhs, ctx);  

    let implies: CString = CString::concat('!', lhs, ' || ', rhs);
    return CString::concat('(', implies ,')');
}

recursive function emitBinLogicIFFExpression(e: CPPAssembly::BinLogicIFFExpression, ctx: Context): CString {
    let lhs = emitExpression[recursive](e.lhs, ctx);
    let rhs = emitExpression[recursive](e.rhs, ctx); 
    let nlhs: CString = CString::concat('!', lhs);
    let nrhs: CString = CString::concat('!', rhs);

    let first: CString = CString::concat('(', lhs, ' && ', rhs, ')');
    let second: CString = CString::concat('(', nlhs, ' && ', nrhs, ')');

    return CString::concat('(', first, ' || ', second, ')');
}

recursive function emitBinLogicExpression(e: CPPAssembly::BinLogicExpression, ctx: Context): CString {
    match(e)@ {
        CPPAssembly::BinLogicAndExpression => { return emitBinLogicAndExpression[recursive]($e, ctx); }
        | CPPAssembly::BinLogicOrExpression => { return emitBinLogicOrExpression[recursive]($e, ctx); }
        | CPPAssembly::BinLogicImpliesExpression => { return emitBinLogicImpliesExpression[recursive]($e, ctx); }
        | CPPAssembly::BinLogicIFFExpression => { return emitBinLogicIFFExpression[recursive]($e, ctx); }
    }
}

recursive function emitLogicActionAndExpression(e: CPPAssembly::LogicActionAndExpression, ctx: Context): CString {
    let args = e.args.map<CString>(fn(expr) => emitExpression[recursive](expr, ctx));
    return CString::concat('(', CString::joinAll(' && ', args), ')');
}

recursive function emitLogicActionOrExpression(e: CPPAssembly::LogicActionOrExpression, ctx: Context): CString {
    let args = e.args.map<CString>(fn(expr) => emitExpression[recursive](expr, ctx));
    return CString::concat('(', CString::joinAll(' || ', args), ')');
}

function emitArgumentValue(av: Option<CPPAssembly::ArgumentValue>, i: Nat, func: CPPAssembly::NamespaceFunctionDecl, ctx: Context): CString {
    if(av)@none {
        let param = func.params.get(i).defaultval;
        if(param)@none {
            abort; %% Should be impossible
        }
        else {
            return emitExpression[recursive]($param, ctx);
        }
    }
    else {
        let arg = $av;
        let expr = emitExpression[recursive](arg.exp, ctx);
        match(arg)@ {
            CPPAssembly::NamedArgumentValue => { return expr; } 
            | CPPAssembly::PositionalArgumentValue => { return expr; }
            | _ => { abort; }
        }
    }
}

function resolveDefaultParams(al: List<CString>, func: CPPAssembly::NamespaceFunctionDecl): List<CString> {
    return al.map<CString>(fn(arg) => { 
        if(arg.startsWithString('$')) {
            let ident = arg.removePrefixString('$');

            %% This is a bit hacky but works for getting default val idx
            let idx = func.params.mapIdx<Nat>(fn(param, ii) => {
                if(emitIdentifier(param.pname) === ident) {
                    return ii;
                }
                return 0n;
            }).sum();

            return al.get(idx);
        }
        return arg; 
    });
}

function emitArgumentList(al: CPPAssembly::ArgumentList, func: CPPAssembly::NamespaceFunctionDecl, ctx: Context): CString {
    let emit_al = al.args.mapIdx<CString>(fn(arg, ii) => emitArgumentValue(arg, ii, func, ctx));
    
    return CString::joinAll(', ', resolveDefaultParams[recursive](emit_al, func));
}

recursive function findNamespaceDecl(decls: Map<CString, CPPAssembly::NamespaceDecl>, fullns: List<CString>): CPPAssembly::NamespaceDecl {
    let ns_name = fullns.front();
    let remaining_ns_names = fullns.popFront().1;

    %% Found func we are looking for
    if(remaining_ns_names.empty() && decls.has(ns_name)) {
        return decls.get(ns_name);
    }

    if(decls.has(ns_name)) {
        let cur_nsdecl = decls.get(ns_name);
        return findNamespaceDecl[recursive](cur_nsdecl.subns, remaining_ns_names);
    }
    else {
        abort; %% Namespace does not exist
    }
}

function emitCallNamespaceFunctionExpression(e: CPPAssembly::CallNamespaceFunctionExpression, ctx: Context): CString { 
    let resolvedns = emitResolvedNamespace(ctx.fullns_list, e.ns.value); 

    let ident = emitInvokeKey(e.ikey);
    let name = ident.removePrefixString(e.ns.value);
    
    var resolvedName: CString;
    if(name.startsWithString('::')) {
        resolvedName = name.removePrefixString('::');
    }
    else {
        resolvedName = name;
    }

    let func = findNamespaceDecl(ctx.nsdecls, e.fullns).nsfuncs.get(e.ikey);
    let args = emitArgumentList(e.args, func, ctx);

    if(resolvedns !== '') {
        return CString::concat(resolvedns, '::', resolvedName,'(', args, ')');
    }
    return CString::concat(resolvedName, '(', args, ')');
}

function emitPostfixOpImpl(op: CPPAssembly::PostfixOperation): CString {
    return CString::concat( '.', emitIdentifier(op@<CPPAssembly::PostfixAccessFromName>.name));
}

function emitPostfixOp(pop: CPPAssembly::PostfixOp, ctx: Context): CString {
    let rootExp = emitExpression(pop.rootExp, ctx);
    let ops = pop.ops.map<CString>(fn(op) => {
        return emitPostfixOpImpl(op); 
    });

    return CString::concat(rootExp, CString::joinAll(', ', ops));
}

function emitConstructorStdExpression(e: CPPAssembly::ConstructorStdExpression, ctx: Context): CString {
    %% Eventually might want to rework emitArgumentList to support constructors too 
    let emitargs =  CString::joinAll(', ', e.args.args.mapIdx<CString>(fn(av, ii) => {
        if(av)@none {
            let ns_entity = findNamespaceDecl(ctx.nsdecls, e.fullns).entities.get(e.ctype.tkeystr);
            let member_defval = ns_entity.fields.get(ii).defaultval;
            if(member_defval)@none {
                abort; %% Default value detected in transform, yet none provided for emission
            }
            else {
                return emitExpression[recursive]($member_defval, ctx);
            }
        }
        else {
            let arg = $av;
            let expr = emitExpression[recursive](arg.exp, ctx);
            match(arg)@ {
                CPPAssembly::NamedArgumentValue => { return expr; } 
                | CPPAssembly::PositionalArgumentValue => { return expr; }
                | _ => { abort; }
            }
        }
    }));

    let resolved_type = emitResolvedNamespace(ctx.fullns_list, e.ctype.tkeystr.value);
    return CString::concat(resolved_type, '{ ', emitargs, ' }');
}

function emitExpression(e: CPPAssembly::Expression, ctx: Context): CString {
    match(e)@ {
        CPPAssembly::BinaryArithExpression => { return emitBinaryArithExpression[recursive]($e, ctx); }
        | CPPAssembly::BinaryNumericExpression => { return emitBinaryNumericExpression[recursive]($e, ctx); }
        | CPPAssembly::UnaryExpression => { return emitUnaryExpression[recursive]($e, ctx); }
        | CPPAssembly::BinLogicExpression => { return emitBinLogicExpression[recursive]($e, ctx); }
        | CPPAssembly::LogicActionAndExpression => { return emitLogicActionAndExpression[recursive]($e, ctx); }
        | CPPAssembly::LogicActionOrExpression => { return emitLogicActionOrExpression[recursive]($e, ctx); }
        | CPPAssembly::LiteralSimpleExpression => { return emitLiteralSimpleExpression($e); }
        | CPPAssembly::AccessVariableExpression => { return emitAccessVariableExpression($e); }
        | CPPAssembly::CallNamespaceFunctionExpression => { return emitCallNamespaceFunctionExpression($e, ctx); }
        | CPPAssembly::PostfixOp => { return emitPostfixOp($e, ctx); }
        | CPPAssembly::ConstructorStdExpression => { return emitConstructorStdExpression($e, ctx); }
        | _ => { abort; }
    }
}

function emitVariableInitializationStatement(stmt: CPPAssembly::VariableInitializationStatement, ctx: Context, indent: CString): CString {
    let name = emitIdentifier(stmt.name);
    let stype = emitTypeSignature(stmt.vtype, ctx);
    let exp = emitExpression(stmt.exp, ctx);

    let full_indent: CString = CString::concat(indent, '    ', stype); %% List constructor size max 6
    return CString::concat(full_indent, ' ', name, ' = ', exp, ';');
}

function emitBlockStatement(block: CPPAssembly::BlockStatement, ctx: Context, indent: CString): CString {
    let stmts = block.statements.map<CString>(fn(stmt) => emitStatement(stmt, ctx, indent));
    return CString::joinAll('%n;', stmts);
}

function emitIfStatement(stmt: CPPAssembly::IfStatement, ctx: Context, indent: CString): CString {
    let full_indent = CString::concat('    ', indent); 
    let expr = emitExpression(stmt.cond, ctx);
    let trueBlock = emitBlockStatement(stmt.trueBlock, ctx, full_indent);
    
    let ifstmt = CString::concat(full_indent, 'if( ', expr, ' ) {%n;');
    return CString::concat(ifstmt, trueBlock, full_indent, '}');
}

function emitIfElseStatement(stmt: CPPAssembly::IfElseStatement, ctx: Context, indent: CString): CString {
    let full_indent = CString::concat('    ', indent); 
    let expr = emitExpression(stmt.cond, ctx);
    
    let falseBlock = emitBlockStatement(stmt.falseBlock, ctx, full_indent);
    let elseBlockText = CString::concat(full_indent, 'else {%n;', falseBlock, full_indent, '}%n;');

    let trueBlock = emitBlockStatement(stmt.trueBlock, ctx, full_indent);
    let ifstmt = CString::concat(full_indent, 'if( ', expr, ' ) {%n;'); 

    return CString::concat(ifstmt, trueBlock, full_indent, '}%n;', elseBlockText);
}

function emitIfElifElseStatement(stmt: CPPAssembly::IfElifElseStatement, ctx: Context, indent: CString): CString {
    let full_indent = CString::concat('    ', indent); 
    let ifcond = CString::concat(full_indent, 'if(', emitExpression(stmt.ifcond, ctx), ') {%n;');
    let ifbody = CString::concat(emitBlockStatement(stmt.ifflow, ctx, full_indent), full_indent, '}%n;');
    let ifblock = CString::concat(ifcond, ifbody);
    let elseblock = CString::concat(full_indent, 'else {%n;', emitBlockStatement(stmt.elseflow, ctx, full_indent), full_indent, '}%n;');

    let elifs_list = stmt.condflow.map<CString>(fn(elifs) => {
        let cond = emitExpression(elifs.0, ctx);
        let body = emitBlockStatement(elifs.1, ctx, full_indent);

        let elif_stmt = CString::concat(full_indent, 'else if(', cond, ') {%n;');
        return CString::concat(elif_stmt, body, full_indent, '}%n;');
    });
    let elifs = CString::joinAll('', elifs_list);

    return CString::concat(ifcond, ifbody, elifs, elseblock);
}

function emitStatement(stmt: CPPAssembly::Statement, ctx: Context, indent: CString): CString {
    match(stmt)@ {
        CPPAssembly::VariableInitializationStatement => { return emitVariableInitializationStatement($stmt, ctx, indent); }
        | CPPAssembly::ReturnSingleStatement => { return emitReturnSingleStatement($stmt, ctx, indent); }
        | CPPAssembly::IfStatement => { return emitIfStatement($stmt, ctx, indent); }
        | CPPAssembly::IfElseStatement => { return emitIfElseStatement($stmt, ctx, indent); }
        | CPPAssembly::IfElifElseStatement => { return emitIfElifElseStatement($stmt, ctx, indent); }
        | _ => { abort; }
    }
}

function emitStandardBodyImplementation(body: CPPAssembly::StandardBodyImplementation, ctx: Context, indent: CString): CString {
    return CString::joinAll('%n;', body.statements.map<CString>(fn(stmt) => emitStatement(stmt, ctx, indent)));
}

function emitBodyImplementation(body: CPPAssembly::BodyImplementation, ctx: Context, indent: CString): CString {
    match(body)@ {
        %% CPPAssembly::AbstractBodyImplementation => { abort; }
        %% | CPPAssembly::PredicateUFBodyImplementation => { abort; }
        %% | CPPAssembly::BuiltinBodyImplementation => { abort; }
        %% | CPPAssembly::SynthesisBodyImplementation => { abort; }
        %% | CPPAssembly::ExpressionBodyImplementation => { abort; }
        CPPAssembly::StandardBodyImplementation => { return emitStandardBodyImplementation($body, ctx, indent); }
        | _ => { abort; }
    }
}

function emitParameters(params: List<CPPAssembly::ParameterDecl>, ctx: Context): CString {
    let all_params = params.map<CString>(fn(param) => {
        let ptype = emitTypeSignature(param.ptype, ctx);
        let resolved_ptype = emitResolvedNamespace(ctx.fullns_list, ptype);
        let pident = emitIdentifier(param.pname);
        return CString::concat(resolved_ptype, ' ', pident);
    });

    return CString::joinAll(', ', all_params);
}

function emitNamespaceFunctionDecl(func: CPPAssembly::NamespaceFunctionDecl, ctx: Context, indent: CString): CString {
    let nctx = ctx.updateCurrentNamespace(func.declaredInNS, func.fullns);

    let name = func.name;
    let nskey = emitNamespaceKey(func.declaredInNS);
    let params = emitParameters(func.params, nctx);
    let rtype = emitTypeSignature(func.resultType, ctx); 

    let pre: CString = CString::concat(indent, rtype, ' ', name );
    let params_impl: CString = CString::concat('(', params, ') noexcept ');

    return CString::concat(pre, params_impl, ' {%n;', emitBodyImplementation(func.body, nctx, indent), indent, '}%n;');
}

function emitMemberFieldDecl(member: CPPAssembly::MemberFieldDecl, ctx: Context, indent: CString): CString {
    let name = emitIdentifier(member.name);
    let mtype = emitTypeSignature(member.declaredType, ctx);
    return CString::concat(indent, 'const ',mtype, ' ', name, ';%n;');
}

function emitEntityTypeDecl(e: CPPAssembly::EntityTypeDecl, tk: CString, ctx: Context, indent: CString): CString {
    let nctx = ctx.updateCurrentNamespace(e.declaredInNS, e.fullns);
    
    let resolved_tk = emitResolvedNamespace(nctx.fullns_list, tk);
    let entries = e.fields.reduce<CString>(CString::concat(indent, 'struct ', resolved_tk, '{ %n;'), 
    fn(acc, entry) => {
        return CString::concat(acc, emitMemberFieldDecl(entry, nctx, CString::concat('    ', indent)));
    });

    return CString::concat(entries, indent, '};%n;');
}

function emitEntityForwardDeclaration(e: CPPAssembly::EntityTypeDecl, ctx: Context, indent: CString): CString {
    let nctx = ctx.updateCurrentNamespace(e.declaredInNS, e.fullns);
    return CString::concat(indent, 'struct ', emitResolvedNamespace(nctx.fullns_list, e.tkey.value), ';%n;');
}

%% I suspect we will need separate cases for entities, types, enums and such
function emitFunctionForwardDeclaration(decl: CPPAssembly::NamespaceFunctionDecl, ctx: Context, ident: CString): CString {
    let nctx = ctx.updateCurrentNamespace(decl.declaredInNS, decl.fullns);

    let pre = decl.name;
    let rtype = emitTypeSignature(decl.resultType, ctx); 
    let params = emitParameters(decl.params, nctx);
    let first = CString::concat(ident, rtype, ' ', pre );
    return CString::concat(first, '(', params, ') noexcept;%n;');
}

function emitTypeInfo(info: CPPAssembly::TypeInfo, indent: CString): CString {
    let full_indent = CString::concat('    ', indent);

    let base = CString::concat(indent, 'TypeInfoBase ', info.typekey, ' = {%n;');
    let id = CString::concat(base, full_indent, '.type_id = ', info.id.toCString(), ',%n;');
    let typesize = CString::concat(id, full_indent, '.type_size = ', info.typesize.toCString(), ', %n;');
    let slotsize = CString::concat(typesize, full_indent, '.slot_size = ', info.slotsize.toCString(), ',%n;');
    let ptrmask = CString::concat(slotsize, full_indent, '.ptr_mask = "', info.ptrmask, '",%n;');
    let typekey = CString::concat(ptrmask, full_indent, '.typekey = "', info.typekey, '"%n;');

    return CString::concat(typekey, indent, '};%n;');
}

recursive function emitNamespaceDecl(nsdecl: CPPAssembly::NamespaceDecl, ctx: Context, indent: CString): CString {
    %% Emit namespace 
    let ns = CString::concat(indent, 'namespace ', nsdecl.nsname, ' {%n;');
    let full_indent = CString::concat('    ', indent);

    let entityfwd_decls = nsdecl.entities.reduce<CString>(ns, fn(acc, tk, e) => {
        return CString::concat(acc, emitEntityForwardDeclaration(e, ctx, full_indent));
    });

    %% Emit our function and entity forward decls (all that is supported for now)
    let funcfwd_decls = nsdecl.nsfuncs.reduce<CString>(entityfwd_decls, fn(acc, ikey, decl) => {
        return CString::concat(acc, emitFunctionForwardDeclaration(decl, ctx, full_indent));
    });

    %% All entities
    let entities = nsdecl.entities.reduce<CString>(funcfwd_decls, fn(acc, tk, e) => {
        let typekey = tk.value;
        let emit_entity = emitEntityTypeDecl(e, typekey, ctx, full_indent);

        return CString::concat(acc, indent, emit_entity);
    });

    %% Emit sub-namespace declarations
    let subns = nsdecl.subns.reduce<CString>(entities, fn(acc, name, decl) => {
        return CString::concat(acc, emitNamespaceDecl[recursive](decl, ctx, full_indent));
    });

    %% Emit functions in current namespace
    let funcs = nsdecl.nsfuncs.reduce<CString>(subns, fn(acc, key, func) => {
        return CString::concat(acc, emitNamespaceFunctionDecl(func, ctx, full_indent)); 
    });

    return CString::concat(funcs, indent, '}%n;');
}

function emitAssembly(asm: CPPAssembly::Assembly): CString {
    let typeinfos = asm.typeinfos.reduce<CString>('', fn(acc, tkey, tinfo) => {
        return CString::concat(acc, emitTypeInfo(tinfo, ''));
    });
    
    let ctx: Context = Context{CPPAssembly::NamespaceKey::from('Tmp'), List<CString>{''}, asm.nsdecls}; %% No known namespace yet
    let ns_emission = asm.nsdecls.reduce<CString>(typeinfos, fn(acc, nsname, nsdecl) => {
        return CString::concat(acc, emitNamespaceDecl[recursive](nsdecl, ctx, ''));
    });

    %% TODO: Other non namespace functions

    %% For CCharBuf and Unicode... will need to emit builtin functions explicitly

    return CString::join('%n;', ns_emission, '%n;');
}