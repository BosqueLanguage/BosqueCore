namespace CPPEmitter;

function emitIncludes(): CString {
    return '#include "cppruntime.hpp"';
}

namespace PathStack {
    function emitPathStackCreate(): CString {
        return 'PathStack ps = PathStack::create();';
    }

    function emitPathStackLeft(): CString {
        return 'ps.left();';
    }

    function emitPathStackRight(): CString {
        return 'ps.right();';
    }

    function emitPathStackUp(): CString {
        return 'ps.up();';
    }
}

namespace CCharBuffer {
    %% Emit c++ for buffer creation here
}

namespace UnicodeCharBuffer {
    %% Emit c++ for buffer creation here
}

function emitFunction(ik: CPPAssembly::InvokeKey): CString {
    return ik.value;
}

function emitAssembly(asm: CPPAssembly::Assembly): CString {
    %% For now we just grab every function
    let efuncs_list = asm.allfuncs.map<CString>(fn(t) => {
        return emitFunction(t);
    });

    return CString::joinAll('%n;%n;', efuncs_list);
}