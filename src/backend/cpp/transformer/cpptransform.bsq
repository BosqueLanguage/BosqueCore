namespace CPPEmitter;

%% Transform Bosque names into cpp representation
namespace CPPTransformNameManager {
    function convertNamespaceKey(nskey: BSQAssembly::NamespaceKey): CPPAssembly::NamespaceKey {
        return CPPAssembly::NamespaceKey::from(nskey.value);
    }

    function convertInvokeKey(ikey: BSQAssembly::InvokeKey): CPPAssembly::InvokeKey {
        return CPPAssembly::InvokeKey::from(ikey.value);
    }

    function convertTypeSignature(tsig: BSQAssembly::TypeSignature): CPPAssembly::TypeSignature {
        let tk = CPPAssembly::TypeKey::from(tsig.tkeystr.value);

        %% We will want to eventually not use nominal type signature always, i think itll be obvious when to not use
        switch(tk.value) {
            'Int' => { return CPPAssembly::NominalTypeSignature{ CPPAssembly::TypeKey::from('__CoreCpp::Int') }; }
            | 'BigInt' => { return CPPAssembly::NominalTypeSignature{ CPPAssembly::TypeKey::from('__CoreCpp::BigInt') }; }
            | 'Nat' => { return CPPAssembly::NominalTypeSignature{ CPPAssembly::TypeKey::from('__CoreCpp::Nat') }; }
            | 'BigNat' => { return CPPAssembly::NominalTypeSignature{ CPPAssembly::TypeKey::from('__CoreCpp::BigNat') }; }
            | 'Float' => { return CPPAssembly::NominalTypeSignature{ CPPAssembly::TypeKey::from('__CoreCpp::Float') }; }
            | 'Bool' => { return CPPAssembly::NominalTypeSignature{ CPPAssembly::TypeKey::from('bool') }; }
            | _ => { abort; }
        }
    }

    function convertIdentifier(ident: BSQAssembly::Identifier): CPPAssembly::Identifier {
        return CPPAssembly::Identifier::from(ident.value);
    }

    function convertVarIdentifier(vident: BSQAssembly::VarIdentifier): CPPAssembly::VarIdentifier {
        return CPPAssembly::VarIdentifier::from(vident.value);
    }

    function createNamespaceDecl(name: CString): CPPAssembly::NamespaceDecl {
        let subns = Map<CString, CPPAssembly::NamespaceDecl>{};
        let nsfuncs = Map<CPPAssembly::InvokeKey, CPPAssembly::NamespaceFunctionDecl>{};
        return CPPAssembly::NamespaceDecl{ name, subns, nsfuncs };
    }

    recursive function getNamespaceDeclMapping(fullns: List<CString>, nsdecls: Map<CString, CPPAssembly::NamespaceDecl>, func_key: CPPAssembly::InvokeKey, func_val: CPPAssembly::NamespaceFunctionDecl): Map<CString, CPPAssembly::NamespaceDecl> {
        if(fullns.empty()) { %% Base case, we have recursed through all subdecls
            return nsdecls;
        }

        let ns_name = fullns.front();
        let remaining_ns_names = fullns.popFront().1;

        var cur_nsdecl: CPPAssembly::NamespaceDecl;
        if(nsdecls.has(ns_name)) {
            cur_nsdecl = nsdecls.get(ns_name);
        }
        else {
            cur_nsdecl = createNamespaceDecl(ns_name);
        }

        %% See if we can insert our namespace function decl
        var func: Map<CPPAssembly::InvokeKey, CPPAssembly::NamespaceFunctionDecl>;
        if(remaining_ns_names.empty()) {
            func = cur_nsdecl.nsfuncs.insert(func_key, func_val);
        }
        else{
            func = cur_nsdecl.nsfuncs;
        }

        %% Recursively process remaining names
        let subns = getNamespaceDeclMapping[recursive](remaining_ns_names, cur_nsdecl.subns, func_key, func_val);
        let updated_nsdecl = CPPAssembly::NamespaceDecl { ns_name, subns, func };

        %% We need to always update the nsdecls map as sub namespaces may change (this handles multiple nsdecls at same depth)
        if(!nsdecls.has(ns_name)) {
            return nsdecls.insert(ns_name, updated_nsdecl);
        }
        else {
            let tmp_map = nsdecls.delete(ns_name);
            return tmp_map.insert(ns_name, updated_nsdecl);
        }
    }
}

entity CPPTransformer {
    field bsqasm: BSQAssembly::Assembly;

    recursive method processBinaryArgs(lhs: BSQAssembly::Expression, rhs: BSQAssembly::Expression): CPPAssembly::Expression, CPPAssembly::Expression {
        let cpplhs = this.transformExpressionToCpp[recursive](lhs);
        let cpprhs = this.transformExpressionToCpp[recursive](rhs);

        return cpplhs, cpprhs;
    }

    recursive method transformBinAddExpressionToCpp(expr: BSQAssembly::BinAddExpression): CPPAssembly::BinAddExpression {
        let lexpr, rexpr = this.processBinaryArgs[recursive](expr.lhs, expr.rhs);
        return CPPAssembly::BinAddExpression{ lexpr.etype, lexpr, rexpr };
    }

    recursive method transformBinSubExpressionToCpp(expr: BSQAssembly::BinSubExpression): CPPAssembly::BinSubExpression {
        let lexpr, rexpr = this.processBinaryArgs[recursive](expr.lhs, expr.rhs);
        return CPPAssembly::BinSubExpression{ lexpr.etype, lexpr, rexpr };
    }

    recursive method transformBinDivExpressionToCpp(expr: BSQAssembly::BinDivExpression): CPPAssembly::BinDivExpression {
        let lexpr, rexpr = this.processBinaryArgs[recursive](expr.lhs, expr.rhs);
        return CPPAssembly::BinDivExpression{ lexpr.etype, lexpr, rexpr };
    }

    recursive method transformBinMultExpressionToCpp(expr: BSQAssembly::BinMultExpression): CPPAssembly::BinMultExpression {
        let lexpr, rexpr = this.processBinaryArgs[recursive](expr.lhs, expr.rhs);
        return CPPAssembly::BinMultExpression{ lexpr.etype, lexpr, rexpr };
    }

    method transformLiteralSimpleExpression(expr: BSQAssembly::LiteralSimpleExpression): CPPAssembly::LiteralSimpleExpression {
        let val = expr.value;
        let exprtype = CPPTransformNameManager::convertTypeSignature(expr.etype);

        %% May be cleaner to handle in cppemit
        if(val.endsWithString('i')) {
            return CPPAssembly::LiteralSimpleExpression{ exprtype, val.removeSuffixString('i') };
        }
        elif(val.endsWithString('I')) {
            return CPPAssembly::LiteralSimpleExpression{ exprtype, val.removeSuffixString('I') };
        }
        elif(val.endsWithString('n')) {
            return CPPAssembly::LiteralSimpleExpression{ exprtype, val.removeSuffixString('n') };
        }
        elif(val.endsWithString('N')) {
            return CPPAssembly::LiteralSimpleExpression{ exprtype, val.removeSuffixString('N') };
        }
        elif(val.endsWithString('f')) {
            return CPPAssembly::LiteralSimpleExpression{ exprtype, val.removeSuffixString('f') };
        }
        else { %% Fall through, may need explicit handling in future
            return CPPAssembly::LiteralSimpleExpression{ exprtype, val };
        }
    }

    method transformAccessVariableExpression(expr: BSQAssembly::AccessVariableExpression): CPPAssembly::AccessVariableExpression {
        let vname = CPPTransformNameManager::convertVarIdentifier(expr.vname);
        let vtype = CPPTransformNameManager::convertTypeSignature(expr.etype);
        let layouttype = CPPTransformNameManager::convertTypeSignature(expr.layouttype);

        return CPPAssembly::AccessVariableExpression { vtype, vname, layouttype };
    }

    recursive method transformUnaryExpression(uexpr: BSQAssembly::UnaryExpression): CPPAssembly::UnaryExpression {
        let expr = this.transformExpressionToCpp[recursive](uexpr.exp);

        match(uexpr)@ {
            BSQAssembly::PrefixNotOpExpression => { return CPPAssembly::PrefixNotOpExpression{ expr.etype, expr }; }
            | BSQAssembly::PrefixNegateOpExpression => { return CPPAssembly::PrefixNegateOpExpression{ expr.etype, expr }; }
            | BSQAssembly::PrefixPlusOpExpression => { return CPPAssembly::PrefixPlusOpExpression{ expr.etype, expr }; }
        }
    }

    %% I think we can simplify this and remove the transform functions, just match our bsqasm type then return transform type
    recursive method transformBinaryArithExpression(binarith: BSQAssembly::BinaryArithExpression): CPPAssembly::BinaryArithExpression {
        match(binarith)@ {
            BSQAssembly::BinAddExpression => { return this.transformBinAddExpressionToCpp[recursive]($binarith); }
            | BSQAssembly::BinSubExpression => { return this.transformBinSubExpressionToCpp[recursive]($binarith); }           
            | BSQAssembly::BinDivExpression => { return this.transformBinDivExpressionToCpp[recursive]($binarith); }
            | BSQAssembly::BinMultExpression => { return this.transformBinMultExpressionToCpp[recursive]($binarith); }
        }
    }

    recursive method transformBinaryNumericCompareExpression(expr: BSQAssembly::BinaryNumericExpression): CPPAssembly::BinaryNumericExpression {
        let cpplhs, cpprhs = this.processBinaryArgs[recursive](expr.lhs, expr.rhs);

        let cpptype = CPPTransformNameManager::convertTypeSignature(expr.etype);
        match(expr)@ {
            BSQAssembly::NumericEqExpression => { return CPPAssembly::NumericEqExpression { cpptype, cpplhs, cpprhs }; }
            | BSQAssembly::NumericNeqExpression => { return CPPAssembly::NumericNeqExpression{ cpptype, cpplhs, cpprhs }; }
            | BSQAssembly::NumericLessExpression => { return CPPAssembly::NumericLessExpression{ cpptype, cpplhs, cpprhs}; }
            | BSQAssembly::NumericLessEqExpression => { return CPPAssembly::NumericLessEqExpression{ cpptype, cpplhs, cpprhs }; }
            | BSQAssembly::NumericGreaterExpression => { return CPPAssembly::NumericGreaterExpression{ cpptype, cpplhs, cpprhs }; }
            | BSQAssembly::NumericGreaterEqExpression => { return CPPAssembly::NumericGreaterEqExpression{ cpptype, cpplhs, cpprhs }; }
        }
    }

    recursive method transformBinLogicExpression(expr: BSQAssembly::BinLogicExpression): CPPAssembly::BinLogicExpression {
        let cpplhs, cpprhs = this.processBinaryArgs[recursive](expr.lhs, expr.rhs);
        let cpptype = CPPTransformNameManager::convertTypeSignature(expr.etype);

        match(expr)@ {
            BSQAssembly::BinLogicAndExpression => { return CPPAssembly::BinLogicAndExpression{ cpptype, cpplhs, cpprhs }; }
            | BSQAssembly::BinLogicOrExpression => { return CPPAssembly::BinLogicOrExpression{ cpptype, cpplhs, cpprhs }; }
            | BSQAssembly::BinLogicImpliesExpression => { return CPPAssembly::BinLogicImpliesExpression{ cpptype, cpplhs, cpprhs }; }
            | BSQAssembly::BinLogicIFFExpression => { return CPPAssembly::BinLogicIFFExpression{ cpptype, cpplhs, cpprhs }; }
        }
    }

    recursive method transformLogicActionAndExpression(expr: BSQAssembly::LogicActionAndExpression): CPPAssembly::LogicActionAndExpression {
        let args = expr.args.map<CPPAssembly::Expression>(fn(e) => this.transformExpressionToCpp(e));
        let cpptype = CPPTransformNameManager::convertTypeSignature(expr.etype);

        return CPPAssembly::LogicActionAndExpression{cpptype, args};
    }

    recursive method transformLogicActionOrExpression(expr: BSQAssembly::LogicActionOrExpression): CPPAssembly::LogicActionOrExpression {
        let args = expr.args.map<CPPAssembly::Expression>(fn(e) => this.transformExpressionToCpp(e));
        let cpptype = CPPTransformNameManager::convertTypeSignature(expr.etype);

        return CPPAssembly::LogicActionOrExpression{cpptype, args};
    }

    method transformArgument(arg: BSQAssembly::ArgumentValue): CPPAssembly::ArgumentValue {
        let exp = this.transformExpressionToCpp[recursive](arg.exp);

        match(arg)@ {
            BSQAssembly::NamedArgumentValue => { return CPPAssembly::NamedArgumentValue{ 
                exp, CPPTransformNameManager::convertVarIdentifier($arg.name) }; }
            | BSQAssembly::PositionalArgumentValue => { return CPPAssembly::PositionalArgumentValue{ exp }; }
            | _ => { abort; } %% TODO: Not implemented
        }
    }

    %%
    %% We can do these two loops together
    %%
    method transformArgumentList(bsqargs: BSQAssembly::InvokeArgumentInfo): CPPAssembly::ArgumentList {
        let alist = bsqargs.args.args.map<CPPAssembly::ArgumentValue>(fn(arg) => this.transformArgument(arg));
        let shuffled = bsqargs.shuffleinfo.mapIdx<Option<CPPAssembly::ArgumentValue>>(fn(e, ii) => {
            var cur_arg: CPPAssembly::ArgumentValue;
            if(ii >= alist.size()) {
                return none;
            }
            else { %% Resolve shuffle value
                let shuffle_idx = e.0;
                if(shuffle_idx)@none {
                    return none;
                }
                else {
                    cur_arg = alist.get($shuffle_idx);
                }
            }

            return some(cur_arg);
        });
        return CPPAssembly::ArgumentList{ shuffled };   
    }

    method transformCallNamespaceFunctionExpression(expr: BSQAssembly::CallNamespaceFunctionExpression): CPPAssembly::CallNamespaceFunctionExpression {
        let ts = CPPTransformNameManager::convertTypeSignature(expr.etype);
        let ikey = CPPTransformNameManager::convertInvokeKey(expr.ikey);
        let ns = CPPTransformNameManager::convertNamespaceKey(expr.ns);
        let args = this.transformArgumentList(expr.argsinfo);
        let fullns = expr.fullns; %% For looking up func we are calling

        return CPPAssembly::CallNamespaceFunctionExpression{ ts, ikey, ns, fullns, args };
    }

    recursive method transformExpressionToCpp(expr: BSQAssembly::Expression): CPPAssembly::Expression {
        match(expr)@ {
            BSQAssembly::BinaryArithExpression => { return this.transformBinaryArithExpression[recursive]($expr); }
            | BSQAssembly::BinaryNumericExpression => { return this.transformBinaryNumericCompareExpression[recursive]($expr); }
            | BSQAssembly::LiteralSimpleExpression => { return this.transformLiteralSimpleExpression($expr); }
            | BSQAssembly::UnaryExpression => { return this.transformUnaryExpression[recursive]($expr); }
            | BSQAssembly::BinLogicExpression => { return this.transformBinLogicExpression[recursive]($expr); }
            | BSQAssembly::LogicActionAndExpression => { return this.transformLogicActionAndExpression[recursive]($expr); }
            | BSQAssembly::LogicActionOrExpression => { return this.transformLogicActionOrExpression[recursive]($expr); }
            | BSQAssembly::AccessVariableExpression => { return this.transformAccessVariableExpression($expr); }
            | BSQAssembly::CallNamespaceFunctionExpression => { return this.transformCallNamespaceFunctionExpression($expr); }
            | _ => { abort; }
        }
    }

    recursive method transformReturnSingleStatementToCpp(ret: BSQAssembly::ReturnSingleStatement): CPPAssembly::ReturnSingleStatement {
        let rtype = CPPTransformNameManager::convertTypeSignature(ret.rtype);
        let rexp = this.transformExpressionToCpp[recursive](ret.value);

        return CPPAssembly::ReturnSingleStatement{rtype, rexp};
    }

    recursive method transformVariableInitializationStatementToCpp(stmt: BSQAssembly::VariableInitializationStatement): CPPAssembly::VariableInitializationStatement {
        let name = CPPTransformNameManager::convertIdentifier(stmt.name);
        let stype = CPPTransformNameManager::convertTypeSignature(stmt.vtype);
        let cppexpr = this.transformExpressionToCpp[recursive](stmt.exp);

        return CPPAssembly::VariableInitializationStatement{ name, stype, cppexpr };
    }

    method transformBlockStatement(block: BSQAssembly::BlockStatement): CPPAssembly::BlockStatement {
        let stmts = block.statements.map<CPPAssembly::Statement>(fn(stmt) => this.transformStatementToCpp(stmt));
        return CPPAssembly::BlockStatement{ stmts, block.isScoping };
    }

    recursive method transformIfStatement(stmt: BSQAssembly::IfStatement): CPPAssembly::IfStatement {
        let cond = this.transformExpressionToCpp[recursive](stmt.cond);
        let trueBlock = this.transformBlockStatement(stmt.trueBlock);

        return CPPAssembly::IfStatement{ cond, trueBlock };
    }

    recursive method transformIfElseStatement(stmt: BSQAssembly::IfElseStatement): CPPAssembly::IfElseStatement {
        let cond = this.transformExpressionToCpp[recursive](stmt.cond);
        let trueBlock = this.transformBlockStatement(stmt.trueBlock);
        let falseBlock = this.transformBlockStatement(stmt.falseBlock);

        return CPPAssembly::IfElseStatement{ cond, trueBlock, falseBlock };
    }

    recursive method transformIfElifElseStatement(stmt: BSQAssembly::IfElifElseStatement): CPPAssembly::IfElifElseStatement {
        let ifcond = this.transformExpressionToCpp[recursive](stmt.ifcond);
        let ifflow = this.transformBlockStatement(stmt.ifflow);
        let elseflow = this.transformBlockStatement(stmt.elseflow);

        let condflow = stmt.condflow.map<(|CPPAssembly::Expression, CPPAssembly::BlockStatement|)>(fn(block) => 
            (|this.transformExpressionToCpp[recursive](block.0), this.transformBlockStatement(block.1)|));
    
        return CPPAssembly::IfElifElseStatement{ ifcond, ifflow, condflow, elseflow };
    }

    method transformStatementToCpp(stmt: BSQAssembly::Statement): CPPAssembly::Statement {
        match(stmt)@ {
            BSQAssembly::VariableInitializationStatement => { return this.transformVariableInitializationStatementToCpp($stmt); }
            | BSQAssembly::ReturnSingleStatement => { return this.transformReturnSingleStatementToCpp[recursive]($stmt); }
            | BSQAssembly::IfStatement => { return this.transformIfStatement[recursive]($stmt); }
            | BSQAssembly::IfElseStatement => { return this.transformIfElseStatement[recursive]($stmt); }
            | BSQAssembly::IfElifElseStatement => { return this.transformIfElifElseStatement[recursive]($stmt); }
            | _ => { abort; }
        }
    }

    method transformStatementListToCpp(stmts: List<BSQAssembly::Statement>): List<CPPAssembly::Statement> {
        let tailop = stmts.back();

        %% Need to match tailop to get return, not implemented for now

        return stmts.map<CPPAssembly::Statement>(fn(stmt) => this.transformStatementToCpp(stmt));
    }

    method transformDefaultVal(val: Option<BSQAssembly::Expression>): Option<CPPAssembly::Expression> {
        match(val)@ {
            None => { return none; }
            | _ => { return some(this.transformExpressionToCpp[recursive]($val.value)); }
        }
    }

    method transformParameterDecl(decl: List<BSQAssembly::InvokeParameterDecl>): List<CPPAssembly::ParameterDecl> {
        return decl.map<CPPAssembly::ParameterDecl>(fn(pdecl) => {
            return CPPAssembly::ParameterDecl{ 
                CPPTransformNameManager::convertIdentifier(pdecl.pname), 
                CPPTransformNameManager::convertTypeSignature(pdecl.ptype),
                this.transformDefaultVal(pdecl.defaultval)
            };
        });
    }

    method transformBodyToCpp(body: BSQAssembly::BodyImplementation): CPPAssembly::BodyImplementation {
        match(body)@ {
            BSQAssembly::StandardBodyImplementation => { 
                let cppstmts = this.transformStatementListToCpp($body.statements);
                return CPPAssembly::StandardBodyImplementation{ cppstmts };
            }
            | _ => { abort; }
        }
    }

    method transformNamespaceFunctionDeclToCpp(decl: BSQAssembly::NamespaceFunctionDecl): CPPAssembly::NamespaceFunctionDecl {
        var name: CString;
        if(decl.name.value === 'main') {
            name = '__main';
        }
        else {
            name = decl.name.value;
        }

        let nskey = CPPTransformNameManager::convertNamespaceKey(decl.declaredInNS);
        let fullns = decl.fullns;
        let ikey = CPPTransformNameManager::convertInvokeKey(decl.ikey);
        let params = this.transformParameterDecl(decl.params);
        let res = CPPTransformNameManager::convertTypeSignature(decl.resultType);

        let body = this.transformBodyToCpp(decl.body);

        return CPPAssembly::NamespaceFunctionDecl{nskey, fullns, name, ikey, params, res, body};
    }   

    %*
    method transformNamespaceConstDecl(decl: BSQAssembly::NamespaceConstDecl): CPPAssembly::NamespaceConstDecl {
        abort;
    }
    *%

    function convertBsqAsmToCpp(bsqasm: BSQAssembly::Assembly): CPPAssembly::Assembly {
        let transformer = CPPTransformer{ bsqasm };            

        let transformer_nsdecls = bsqasm.allfuncs
            .filter(pred(ikey) => bsqasm.nsfuncs.has(ikey))
            .reduce<Map<CString, CPPAssembly::NamespaceDecl>>(
                Map<CString, CPPAssembly::NamespaceDecl>{},
                fn(acc, ikey) => {
                    let bsqdecl = bsqasm.nsfuncs.get(ikey);
                    let cppdecl = transformer.transformNamespaceFunctionDeclToCpp(bsqdecl);
                    return CPPTransformNameManager::getNamespaceDeclMapping(bsqdecl.fullns, acc, cppdecl.ikey, cppdecl);
                }
            );

        let transformer_allfuncs = bsqasm.allfuncs.map<CPPAssembly::FunctionDecl>(fn(ikey) => {
            let cppikey = CPPTransformNameManager::convertInvokeKey(ikey);
            if(bsqasm.nsfuncs.has(ikey)) {
                let bsqfunc = bsqasm.nsfuncs.get(ikey);
                return CPPAssembly::FunctionDecl{ CPPTransformNameManager::convertNamespaceKey(bsqfunc.declaredInNS), 
                    bsqfunc.fullns, cppikey };
            }
            else {
                abort; %% I suspect we will need to eventually support non-ns funcs
            }
        });

        return CPPAssembly::Assembly {
            nsdecls = transformer_nsdecls,
            allfuncs = transformer_allfuncs
        };
    }
}