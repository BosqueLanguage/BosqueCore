namespace CPPAssembly;

%% Bosque TypeSignatures are void, nominal, elist, and lamda (current is fine for tdd)
datatype TypeSignature using {
    %% Source info would be good
    field tkeystr: TypeKey;
}
of
VoidTypeSignature { }
| NominalTypeSignature { }
| EListTypeSignature {
    field entries: List<TypeSignature>;
}
;

concept Expression {
    field etype: TypeSignature;
}

concept Operation {
}

concept Statement {
}

entity EmptyStatement provides Statement {
}

entity BinderInfo { 
    field srcname: VarIdentifier;
    field refineonfollow: Bool;
}

datatype ITest using { 
    field isnot: Bool;
}
of
ITestType { field ttype: TypeSignature; }
| ITestNone { }
| ITestSome { }
| ITestOk { }
| ITestFail { }
;

%% For Explicitify
entity CoerceNarrowTypeExpression provides Expression {
    field exp: Expression;
    field srctype: NominalTypeSignature;
    field trgttype: NominalTypeSignature;
}

entity CoerceWidenTypeExpression provides Expression {
    field exp: Expression;
    field srctype: NominalTypeSignature;
    field trgttype: NominalTypeSignature;
}

entity SafeConvertExpression provides Expression {
    field exp: Expression;
    field srctype: NominalTypeSignature;
    field trgttype: NominalTypeSignature;
}

entity CreateDirectExpression provides Expression {
    field exp: Expression;
    field srctype: NominalTypeSignature;
    field trgttype: NominalTypeSignature;
}

datatype IfStatement provides Statement using {
    field cond: Expression;
    field trueBlock: BlockStatement;
}
of
IfSimpleStatement { }
| IfTestStatement {
    field itest: ITest;
}
| IfBinderStatement { 
    field itest: ITest;
    field binder: BinderInfo;
}
;

datatype IfElseStatement provides Statement using {
    field cond: Expression;
    field trueBlock: BlockStatement;
    field falseBlock: BlockStatement;
}
of
IfElseSimpleStatement { }
| IfElseTestStatement { 
    field itest: ITest;
}
| IfElseBinderStatement {
    field itest: ITest;
    field binder: BinderInfo;
}
;

entity IfElifElseStatement provides Statement {
    field ifcond: Expression;
    field ifflow: BlockStatement;
    field condflow: List<(|Expression, BlockStatement|)>;
    field elseflow: BlockStatement;

    invariant !$condflow.empty();
}

entity VariableInitializationStatement provides Statement {
    field name: Identifier; 
    field vtype: TypeSignature;
    field exp: Expression;
}

entity BlockStatement provides Statement {
    field statements: List<Statement>;
    field isScoping: Bool;
}

entity ReturnSingleStatement provides Statement {
    field rtype: TypeSignature;
    field value: Expression;
}

entity CallNamespaceFunctionExpression provides Expression {
    field ikey: InvokeKey;
    field ns: NamespaceKey;
    field fullns: List<CString>;

    field args: List<Expression>;
}

entity CallTypeFunctionExpression provides Expression {
    field ikey: InvokeKey;
    field ttype: NominalTypeSignature;
    field resolvedDeclType: NominalTypeSignature;

    field args: List<Expression>;
}

entity AccessVariableExpression provides Expression {
    field vname: VarIdentifier;
    field layouttype: TypeSignature;
}

entity AccessEnumExpression provides Expression {
    field stype: NominalTypeSignature;
    field name: CString;
}

entity LiteralNoneExpression provides Expression {
}

entity LiteralSimpleExpression provides Expression {
    field value: CString;
}

entity LogicActionAndExpression provides Expression {
    field args: List<Expression>;
}

entity LogicActionOrExpression provides Expression {
    field args: List<Expression>;
}

datatype UnaryExpression provides Expression using {
    field expr: Expression;
}
of
PrefixNotOpExpression { }
| PrefixNegateOpExpression { }
| PrefixPlusOpExpression { }
;

datatype IfExpression provides Expression using {
    field texp: Expression;
    field thenexp: Expression;
    field elseexp: Expression;
}
of
IfSimpleExpression { }
| IfTestExpression { 
    field itest: ITest;
}
| IfBinderExpression {
    field itest: ITest;
    field binder: BinderInfo;
}
;

entity AssertStatement provides Statement {
    field cond: Expression;
}

datatype BinaryArithExpression provides Expression using {
    field lhs: Expression;
    field rhs: Expression;
}
of
BinAddExpression { }
| BinSubExpression { }
| BinDivExpression { }
| BinMultExpression { }
;

datatype BinaryKeyEqExpression provides Expression using {
    field opertype: TypeSignature;
}
of
BinKeyEqNoneExpression { 
    field exp: Expression;
}
| BinKeyNotEqNoneExpression { 
    field exp: Expression;
}
| BinKeySomeEqExpression {
    field eqoption: Expression;
    field eqval: Expression;
}
| BinKeyNotSomeEqExpression {
    field eqoption: Expression;
    field eqval: Expression;
}
| BinKeyEqExpression {
    field lhs: Expression;
    field rhs: Expression;
}
| BinKeyNotEqExpression {
    field lhs: Expression;
    field rhs: Expression;
}
;

datatype BinaryNumericExpression provides Expression using {
    field lhs: Expression;
    field rhs: Expression;
}
of
NumericEqExpression { }
| NumericNeqExpression { }
| NumericLessExpression { }
| NumericLessEqExpression { }
| NumericGreaterExpression { }
| NumericGreaterEqExpression { }
;

datatype BinLogicExpression provides Expression using {
    field lhs: Expression;
    field rhs: Expression;
}
of
BinLogicAndExpression { }
| BinLogicOrExpression { }
| BinLogicImpliesExpression { }
| BinLogicIFFExpression { }
;

concept ConstructorExpression provides Expression {
}

concept ConstructorPrimaryExpression provides ConstructorExpression {
    field ctype: NominalTypeSignature;
}

entity ConstructorStdExpression provides ConstructorPrimaryExpression {
    field fullns: List<CString>;

    field args: List<Expression>;
}

entity ConstructorEListExpression provides ConstructorExpression {
    field args: List<Expression>;
}

datatype ConstructorPrimarySpecialConstructableExpression provides ConstructorPrimaryExpression using {
    field value: Expression;
}
of
ConstructorPrimarySpecialSomeExpression {
    field ofttype: TypeSignature;
}
| ConstructorPrimarySpecialOkExpression { %% TODO: Not Implemented
    field ofttype: TypeSignature;
    field ofetype: TypeSignature;
}
| ConstructorPrimarySpecialFailExpression { %% TODO: Not Implemented
    field ofttype: TypeSignature;
    field ofetype: TypeSignature;
}
;

datatype PostfixOperation using {
    field baseType: TypeSignature;
}
of
PostfixAccessFromName {
    field name: Identifier;
    field declaredInType: NominalTypeSignature;
    field ftype: TypeSignature;
}
| PostfixAccessFromIndex {
    field idx: CString;
}
| PostfixIsTest {
    field ttest: ITest;
}
| PostfixAsConvert {
    field ttest: ITest;
}
| PostfixInvokeStatic { 
    field resolvedType: NominalTypeSignature;
    field resolvedTrgt: InvokeKey;
    field args: List<Expression>;
}
| PostfixBoolConstant {
    field value: Bool;
}
| PostfixAccessSomeValue {
}
;

entity PostfixOp provides Expression {
    field rootExp: Expression;
    field ops: List<PostfixOperation>;
}

datatype BodyImplementation 
of
AbstractBodyImplementation { } %% N/A
| PredicateUFBodyImplementation { } %% N/A
| BuiltinBodyImplementation { field builtin: CString; }
| SynthesisBodyImplementation { } %% N/A
| ExpressionBodyImplementation { field exp: Expression; } %% N/A
| StandardBodyImplementation { field statements: List<Statement>; } %% Is Available :)
;