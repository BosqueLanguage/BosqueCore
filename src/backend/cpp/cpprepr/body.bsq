namespace CPPAssembly;

%% Bosque TypeSignatures are void, nominal, elist, and lamda (current is fine for tdd)
datatype TypeSignature using {
    %% Source info would be good
    field tkeystr: TypeKey;
}
of
VoidTypeSignature { }
| NominalTypeSignature { }
;

concept Expression {
    field etype: TypeSignature;
}

concept Operation {
}

concept Statement {
}

entity IfStatement provides Statement {
    field cond: Expression;
    field trueBlock: BlockStatement;
}

entity IfElseStatement provides Statement {
    field cond: Expression;
    field trueBlock: BlockStatement;
    field falseBlock: BlockStatement;
}

entity IfElifElseStatement provides Statement {
    field ifcond: Expression;
    field ifflow: BlockStatement;
    field condflow: List<(|Expression, BlockStatement|)>;
    field elseflow: BlockStatement;

    invariant !$condflow.empty();
}

entity VariableInitializationStatement provides Statement {
    field name: Identifier; 
    field vtype: TypeSignature;
    field exp: Expression;
}

entity BlockStatement provides Statement {
    field statements: List<Statement>;
    field isScoping: Bool;
}

entity ReturnSingleStatement provides Statement {
    field rtype: TypeSignature;
    field value: Expression;
}

entity AccessVariableExpression provides Expression {
    field vname: VarIdentifier;
    field layouttype: TypeSignature;
}

entity LiteralSimpleExpression provides Expression {
    field value: CString;
}

entity LogicActionAndExpression provides Expression {
    field args: List<Expression>;
}

entity LogicActionOrExpression provides Expression {
    field args: List<Expression>;
}

datatype UnaryExpression provides Expression using {
    field expr: Expression;
}
of
PrefixNotOpExpression { }
| PrefixNegateOpExpression { }
| PrefixPlusOpExpression { }
;

datatype BinaryArithExpression provides Expression using {
    field lhs: Expression;
    field rhs: Expression;
}
of
BinAddExpression { }
| BinSubExpression { }
| BinDivExpression { }
| BinMultExpression { }
;

datatype BinaryNumericExpression provides Expression using {
    field lhs: Expression;
    field rhs: Expression;
}
of
NumericEqExpression { }
| NumericNeqExpression { }
| NumericLessExpression { }
| NumericLessEqExpression { }
| NumericGreaterExpression { }
| NumericGreaterEqExpression { }
;

datatype BinLogicExpression provides Expression using {
    field lhs: Expression;
    field rhs: Expression;
}
of
BinLogicAndExpression { }
| BinLogicOrExpression { }
| BinLogicImpliesExpression { }
| BinLogicIFFExpression { }
;

datatype BodyImplementation 
of
AbstractBodyImplementation { } %% N/A
| PredicateUFBodyImplementation { } %% N/A
| BuiltinBodyImplementation { field builtin: CString; } %% N/A
| SynthesisBodyImplementation { } %% N/A
| ExpressionBodyImplementation { field exp: Expression; } %% N/A
| StandardBodyImplementation { field statements: List<Statement>; } %% Is Available :)
;