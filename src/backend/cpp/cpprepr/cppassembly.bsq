declare namespace CPPAssembly;

%% Most map well from Bosque/SMT emit

entity SourceInfo {
    field line: Nat;
    field column: Nat;
}

const namespaceComponentRE: CRegex = /[A-Z][_a-zA-Z0-9]+/c;
const namespaceKeyRE: CRegex = /(${CPPAssembly::namespaceComponentRE}'::')*${CPPAssembly::namespaceComponentRE}/c;
type NamespaceComponentKey = CString of CPPAssembly::namespaceComponentRE;
type NamespaceKey = CString of CPPAssembly::namespaceKeyRE; %%Core is implicit here

%% NOTE: The RE in basic nominal... allows for '::' to be detected. this is because we overload primitives and need access
%% to matching our __CoreCpp namespace
const basicNominalTypeKeyRE: CRegex = /(${CPPAssembly::namespaceKeyRE}'::')?[_a-zA-Z0-9'::']+('<'.+'>')?/c;
const nominalTypeKeyRE: CRegex = /(${CPPAssembly::basicNominalTypeKeyRE})/c; %% Will need to handle special scoped type key?

const typeKeyRE: CRegex = /${CPPAssembly::nominalTypeKeyRE}/c;
type TypeKey = CString of CPPAssembly::typeKeyRE;

const invokeKeyRE: CRegex = /(${CPPAssembly::namespaceKeyRE}|${CPPAssembly::nominalTypeKeyRE})'::'[_a-z][_a-zA-Z0-9$]+/c;
type InvokeKey = CString of CPPAssembly::invokeKeyRE;

const identifierRE: CRegex = /[_a-z][_a-zA-Z0-9$]*/c; %%we allow & inside these identifiers so we can make special names
const videntifierRE: CRegex = /'$'?[_a-z][_a-zA-Z0-9$]*/c; %%we allow & inside these identifiers so we can make special names
type Identifier = CString of CPPAssembly::identifierRE;
type VarIdentifier = CString of CPPAssembly::videntifierRE;

%* 
entity NamespaceConstDecl provides AbstractCoreDecl {
    field declaredType: TypeSignature;
    field value: Expression;
}
*%

%% May want to change this as it doesnt map super well to bsqir (but maps nice to how smtemit)
entity NamespaceFunctionDecl {
    field ns: NamespaceKey;
    field name: CString;
    field invokeKey: InvokeKey;

    %% Will be List<InvokeParameterDecl> or something
    field params: None; %% TODO: Parameters not implemented

    field resultType: TypeSignature;

    field body: BodyImplementation;
}

%% Will need expanding
entity Assembly {
    field nsfuncs: Map<NamespaceKey, Map<InvokeKey, NamespaceFunctionDecl>>;
    field allfuncs: List<InvokeKey>;
}