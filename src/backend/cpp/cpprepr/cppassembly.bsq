declare namespace CPPAssembly;

%% Most map well from Bosque/SMT emit

const namespaceComponentRE: CRegex = /[A-Z][_a-zA-Z0-9]+/c;
const namespaceKeyRE: CRegex = /(${CPPAssembly::namespaceComponentRE}'::')*${CPPAssembly::namespaceComponentRE}/c;
type NamespaceComponentKey = CString of CPPAssembly::namespaceComponentRE;
type NamespaceKey = CString of CPPAssembly::namespaceKeyRE; %%Core is implicit here

%% NOTE: The RE in basic nominal... allows for '::' to be detected. this is because we overload primitives and need access
%% to matching our __CoreCpp namespace
const basicNominalTypeKeyRE: CRegex = /(${CPPAssembly::namespaceKeyRE}'::')?[_a-zA-Z0-9'::']+('<'.+'>')?/c;
const nominalTypeKeyRE: CRegex = /(${CPPAssembly::basicNominalTypeKeyRE})/c; %% Will need to handle special scoped type key?
const elistTypeKeyRE: CRegex = /'(|'.*'|)'/c;

const typeKeyRE: CRegex = /${CPPAssembly::nominalTypeKeyRE}|${CPPAssembly::elistTypeKeyRE}/c;
type TypeKey = CString of CPPAssembly::typeKeyRE;

%% Optional '<' * '>' allows support for resolved templates on functions or methods
const invokeKeyRE: CRegex = /(${CPPAssembly::namespaceKeyRE}|${CPPAssembly::nominalTypeKeyRE})'::'[_a-z][_a-zA-Z0-9$]*('<'.+'>')?/c;
type InvokeKey = CString of CPPAssembly::invokeKeyRE;

const identifierRE: CRegex = /[_a-z][_a-zA-Z0-9$]*/c; %%we allow & inside these identifiers so we can make special names
const videntifierRE: CRegex = /'$'?[_a-z][_a-zA-Z0-9$]*/c; %%we allow & inside these identifiers so we can make special names
type Identifier = CString of CPPAssembly::identifierRE;
type VarIdentifier = CString of CPPAssembly::videntifierRE;

const templateMatch: Regex = /("<".+">")/;
type TemplateMatch = String of templateMatch;

concept AbstractDecl {
    field declaredInNS: NamespaceKey;
    field fullns: List<CString>;
}

concept AbstractCoreDecl provides AbstractDecl {
    field name: Identifier;
}

entity MemberFieldDecl provides AbstractCoreDecl {
    field declaredInType: NominalTypeSignature; %% What entity is this field in?
    
    field declaredType: TypeSignature;
    field defaultval: Option<Expression>;
}

entity SaturatedFieldInfo {
    field declaredInType: NominalTypeSignature;
    field fname: Identifier;
    field ftype: TypeSignature;
    field hasdefault: Bool;
}

concept AbstractNominalTypeDecl provides AbstractDecl {
    field tkey: TypeKey;
    field name: CString;

    field staticmethods: List<InvokeKey>;
    field virtmethods: List<InvokeKey>;
    field absmethods: List<InvokeKey>;
    field overmethods: List<InvokeKey>;
    
    field saturatedProvides: List<NominalTypeSignature>;
    field saturatedBFieldInfo: List<SaturatedFieldInfo>;
    
    %% invariants, validates, as well
}

concept AbstractInvokeDecl provides AbstractDecl {
    field name: CString;
    field ikey: InvokeKey;
    field params: List<ParameterDecl>;
    field resultType: TypeSignature;
    field body: BodyImplementation;
}

concept AbstractEntityTypeDecl provides AbstractNominalTypeDecl {
}

entity EntityTypeDecl provides AbstractEntityTypeDecl{
    field fields: List<MemberFieldDecl>;
}

datatype ConstructableTypeDecl provides AbstractEntityTypeDecl
of
SomeTypeDecl { field oftype: TypeSignature; }
| MapEntryTypeDecl { field ktype: NominalTypeSignature; field vtype: TypeSignature; }
; %% TODO: Other ConstructableTypeDecls!

entity PrimitiveEntityTypeDecl provides AbstractEntityTypeDecl {
}

entity EnumTypeDecl provides AbstractEntityTypeDecl {
    field members: List<CString>;
}

entity DatatypeMemberEntityTypeDecl provides AbstractEntityTypeDecl {
    field fields: List<MemberFieldDecl>;
    field parentTypeDecl: NominalTypeSignature;
}

concept AbstractConceptTypeDecl provides AbstractNominalTypeDecl {
    field subtypes: List<TypeKey>;
}

entity ConceptTypeDecl provides AbstractConceptTypeDecl {
    field fields: List<MemberFieldDecl>;
}

datatype PrimitiveConceptTypeDecl provides AbstractConceptTypeDecl 
of
OptionTypeDecl { 
    field oftype: TypeSignature; 
    field someType: TypeSignature;
}
| ResultTypeDecl { %% TODO: Not implemented!
    field ttype: TypeSignature; 
    field etype: TypeSignature;

    field okType: TypeSignature;
    field failType: TypeSignature;
}
| APIResultTypeDecl { %% TODO: Not Implemented!
    field ttype: TypeSignature;

    field errorType: TypeSignature;
    field failedType: TypeSignature;
    field rejectedType: TypeSignature;
    field successType: TypeSignature;
}
;

entity DatatypeTypeDecl provides AbstractConceptTypeDecl {
    field fields: List<MemberFieldDecl>;
    field associatedMemberEntityDecls: List<NominalTypeSignature>;
}

enum Tag {
    Value,
    Ref,
    Tagged
}

%% Info for the GC 
entity TypeInfo {
    field id: Nat;
    field typesize: Nat;
    field slotsize: Nat;
    field ptrmask: CString;
    field typekey: TypeKey;
    field tag: Tag;
}

datatype MethodDecl provides AbstractInvokeDecl using {
}
of
MethodDeclStatic { }
| MethodDeclAbstract {}
| MethodDeclVirtual {}
| MethodDeclOverride {}
;

entity ParameterDecl {
    field pname: Identifier;
    field ptype: TypeSignature;
    field defaultval: Option<Expression>;

    %% TODO: Support ref/rest param
}

entity NamespaceFunctionDecl provides AbstractInvokeDecl {
}

entity TypeFunctionDecl provides AbstractInvokeDecl {
    field completens: List<CString>;
    field completeikey: InvokeKey;
}

%% This is not actively being used but MAY prove some use as the emitter expands so ill leave it 
entity FunctionDecl provides AbstractDecl {
    field ikey: InvokeKey;
}

entity NamespaceDecl {
    field nsname: CString;

    %% Will need other stuff like nsconsts, enums, typedecls, etc...

    field subns: Map<CString, NamespaceDecl>;

    field nsfuncs: List<InvokeKey>;
    field typefuncs: List<InvokeKey>;

    field constructables: List<TypeKey>;

    field entities: List<TypeKey>;
    field datamembers: List<TypeKey>;

    field datatypes: List<TypeKey>;

    field pconcepts: List<TypeKey>;

    field staticmethods: List<(|InvokeKey, TypeKey|)>; %% Tuple is convient for fwd decls here
    field virtmethods: List<(|InvokeKey, TypeKey|)>;
    field absmethods: List<(|InvokeKey, TypeKey|)>;
    field overmethods: List<(|InvokeKey, TypeKey|)>; 

    field enums: List<TypeKey>;

    field alltypes: List<TypeKey>; %%Very useful in emission
}

%% Will need expanding
entity Assembly {
    field nsdecls: Map<CString, NamespaceDecl>; %% Toplevel decls, traverse to find lower level decls
    field allfuncs: List<FunctionDecl>;
    
    field nsfuncs: Map<InvokeKey, NamespaceFunctionDecl>;  
    field typefuncs: Map<InvokeKey, TypeFunctionDecl>;

    field staticmethods: Map<InvokeKey, MethodDeclStatic>;
    field virtmethods: Map<InvokeKey, MethodDeclVirtual>;
    field absmethods: Map<InvokeKey, MethodDeclAbstract>;
    field overmethods: Map<InvokeKey, MethodDeclOverride>;

    field enums: Map<TypeKey, EnumTypeDecl>;

    field primitives: Map<TypeKey, PrimitiveEntityTypeDecl>;
    field constructables: Map<TypeKey, ConstructableTypeDecl>;

    field entities: Map<TypeKey, EntityTypeDecl>;
    field datamembers: Map<TypeKey, DatatypeMemberEntityTypeDecl>;

    field datatypes: Map<TypeKey, DatatypeTypeDecl>;

    field pconcepts: Map<TypeKey, PrimitiveConceptTypeDecl>; %% Note: Currently only supports option
    field concepts: Map<TypeKey, ConceptTypeDecl>; %% We dont emit these but need to look them up

    field allmethods: List<InvokeKey>;
    field typeinfos: Map<TypeKey, TypeInfo>;

    %%field elists: Map<TypeKey, ConstructorEListExpression>;

    method lookupNominalTypeDeclaration(tkey: TypeKey): AbstractNominalTypeDecl {
        if(this.entities.has(tkey)) {
            return this.entities.get(tkey);
        }
        elif(this.primitives.has(tkey)) {
            return this.primitives.get(tkey);
        }
        elif(this.datamembers.has(tkey)) {
            return this.datamembers.get(tkey);
        }
        elif(this.datatypes.has(tkey)) {
            return this.datatypes.get(tkey);
        }
        elif(this.pconcepts.has(tkey)) {
            return this.pconcepts.get(tkey);
        }
        elif(this.constructables.has(tkey)) {
            return this.constructables.get(tkey);
        }
        elif(this.enums.has(tkey)) {
            return this.enums.get(tkey);
        }
        elif(this.concepts.has(tkey)) {
            return this.concepts.get(tkey);
        }
        else {
            abort; %% Non suported typekey!
        }
    }

    method tryLookupInvokeImplDeclaration(ikey: InvokeKey): Option<AbstractInvokeDecl> {
        if(this.nsfuncs.has(ikey)) {
            return some(this.nsfuncs.get(ikey));
        }
        elif(this.typefuncs.has(ikey)) {
            return some(this.typefuncs.get(ikey));
        }
        elif(this.virtmethods.has(ikey)) {
            return some(this.virtmethods.get(ikey));
        }
        elif(this.overmethods.has(ikey)) {
            return some(this.overmethods.get(ikey));
        }
        elif(this.staticmethods.has(ikey)) {
            return some(this.staticmethods.get(ikey));
        }
        elif(this.absmethods.has(ikey)) {
            return some(this.staticmethods.get(ikey));
        }
        else {
            return none;
        }
    }

    method isNominalTypeConcrete(tkey: TypeKey): Bool {
        return this.lookupNominalTypeDeclaration(tkey)?<AbstractEntityTypeDecl>;
    }

    method isPrimtitiveType(tkey: TypeKey): Bool {
        return this.primitives.has(tkey);
    }

    method areTypesSame(t1: TypeSignature, t2: TypeSignature): Bool {
        return t1.tkeystr.value === t2.tkeystr.value;
    }

    method isSubtypeOf(t1: TypeSignature, t2: TypeSignature): Bool {
        if(t1.tkeystr === t2.tkeystr) {
            return true;
        }
        else {
            if(t1?!<NominalTypeSignature> || t2?!<NominalTypeSignature>) {
                return false;
            }
            else {
                if(t1.tkeystr === 'None'<TypeKey>) {
                    let tt2 = this.lookupNominalTypeDeclaration(t2.tkeystr);
                    return tt2?<OptionTypeDecl>;
                }
                else {
                    let tt1 = this.lookupNominalTypeDeclaration(t1.tkeystr);
                    return tt1.saturatedProvides.someOf(pred(st) => st.tkeystr === t2.tkeystr);
                }
            }
        }
    }
}