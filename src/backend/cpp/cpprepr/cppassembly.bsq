declare namespace CPPAssembly;

%% Most map well from Bosque/SMT emit

const namespaceComponentRE: CRegex = /[A-Z][_a-zA-Z0-9]+/c;
const namespaceKeyRE: CRegex = /(${CPPAssembly::namespaceComponentRE}'::')*${CPPAssembly::namespaceComponentRE}/c;
type NamespaceComponentKey = CString of CPPAssembly::namespaceComponentRE;
type NamespaceKey = CString of CPPAssembly::namespaceKeyRE; %%Core is implicit here

%% NOTE: The RE in basic nominal... allows for '::' to be detected. this is because we overload primitives and need access
%% to matching our __CoreCpp namespace
const basicNominalTypeKeyRE: CRegex = /(${CPPAssembly::namespaceKeyRE}'::')?[_a-zA-Z0-9'::']+('<'.+'>')?/c;
const nominalTypeKeyRE: CRegex = /(${CPPAssembly::basicNominalTypeKeyRE})/c; %% Will need to handle special scoped type key?

const typeKeyRE: CRegex = /${CPPAssembly::nominalTypeKeyRE}/c;
type TypeKey = CString of CPPAssembly::typeKeyRE;

const invokeKeyRE: CRegex = /(${CPPAssembly::namespaceKeyRE}|${CPPAssembly::nominalTypeKeyRE})'::'[_a-z][_a-zA-Z0-9$]+/c;
type InvokeKey = CString of CPPAssembly::invokeKeyRE;

const identifierRE: CRegex = /[_a-z][_a-zA-Z0-9$]*/c; %%we allow & inside these identifiers so we can make special names
const videntifierRE: CRegex = /'$'?[_a-z][_a-zA-Z0-9$]*/c; %%we allow & inside these identifiers so we can make special names
type Identifier = CString of CPPAssembly::identifierRE;
type VarIdentifier = CString of CPPAssembly::videntifierRE;

concept AbstractDecl {
    field declaredInNS: NamespaceKey;
    field fullns: List<CString>;
}

concept AbstractCoreDecl provides AbstractDecl {
    field name: Identifier;
}

entity MemberFieldDecl provides AbstractCoreDecl {
    field declaredInType: NominalTypeSignature; %% What entity is this field in?
    
    field declaredType: TypeSignature;
    field defaultval: Option<Expression>;
}

concept AbstractNominalTypeDecl provides AbstractDecl {
    field tkey: TypeKey;
 
    %% invariants, validates, methods, saturated, as well
}

concept AbstractInvokeDecl provides AbstractDecl {
    field name: CString;
    field ikey: InvokeKey;
    field params: List<ParameterDecl>;
    field resultType: TypeSignature;
    field body: BodyImplementation;
}

concept AbstractEntityTypeDecl provides AbstractNominalTypeDecl {
}

entity EntityTypeDecl provides AbstractEntityTypeDecl{
    field fields: List<MemberFieldDecl>;
    field staticmethods: List<InvokeKey>;
    %% Other method types too
}

%% Info for the GC 
entity TypeInfo {
    field id: Nat;
    field typesize: Nat;
    field slotsize: Nat;
    field ptrmask: CString;
    field typekey: TypeKey;
}

datatype MethodDecl provides AbstractInvokeDecl using {
    %% Not quite sure what this does
    %% field isThisRef: Bool;
}
of
MethodDeclStatic { }
| MethodDeclAbstract {}
| MethodDeclVirtual {}
| MethodDeclOverride {}
;

entity ParameterDecl {
    field pname: Identifier;
    field ptype: TypeSignature;
    field defaultval: Option<Expression>;

    %% TODO: Support ref/rest param
}

%% May want to change this as it doesnt map super well to bsqir (but maps nice to how smtemit)
entity NamespaceFunctionDecl provides AbstractInvokeDecl {
}

%% This is not actively being used but MAY prove some use as the emitter expands so ill leave it 
entity FunctionDecl provides AbstractDecl {
    field ikey: InvokeKey;
}

entity NamespaceDecl {
    field nsname: CString;

    %% Will need other stuff like nsconsts, enums, typedecls, etc...

    field subns: Map<CString, NamespaceDecl>;
    field entities: Map<TypeKey, EntityTypeDecl>; %% Will have to do forward decls too
    field nsfuncs: Map<InvokeKey, NamespaceFunctionDecl>;
    field staticmethods: List<(|InvokeKey, TypeKey|)>; %% Convienent for fwd decls
}

%% Will need expanding
entity Assembly {
    field nsdecls: Map<CString, NamespaceDecl>; %% Toplevel decls, traverse to find lower level decls
    field allfuncs: List<FunctionDecl>;

    %% We will need to put static, abstract, override, virtual methods here then in NamespaceDecl
    %% we just have a List<InvokeKey>, allows for very easy lookups and ns resolution 
    %% (this helps us get the parameter list for constructors and stuff)
    field staticmethods: Map<InvokeKey, MethodDeclStatic>;

    field allmethods: List<InvokeKey>;
    field typeinfos: Map<TypeKey, TypeInfo>;
}