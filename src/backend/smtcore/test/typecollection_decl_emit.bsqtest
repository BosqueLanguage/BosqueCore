namespace SMTEmitter;

const s_listdecl1: ListTypeDecl = ListTypeDecl{
    'List$Int$'<TypeKey>,
    TypeKind#Simple,
    'Int'<TypeKey>
};

const s_listdecl2: ListTypeDecl = ListTypeDecl{
    'List$Foo$'<TypeKey>,
    TypeKind#Inductive,
    'Foo'<TypeKey>
};

const s_mapdecl1: MapTypeDecl = MapTypeDecl{
    'Map$Int-Bool$'<TypeKey>,
    TypeKind#Simple,
    'MapEntry$Int-Bool$'<TypeKey>
};

chktest test_emitCollectionTypeDecls_list1(): Bool {
    let sdecls, idecls, cons = emitCollectionTypeDecls(List<CollectionTypeDecl>{s_listdecl1});

    return /\(
        sdecls === '(declare-datatype List$Int$ ( (List$Int$-mk (List$Int$-value (Seq Int))) ))',
        idecls.empty(),
        cons.empty()
    );
}


chktest test_emitCollectionTypeDecls_list2(): Bool {
    let sdecls, idecls, cons = emitCollectionTypeDecls(List<CollectionTypeDecl>{s_listdecl2});

    return /\(
        sdecls.empty(),  
        idecls === '    (List$Foo$ 0)',
        cons === '        (List$Foo$-mk (List$Foo$-value (Seq Foo)))'
    );
}

chktest test_emitCollectionTypeDecls_map(): Bool {
    let sdecls, idecls, cons = emitCollectionTypeDecls(List<CollectionTypeDecl>{s_mapdecl1});

    return /\(
        sdecls === '(declare-datatype Map$Int-Bool$ ( (Map$Int-Bool$-mk (Map$Int-Bool$-value (Seq MapEntry$Int-Bool$))) ))',
        idecls.empty(),
        cons.empty()
    );
}
