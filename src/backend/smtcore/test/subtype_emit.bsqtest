namespace SMTEmitter;

const s_optionint1: OptionTypeDecl = OptionTypeDecl{
    'Option$Int$'<TypeKey>,
    'Some$Int$'<TypeKey>
};

const s_resultintbool1: ResultTypeDecl = ResultTypeDecl{
    'Result$Int-Bool$'<TypeKey>,
    'Result$Int-Bool$@Ok'<TypeKey>,
    'Result$Int-Bool$@Fail'<TypeKey>
};

const s_concept_empty1: ConceptTypeDecl = ConceptTypeDecl{
    'Concept$Foo$'<TypeKey>,
    List<TypeKey>{}
};

const s_concept_single1: ConceptTypeDecl = ConceptTypeDecl{
    'Concept$Foo$'<TypeKey>,
    List<TypeKey>{'Bar'<TypeKey>}
};

const s_concept_multi1: ConceptTypeDecl = ConceptTypeDecl{
    'Concept$Foo$'<TypeKey>,
    List<TypeKey>{'Bar'<TypeKey>, 'Baz'<TypeKey>}
};

const s_datatype_multi1: DatatypeTypeDecl = DatatypeTypeDecl{
    'Datatype$Foo$'<TypeKey>,
    List<TypeKey>{'Bar'<TypeKey>, 'Baz'<TypeKey>}
};

chktest test_emitSomeSubtypes(): Bool {
    let chks = emitPrimitiveConceptSubtypeChecks(List<PrimitiveConceptTypeDecl>{SMTEmitter::s_optionint1});

    return chks === '(define-fun @SubtypeOf-Option$Int$((tt @Term)) Bool (or ((_ is Some$Int$) tt) (= tt @Term-mk-None)))';
}

chktest test_emitConceptSubtypes_empty(): Bool {
    let chks = emitConceptSubtypeChecks(List<ConceptTypeDecl>{SMTEmitter::s_concept_empty1});

    return chks === '(define-fun @SubtypeOf-Concept$Foo$((tt @Term)) Bool false)';
}

chktest test_emitConceptSubtypes_single(): Bool {
    let chks = emitConceptSubtypeChecks(List<ConceptTypeDecl>{SMTEmitter::s_concept_single1});

    return chks === '(define-fun @SubtypeOf-Concept$Foo$((tt @Term)) Bool ((_ is Bar) tt))';
}

chktest test_emitConceptSubtypes_multi(): Bool {
    let chks = emitConceptSubtypeChecks(List<ConceptTypeDecl>{SMTEmitter::s_concept_multi1});

    return chks === '(define-fun @SubtypeOf-Concept$Foo$((tt @Term)) Bool (or ((_ is Bar) tt) ((_ is Baz) tt)))';
}

chktest test_emitDatatypeSubtypes_multi(): Bool {
    let chks = emitDatatypeSubtypeChecks(List<DatatypeTypeDecl>{SMTEmitter::s_datatype_multi1});

    return chks === '(define-fun @SubtypeOf-Datatype$Foo$((tt @Term)) Bool (or ((_ is Bar) tt) ((_ is Baz) tt)))';
}

chktest test_emitResultSubtypes(): Bool {
    let chks = emitPrimitiveConceptSubtypeChecks(List<PrimitiveConceptTypeDecl>{SMTEmitter::s_resultintbool1});

    return chks === '(define-fun @SubtypeOf-Result$Int-Bool$((tt @Term)) Bool (or ((_ is Result$Int-Bool$@Ok) tt) ((_ is Result$Int-Bool$@Fail) tt)))';
}

chktest test_emitAllSubtypes(): Bool {
    let chks = emitAllSubtypeChecks(
        List<PrimitiveConceptTypeDecl>{SMTEmitter::s_optionint1},
        List<ConceptTypeDecl>{SMTEmitter::s_concept_single1},
        List<DatatypeTypeDecl>{},
    );

    return chks === '(define-fun @SubtypeOf-Option$Int$((tt @Term)) Bool (or ((_ is Some$Int$) tt) (= tt @Term-mk-None)))%n;(define-fun @SubtypeOf-Concept$Foo$((tt @Term)) Bool ((_ is Bar) tt))';
}
