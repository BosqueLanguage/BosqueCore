namespace SMTEmitter;

const s_eev_flow_emit: SMTEmitterEnv = SMTEmitterEnv{DirectResult{'Int'<TypeKey>}, '[NO_TRGT]'};

chktest test_emitIfOperation_inline(): Bool {
    let vthen = ReturnValueOperation{AccessVariableValue{'x'}};
    let velse = ReturnValueOperation{AccessVariableValue{'y'}};
    let ifval = IfOperation{AccessVariableValue{'b'}, vthen, velse};

    return emitIfOperation(ifval, SMTEmitter::s_eev_flow_emit, none) === '(ite b x y)';
}

chktest test_emitIfOperation_indent(): Bool {
    let vbody = ReturnValueOperation{BinAddValue{AccessVariableValue{'x'}, AccessVariableValue{'y'}}};
    let innerlet = LetOperation{'y', LiteralSimpleValue{'Int'<TypeKey>, '2i'}, vbody};

    let tval = BinKeyEqValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Int'<TypeKey>, '1i'}};
    let outerif = IfOperation{tval, ReturnValueOperation{AccessVariableValue{'x'}}, innerlet};

    let expected = '(ite (= x 1)
                   \    x
                   \    (let ((y 2))
                   \        (+ x y)
                   \    )
                   \)';

    return emitIfOperation(outerif, SMTEmitter::s_eev_flow_emit, some('')) === expected;
}
