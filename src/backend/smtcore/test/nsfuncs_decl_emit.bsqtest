namespace SMTEmitter;

const s_nsfp1: NamespacePredicateFunctionDecl = NamespacePredicateFunctionDecl{
    'Main'<NamespaceKey>, 
    'fp1', 
    List<InvokeParameterDecl>{
        InvokeParameterDecl{'x', 'Int'<ParamTypeKey>},
    }
};

const s_nsbi1: NamespaceBuiltinFunctionDecl = NamespaceBuiltinFunctionDecl{
    'Core@CStringOps'<NamespaceKey>, 
    's_empty', 
    List<InvokeParameterDecl>{
        InvokeParameterDecl{'s', 'CString'<ParamTypeKey>},
    }, 
    DirectResult{'Bool'<TypeKey>}, 
    'cstring_empty'
};

const s_nsff1: NamespaceFunctionDecl = NamespaceFunctionDecl{
    'Main'<NamespaceKey>, 
    'f1', 
    List<InvokeParameterDecl>{
        InvokeParameterDecl{'x', 'Int'<ParamTypeKey>},
    }, 
    DirectResult{'Int'<TypeKey>}, 
    ReturnValueOperation{BinAddValue{LiteralSimpleValue{'Int'<TypeKey>, '3i'}, LiteralSimpleValue{'Int'<TypeKey>, '1i'}}}
};

const s_nsff2: NamespaceFunctionDecl = NamespaceFunctionDecl{
    'Main'<NamespaceKey>, 
    'f1', 
    List<InvokeParameterDecl>{
        InvokeParameterDecl{'x', 'Int'<ParamTypeKey>},
    }, 
    OptionResult{'Int'<TypeKey>}, 
    ReturnValueOperation{BinAddValue{LiteralSimpleValue{'Int'<TypeKey>, '2i'}, LiteralSimpleValue{'Int'<TypeKey>, '3i'}}}
};

chktest test_emitNamespacePredicateFunctionDecl(): Bool {
    let fpdecl = emitNamespacePredicateFunctionDecl(SMTEmitter::s_nsfp1);
    return fpdecl === '(declare-fun Main@fp1 ((x Int)) Bool)';
}

chktest test_emitNamespaceBuiltinFunctionDecl(): Bool {
    let fpdecl = emitNamespaceBuiltinFunctionDecl(SMTEmitter::s_nsbi1, '[NO_TRGT]');
    return fpdecl === '(define-fun Core@CStringOps@s_empty ((s CString)) Bool (= s ""))';
}

chktest test_emitNamespaceFunctionDecl(): Bool {
    let fpdecl = emitNamespaceFunctionDecl(SMTEmitter::s_nsff1, '[NO_TRGT]');
    return fpdecl === '(define-fun Main@f1 ((x Int)) Int
                      \    (+ 3 1)
                      \)';
}

chktest test_emitNamespaceFunctionDecl_OptionResult(): Bool {
    let fpdecl = emitNamespaceFunctionDecl(SMTEmitter::s_nsff2, '[NO_TRGT]');
    return fpdecl === '(define-fun Main@f1 ((x Int)) (@Result Int)
                      \    (@Result-ok (+ 2 3))
                      \)';
}
