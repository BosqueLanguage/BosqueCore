namespace SMTEmitter;

chktest test_emitLogicActionAndValue(): Bool {
    let op = LogicActionAndValue{List<Value>{AccessVariableValue{'v'}, UnwrapTypeDeclToPrimitiveValue{'Main@Foo'<TypeKey>, AccessVariableValue{'cc'}}}};
    return emitLogicActionAndValue(op) === '(and v (Main@Foo-value cc))';
}

chktest test_emitLogicActionOrValue(): Bool {
    let op = LogicActionOrValue{List<Value>{AccessVariableValue{'v'}, UnwrapTypeDeclToPrimitiveValue{'Main@Foo'<TypeKey>, AccessVariableValue{'cc'}}}};
    return emitLogicActionOrValue(op) === '(or v (Main@Foo-value cc))';
}

chktest test_emitIsNoneTestValue(): Bool {
    let op = IsNoneTestValue{AccessVariableValue{'cc'}};
    return emitIsNoneTestValue(op) === '(= cc @Term-mk-None)';
}

chktest test_emitIsSomeTestValue(): Bool {
    let op = IsSomeTestValue{AccessVariableValue{'cc'}};
    return emitIsSomeTestValue(op) === '(not (= cc @Term-mk-None))';
}

chktest test_emitIsTypeTestValue(): Bool {
    let op = IsTypeTestValue{'Main@Foo'<TypeKey>, AccessVariableValue{'cc'}};
    return emitIsTypeTestValue(op) === '((_ is @Term-Main@Foo-mk) cc)';
}

chktest test_emitIsSubtypeTestValue(): Bool {
    let op = IsSubtypeTestValue{'Main@Foo'<TypeKey>, AccessVariableValue{'cc'}};
    return emitIsSubtypeTestValue(op) === '(@SubtypeOf-Main@Foo cc)';
}

chktest test_emitPrefixNotOpValue(): Bool {
    let op = PrefixNotOpValue{AccessVariableValue{'cc'}};
    return emitUnaryValue(op) === '(not cc)';
}

chktest test_emitPrefixNegateOpValue(): Bool {
    let op = PrefixNegateOpValue{AccessVariableValue{'cc'}};
    return emitUnaryValue(op) === '(- cc)';
}

chktest test_emitPrefixPlusOpValue(): Bool {
    let op = PrefixPlusOpValue{AccessVariableValue{'cc'}};
    return emitUnaryValue(op) === 'cc';
}

chktest test_BinAddValue(): Bool {
    let op = BinAddValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Nat'<TypeKey>, '1n'}};
    return emitBinaryArithValue(op) === '(+ x 1)';
}

chktest test_BinSubValue(): Bool {
    let op = BinSubValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Int'<TypeKey>, '1i'}};
    return emitBinaryArithValue(op) === '(- x 1)';
}

chktest test_BinMultValue_uv(): Bool {
    let op = BinMultValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Nat'<TypeKey>, '2n'}, true};
    return emitBinaryArithValue(op) === '(@NLA_I_mult x 2)';
}

chktest test_BinMultValue_f(): Bool {
    let op = BinMultValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Float'<TypeKey>, '2.0f'}, false};
    return emitBinaryArithValue(op) === '(* x 2.0)';
}

chktest test_BinDivValue_uv(): Bool {
    let op = BinDivValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Nat'<TypeKey>, '2n'}, true};
    return emitBinaryArithValue(op) === '(@NLA_I_div x 2)';
}

chktest test_BinDivValue_f(): Bool {
    let op = BinDivValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Float'<TypeKey>, '2.0f'}, false};
    return emitBinaryArithValue(op) === '(/ x 2.0)';
}

chktest test_BinValue(): Bool {
    let op = BinAddValue{AccessFromNameResolvedValue{'Main@Foo$Int$'<TypeKey>, 'f', AccessVariableValue{'cc'}}, LiteralSimpleValue{'Nat'<TypeKey>, '1n'}};
    return emitBinaryArithValue(op) === '(+ (Main@Foo$Int$-f cc) 1)';
}

chktest test_BinKeyEqNoneValue(): Bool {
    let op = BinKeyEqNoneValue{AccessVariableValue{'x'}};
    return emitBinaryKeyEqValue(op) === '(= x @Term-mk-None)';
}

chktest test_BinKeyNotEqNoneValue(): Bool {
    let op = BinKeyNotEqNoneValue{AccessVariableValue{'x'}};
    return emitBinaryKeyEqValue(op) === '(not (= x @Term-mk-None))';
}

chktest test_BinKeySomeEqValue(): Bool {
    let op = BinKeySomeEqValue{'Option$Int$'<TypeKey>, 'Some$Int$'<TypeKey>, AccessVariableValue{'x'}, LiteralSimpleValue{'Int'<TypeKey>, '1i'}};
    return emitBinaryKeyEqValue(op) === '(and (not (= x @Term-mk-None)) (= (Some$Int$-value (@Term-Option$Int$-value x)) 1))';
}

chktest test_BinKeyNotSomeEqValue(): Bool {
    let op = BinKeyNotSomeEqValue{'Option$Int$'<TypeKey>, 'Some$Int$'<TypeKey>, AccessVariableValue{'x'}, LiteralSimpleValue{'Int'<TypeKey>, '1i'}};
    return emitBinaryKeyEqValue(op) === '(or (= x @Term-mk-None) (not (= (Some$Int$-value (@Term-Option$Int$-value x)) 1)))';
}

chktest test_BinKeyEqValue(): Bool {
    let op = BinKeyEqValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Int'<TypeKey>, '1i'}};
    return emitBinaryKeyEqValue(op) === '(= x 1)';
}

chktest test_BinKeyNotEqValue(): Bool {
    let op = BinKeyNotEqValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Int'<TypeKey>, '1i'}};
    return emitBinaryKeyEqValue(op) === '(not (= x 1))';
}

chktest test_KeyLessValue_bool(): Bool {
    let op = KeyLessValue{KeyLessKind#KeyBool, AccessVariableValue{'x'}, LiteralSimpleValue{'Bool'<TypeKey>, 'true'}};
    return emitKeyLessValue(op) === '(and (not x) true)';
}

chktest test_KeyLessValue_number(): Bool {
    let op = KeyLessValue{KeyLessKind#KeyNumber, AccessVariableValue{'x'}, LiteralSimpleValue{'Nat'<TypeKey>, '1n'}};
    return emitKeyLessValue(op) === '(< x 1)';
}

chktest test_KeyLessValue_string(): Bool {
    let op = KeyLessValue{KeyLessKind#KeyString, AccessVariableValue{'x'}, AccessVariableValue{'y'}};
    return emitKeyLessValue(op) === '(str.< x y)';
}

chktest test_NumericEqValue_int(): Bool {
    let op = NumericEqValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Int'<TypeKey>, '1i'}};
    return emitBinaryNumericCompareValue(op) === '(= x 1)';
}

chktest test_NumericNeqValue_nat(): Bool {
    let op = NumericNeqValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Nat'<TypeKey>, '1n'}};
    return emitBinaryNumericCompareValue(op) === '(not (= x 1))';
}

chktest test_NumericLessValue_float(): Bool {
    let op = NumericLessValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Float'<TypeKey>, '1.0f'}};
    return emitBinaryNumericCompareValue(op) === '(< x 1.0)';
}

chktest test_NumericLessEqValue_int(): Bool {
    let op = NumericLessEqValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Int'<TypeKey>, '1i'}};
    return emitBinaryNumericCompareValue(op) === '(<= x 1)';
}

chktest test_NumericGreaterValue_float(): Bool {
    let op = NumericGreaterValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Float'<TypeKey>, '1.0f'}};
    return emitBinaryNumericCompareValue(op) === '(> x 1.0)';
}

chktest test_NumericGreaterEqValue_int(): Bool {
    let op = NumericGreaterEqValue{AccessVariableValue{'x'}, LiteralSimpleValue{'Int'<TypeKey>, '1i'}};
    return emitBinaryNumericCompareValue(op) === '(>= x 1)';
}

chktest test_BinLogicAndValue(): Bool {
    let op = BinLogicAndValue{AccessVariableValue{'x'}, AccessVariableValue{'y'}};
    return emitBinLogicValue(op) === '(and x y)';
}

chktest test_BinLogicOrValue(): Bool {
    let op = BinLogicOrValue{AccessVariableValue{'x'}, AccessVariableValue{'y'}};
    return emitBinLogicValue(op) === '(or x y)';
}

chktest test_BinLogicImpliesValue(): Bool {
    let op = BinLogicImpliesValue{AccessVariableValue{'x'}, AccessVariableValue{'y'}};
    return emitBinLogicValue(op) === '(=> x y)';
}

chktest test_BinLogicIFFValue(): Bool {
    let op = BinLogicIFFValue{AccessVariableValue{'x'}, AccessVariableValue{'y'}};
    return emitBinLogicValue(op) === '(= x y)';
}

chktest test_MapEntryConstructorValue(): Bool {
    let op = MapEntryConstructorValue{'MapEntry$Int-Bool$'<TypeKey>, AccessVariableValue{'k'}, AccessVariableValue{'v'}};
    return emitMapEntryConstructorValue(op) === '(MapEntry$Int-Bool$-mk k v)';
}

chktest test_IfValue(): Bool {
    let op = IfValue{AccessVariableValue{'tt'}, AccessVariableValue{'x'}, AccessVariableValue{'y'}};
    return emitIfValue(op) === '(ite tt x y)';
}
