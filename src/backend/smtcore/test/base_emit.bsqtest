namespace SMTEmitter;

chktest test_emitLiteralNoneValue(): Bool {
    let op = LiteralNoneValue{};
    return emitConstantValue(op) === 'none';
}

chktest test_emitLiteralBoolValue_true(): Bool {
    let op = LiteralSimpleValue{SMTEmitter::c_typeSig_Bool, 'true'};
    return emitConstantValue(op) === 'true';
}

chktest test_emitLiteralNatValue_42(): Bool {
    let op = LiteralSimpleValue{SMTEmitter::c_typeSig_Nat, '42n'};
    return emitConstantValue(op) === '42';
}

chktest test_emitLiteralIntValue_neg42(): Bool {
    let op = LiteralSimpleValue{SMTEmitter::c_typeSig_Int, '-42i'};
    return emitConstantValue(op) === '-42';
}

chktest test_emitLiteralBigNatValue_0(): Bool {
    let op = LiteralSimpleValue{SMTEmitter::c_typeSig_BigNat, '0N'};
    return emitConstantValue(op) === '0';
}

chktest test_emitLiteralBigIntValue_pos1(): Bool {
    let op = LiteralSimpleValue{SMTEmitter::c_typeSig_BigInt, '+1I'};
    return emitConstantValue(op) === '1';
}

chktest test_emitLiteralCStringValue_ok(): Bool {
    let op = LiteralCStringValue{'ok'};
    return emitConstantValue(op) === '"ok"';
}

chktest test_emitLiteralStringValue_ok(): Bool {
    let op = LiteralStringValue{'hello world'};
    return emitConstantValue(op) === '"hello world"';
}

