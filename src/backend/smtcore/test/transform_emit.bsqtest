namespace SMTEmitter;

chktest test_emitTermifyValue(): Bool {
    let basev = AccessVariableValue{'cc'};
    let termify = TermifyValue{basev, 'Option$Int$'<TypeKey>, 'Some$Int$'<TypeKey>};

    return emitTermifyValue(termify) === '(@Term-Option$Int$-mk cc)';
}


chktest test_emitUntermifyValue(): Bool {
    let basev = AccessVariableValue{'tmp_cc'};
    let termify = UntermifyValue{basev, 'Option$Int$'<TypeKey>, 'Some$Int$'<TypeKey>};

    return emitUntermifyValue(termify) === '(@Term-Option$Int$-value tmp_cc)';
}

chktest test_emitUnwrapTypeDeclToPrimitiveValue(): Bool {
    let op = UnwrapTypeDeclToPrimitiveValue{'Main@Foo'<TypeKey>, AccessVariableValue{'cc'}};

    return emitUnwrapTypeDeclToPrimitiveValue(op) === '(Main@Foo-value cc)';
}

chktest test_emitConvertOptionToSomeTValue(): Bool {
    let op = ConvertOptionToSomeTValue{'Option$Int$'<TypeKey>, 'Some$Int$'<TypeKey>, AccessVariableValue{'cc'}};

    return emitConvertOptionToSomeTValue(op) === '(Some$Int$-value (@Term-Option$Int$-value cc))';
}

chktest test_emitConvertResultToOkTValue(): Bool {
    let op = ConvertResultToOkTValue{'Result$Int-Bool$'<TypeKey>, 'Result$Int-Bool$@Ok'<TypeKey>, AccessVariableValue{'cc'}};

    return emitConvertResultToOkTValue(op) === '(Result$Int-Bool$@Ok-value (@Term-Result$Int-Bool$-value cc))';
}

chktest test_emitConvertResultToFailEValue(): Bool {
    let op = ConvertResultToFailEValue{'Result$Int-Bool$'<TypeKey>, 'Result$Int-Bool$@Fail'<TypeKey>, AccessVariableValue{'cc'}};

    return emitConvertResultToFailEValue(op) === '(Result$Int-Bool$@Fail-value (@Term-Result$Int-Bool$-value cc))';
}
