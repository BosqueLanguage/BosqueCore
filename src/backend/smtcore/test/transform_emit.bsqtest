namespace SMTEmitter;

chktest test_emitTermifyValue(): Bool {
    let basev = AccessVariableValue{'cc'};
    let termify = TermifyValue{basev, 'Option$Int$'<TypeKey>, 'Some$Int$'<TypeKey>};

    return emitTermifyValue(termify) === '(@Term-Option$Int$-mk cc)';
}


chktest test_emitUntermifyValue(): Bool {
    let basev = AccessVariableValue{'tmp_cc'};
    let termify = UntermifyValue{basev, 'Option$Int$'<TypeKey>, 'Some$Int$'<TypeKey>};

    return emitUntermifyValue(termify) === '(@Term-Option$Int$-value tmp_cc)';
}

chktest test_emitLetValue(): Bool {
    let vval = ConstructorStdValue{'Main@Foo'<TypeKey>, List<Value>{LiteralSimpleValue{'Int'<TypeKey>, '0i'}}};
    let vbody = AccessVariableValue{'cc'};
    let lval = LetValue{'cc', vval, vbody};

    return emitLetValue(lval) === '(let ((cc (Main@Foo-mk 0))) cc)';
}

chktest test_emitLetValue_WAccess(): Bool {
    let vval = ConstructorStdValue{'Main@Foo'<TypeKey>, List<Value>{LiteralSimpleValue{'Int'<TypeKey>, '0i'}}};
    let vbody = TermifyValue{AccessVariableValue{'cc'}, 'Option$Int$'<TypeKey>, 'Some$Int$'<TypeKey>};
    let lval = LetValue{'cc', vval, vbody};

    return emitLetValue(lval) === '(let ((cc (Main@Foo-mk 0))) (@Term-Option$Int$-mk cc))';
}