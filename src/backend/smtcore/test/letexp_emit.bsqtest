namespace SMTEmitter;

const s_eev_letexp_emit: SMTEmitterEnv = SMTEmitterEnv{DirectResult{'Int'<TypeKey>}, '[NO_TRGT]'};

chktest test_emitLetOperation_inline(): Bool {
    let vbody = ReturnValueOperation{AccessVariableValue{'cc'}};
    let lval = LetOperation{'cc', LiteralSimpleValue{'Int'<TypeKey>, '0i'}, vbody};

    return emitLetOperation(lval, SMTEmitter::s_eev_letexp_emit, none) === '(let ((cc 0)) cc)';
}

chktest test_emitLetOperation_indent(): Bool {
    let vbody = ReturnValueOperation{AccessVariableValue{'cc'}};
    let lval = LetOperation{'cc', LiteralSimpleValue{'Int'<TypeKey>, '0i'}, vbody};

    let expected = '(let ((cc 0))
                   \    cc
                   \)';

    return emitLetOperation(lval, SMTEmitter::s_eev_letexp_emit, some('')) === expected;
}

chktest test_emitLetOperation_indent2(): Bool {
    let vbody = ReturnValueOperation{BinAddValue{AccessVariableValue{'x'}, AccessVariableValue{'y'}}};
    let innerlet = LetOperation{'y', LiteralSimpleValue{'Int'<TypeKey>, '2i'}, vbody};
    let outerlet = LetOperation{'x', LiteralSimpleValue{'Int'<TypeKey>, '1i'}, innerlet};

    let expected = '(let ((x 1))
                   \(let ((y 2))
                   \    (+ x y)
                   \))';

    return emitLetOperation(outerlet, SMTEmitter::s_eev_letexp_emit, some('')) === expected;
}

