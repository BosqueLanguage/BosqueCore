namespace SMTEmitter;

%*
 * Compute the may error status of every invoke in the assembly
 *%
entity MayErrorAnalysis {
    recursive function processArgs(args: List<BSQAssembly::Expression>): Bool {
        return args.someOf[recursive](recursive pred(arg) => MayErrorAnalysis::processExpression[recursive](arg));
    }

    recursive function processUnaryArg(exp: BSQAssembly::Expression): Bool {
        return MayErrorAnalysis::processExpression(exp);
    }

    recursive function processBinaryArgs(lhs: BSQAssembly::Expression, rhs: BSQAssembly::Expression): Bool {
        return \/(MayErrorAnalysis::processExpression(lhs), MayErrorAnalysis::processExpression(rhs));
    }

    recursive function processPostfixOp(e: BSQAssembly::PostfixOp): Bool {
        let baseerr = MayErrorAnalysis::processUnaryArg[recursive](e.rootExp);
        if(baseerr) {
            return true;
        }
        else {
            return e.ops.someOf[recursive](recursive pred(op) => {
                match(op)@ {
                    BSQAssembly::PostfixAccessFromName => { return false; }
                    | BSQAssembly::PostfixProjectFromNames => { return false; }
                    | BSQAssembly::PostfixAccessFromIndex => { return false; }
                    | BSQAssembly::PostfixIsTest => { return false; }
                    | BSQAssembly::PostfixAsConvert => { return true; }
                    | BSQAssembly::PostfixAssignFields => { abort; }
                    | BSQAssembly::PostfixInvokeStatic => { abort; }
                    | BSQAssembly::PostfixInvokeVirtual => { abort; }
                    | BSQAssembly::PostfixLiteralKeyAccess => { return false; }
                }
            });
        }
    }

    recursive function processUnaryExpression(e: BSQAssembly::UnaryExpression): Bool {
        return MayErrorAnalysis::processUnaryArg(e.exp);
    }

    function maySubtractionUnderflow(e: BSQAssembly::BinaryArithExpression): Bool {
        if(e)!<BSQAssembly::BinSubExpression> {
            return false;
        }
        else {
            return \/(e.etype.tkeystr === 'Nat'<BSQAssembly::TypeKey>, e.etype.tkeystr === 'BigNat'<BSQAssembly::TypeKey>);
        }
    }

    recursive function processBinaryArithExpression(e: BSQAssembly::BinaryArithExpression): Bool {
        if(e?<BSQAssembly::BinDivExpression>) { 
            return true; %%div zero may always happen
        }
        elif(MayErrorAnalysis::maySubtractionUnderflow(e)) {
            return true;
        }
        else {
            return MayErrorAnalysis::processBinaryArgs(e.lhs, e.rhs);
        }
    }

    recursive function processBinaryKeyEqExpression(e: BSQAssembly::BinaryKeyEqExpression): Bool {
        match(e)@ {
            BSQAssembly::BinKeyEqNoneExpression => { return MayErrorAnalysis::processUnaryArg($e.exp); }
            | BSQAssembly::BinKeyNotEqNoneExpression => { return MayErrorAnalysis::processUnaryArg($e.exp); }
            | BSQAssembly::BinKeySomeEqExpression => { return MayErrorAnalysis::processBinaryArgs($e.eqoption, $e.eqval); }
            | BSQAssembly::BinKeyNotSomeEqExpression => { return MayErrorAnalysis::processBinaryArgs($e.neoption, $e.neval); }
            | BSQAssembly::BinKeyEqExpression => { return MayErrorAnalysis::processBinaryArgs($e.lhs, $e.rhs); }
            | BSQAssembly::BinKeyNotEqExpression => { return MayErrorAnalysis::processBinaryArgs($e.lhs, $e.rhs); }
        }
    }

    recursive function processBinaryNumericExpression(e: BSQAssembly::BinaryNumericExpression): Bool {
        return MayErrorAnalysis::processBinaryArgs(e.lhs, e.rhs);
    }

    recursive function processExpression(e: BSQAssembly::Expression): Bool {
        match(e)@ {
            BSQAssembly::LiteralNoneExpression => { return false; }
            | BSQAssembly::LiteralSimpleExpression => { return false; }
            | BSQAssembly::LiteralCStringExpression => { return false; }
            | BSQAssembly::LiteralStringExpression => { return false; }
            | BSQAssembly::LiteralCRegexExpression => { return false; }
            | BSQAssembly::LiteralRegexExpression => { return false; }
            | BSQAssembly::LiteralTypeDeclValueExpression => { return $e.invchecks; }
            | BSQAssembly::AccessNamespaceConstantExpression => { return false; }
            | BSQAssembly::AccessStaticFieldExpression => { return false; }
            | BSQAssembly::AccessEnumExpression => { return false; }
            | BSQAssembly::AccessVariableExpression => { return false; }
            | BSQAssembly::AccessCapturedVariableExpressionSpecial => { return false; }
            | BSQAssembly::ConstructorExpression => { abort; }
            | BSQAssembly::ConstructorLambdaExpression => { return false; }
            | BSQAssembly::LetExpression => { abort; }
            | BSQAssembly::LambdaInvokeExpression => { abort; }
            | BSQAssembly::CallNamespaceFunctionExpression => { abort; }
            | BSQAssembly::CallTypeFunctionExpression => { abort; }
            | BSQAssembly::CallTypeFunctionSpecialExpression => { abort; }
            | BSQAssembly::CallRefInvokeStaticResolveExpression => { abort; }
            | BSQAssembly::CallRefInvokeVirtualExpression => { abort; }
            | BSQAssembly::LogicActionAndExpression => { abort; }
            | BSQAssembly::LogicActionOrExpression => { abort; }
            | BSQAssembly::TypeDeclPrimitiveFieldAccessExpression => { abort; }
            | BSQAssembly::CoerceNarrowTypeExpression => { abort; }
            | BSQAssembly::CoerceWidenTypeExpression => { abort; }
            | BSQAssembly::SafeConvertExpression => { abort; }
            | BSQAssembly::CreateDirectExpression => { abort; }
            | BSQAssembly::PostfixOp => { return MayErrorAnalysis::processPostfixOp[recursive]($e); }
            | BSQAssembly::UnaryExpression => { return MayErrorAnalysis::processUnaryExpression[recursive]($e); }
            | BSQAssembly::BinaryArithExpression => { return MayErrorAnalysis::processBinaryArithExpression[recursive]($e); }
            | BSQAssembly::BinaryKeyEqExpression => { return MayErrorAnalysis::processBinaryKeyEqExpression[recursive]($e); }
            | BSQAssembly::KeyCmpEqualExpression => { abort; }
            | BSQAssembly::KeyCmpLessExpression => { abort; }
            | BSQAssembly::BinaryNumericExpression => { return MayErrorAnalysis::processBinaryNumericExpression[recursive]($e); }
            | BSQAssembly::BinLogicExpression => { abort; }
            | BSQAssembly::MapEntryConstructorExpression => { abort; }
            | BSQAssembly::IfExpression => { abort; }
        }
    }

    recursive function processStatement(s: BSQAssembly::Statement): Bool {
        match(s)@ {
            BSQAssembly::EmptyStatement => { 
                return false; 
            }
            | BSQAssembly::VariableDeclarationStatement => {
                return false;
            }
            | BSQAssembly::VariableMultiDeclarationStatement => {
                return false;
            }
            | BSQAssembly::VariableInitializationStatement => {
                return MayErrorAnalysis::processExpression($s.exp);
            }
            | BSQAssembly::VariableMultiInitializationExplicitStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | BSQAssembly::VariableMultiInitializationImplicitStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | BSQAssembly::VariableAssignmentStatement => {
                return MayErrorAnalysis::processExpression($s.exp);
            }
            | BSQAssembly::VariableMultiAssignmentExplicitStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | BSQAssembly::VariableMultiAssignmentImplicitStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | BSQAssembly::ReturnVoidStatement => {
                return false;
            }
            | BSQAssembly::ReturnSingleStatement => {
                return MayErrorAnalysis::processExpression($s.value);
            }
            | BSQAssembly::ReturnMultiStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | BSQAssembly::AbortStatement => {
                return true;
            }
            | BSQAssembly::AssertStatement => {
                return true;
            }
        }
    }

    recursive function processBodyStatementList(stmts: List<BSQAssembly::Statement>): Bool {
        return stmts.someOf[recursive](recursive pred(stmt) => MayErrorAnalysis::processStatement[recursive](stmt));
    }

    function processBodyImpl(body: BSQAssembly::BodyImplementation): Bool {
        match(body)@ {
            BSQAssembly::ExpressionBodyImplementation => { return MayErrorAnalysis::processExpression($body.exp); }
            | BSQAssembly::StandardBodyImplementation => { return MayErrorAnalysis::processBodyStatementList($body.statements); }
            | _ => { return false; }
        }
    }

    function processNamespaceFunctionDecl(nsfunc: BSQAssembly::NamespaceFunctionDecl): Bool {
        return MayErrorAnalysis::processBodyImpl(nsfunc.body);
    }

    function processTypeFunctionDecl(typefunc: BSQAssembly::TypeFunctionDecl): Bool {
        abort;
    }

    function processMethodDeclVirtual(virtmethod: BSQAssembly::MethodDeclVirtual): Bool {
        abort;
    }

    function processMethodDeclOverride(overmethod: BSQAssembly::MethodDeclOverride): Bool {
        abort;
    }

    function processMethodDeclStatic(staticmethod: BSQAssembly::MethodDeclStatic): Bool {
        abort;
    }

    function setDirectMayErrorInfo(assembly: BSQAssembly::Assembly): Map<BSQAssembly::InvokeKey, Bool> {
        let nsferrinvokes = assembly.nsfuncs.map<Bool>(fn(ikey, nsfunc) => MayErrorAnalysis::processNamespaceFunctionDecl(nsfunc));
        let tferrinvokes = assembly.typefuncs.map<Bool>(fn(ikey, typefunc) => MayErrorAnalysis::processTypeFunctionDecl(typefunc));
        let smethoderrinvokes = assembly.staticmethods.map<Bool>(fn(ikey, staticmethod) => MayErrorAnalysis::processMethodDeclStatic(staticmethod));

        %%TODO: this is not implemented yet -- need to implement the virtual and override method processing
        assert assembly.absmethods.empty();
        assert assembly.virtmethods.empty();
        assert assembly.overmethods.empty();

        return Map<BSQAssembly::InvokeKey, Bool>::union(nsferrinvokes, tferrinvokes, smethoderrinvokes);
    }

    function generate(assembly: BSQAssembly::Assembly, callg: BSQAssembly::CallGraph): Map<BSQAssembly::InvokeKey, Bool> {
        let baseerrinvokes = MayErrorAnalysis::setDirectMayErrorInfo(assembly);

        let properrinvokes = callg.topoorder.reduce<Map<BSQAssembly::InvokeKey, Bool>>(baseerrinvokes, fn(emap, ikey) => {
            let err = baseerrinvokes.get(ikey);
            if(err) {
                return emap;
            }
            else {
                if(callg.isInSCC(ikey)) {
                    return emap.set(ikey, true);
                }
                else {
                    let callees = callg.callgraph.get(ikey);
                    let transerr = callees.someOf(pred(ckey) => emap.get(ckey));

                    return emap.set(ikey, transerr);
                }
            }
        });

        return properrinvokes;
    }
}
