
namespace SMTEmitter;


namespace TransformNameManager {
    function resymbolCStringForSMT(cstr: CString): CString {
        xxxx;
    }

    function convertNamespaceKey(nskey: BSQAssembly::NamespaceKey): SMTAssembly::NamespaceKey {
        return SMTAssembly::NamespaceKey::from(resymbolCStringForSMT(nskey.value));
    }
}

function transformNamspaceConstDeclToSMT(decl: BSQAssembly::NamespaceConstDecl): SMTAssembly::NamespaceConstDecl {
    xxxx;

    field declaredType: TypeSignature;
    field value: Expression;

    return SMTAssembly::NamespaceConstDecl {
        ns = TransformNameManager::convertNamespaceKey(decl.declaredInNS),
        cname = decl.name.value,

        vtype: ResultType;
        value: FlowOperation;
    };
}

function transformAssemblyToSMT(asm: BSQAssembly::Assembly): SMTAssembly::Assembly {
    
    return Assembly {
        nsconsts = List<NamespaceConstDecl>{asm.nsconsts.map<SMTAssembly::NamespaceConstDecl>(fn(nsc) => transformNamspaceConstDeclToSMT(nsc))},
        typeconsts = List<ConstMemberDecl>{},

        nspreds = List<NamespacePredicateFunctionDecl>{},
        nsbuiltins = List<NamespaceBuiltinFunctionDecl>{},
    
        nsfuncs = Map<InvokeKey, NamespaceFunctionDecl>{},
        typefuncs = Map<InvokeKey, TypeFunctionDecl>{},
        allfuncs = List<InvokeKey>{},
    
        enums = List<EnumTypeDecl>{},
        typedecls = List<TypedeclTypeDecl>{},
        constructables = List<ConstructableTypeDecl>{},
        collections = List<CollectionTypeDecl>{},

        entities = List<EntityTypeDecl>{},
        datamembers = List<DatatypeMemberEntityTypeDecl>{},

        pconcepts = List<PrimitiveConceptTypeDecl>{},
        concepts = List<ConceptTypeDecl>{},

        datatypes = List<DatatypeTypeDecl>{}
    };
}
