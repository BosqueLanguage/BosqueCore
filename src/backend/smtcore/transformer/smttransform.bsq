
namespace SMTEmitter;

namespace TransformNameManager {
    const c_dangerous: Map<CString, CString> = Map<CString, CString>{
        'ite' => '@ite'
    };

    function resymbolCStringForSMT(cstr: CString): CString {
        return cstr.replaceAllStringOccurrences('::', '@')
            .replaceAllStringOccurrences(', ', '-')
            .replaceAllStringOccurrences('(|', '@EList<')
            .replaceAllStringOccurrences('|)', '>');
    }

    function safeifyName(name: CString): CString {
        if(!TransformNameManager::c_dangerous.has(name)) {
            return name;
        }
        else {
            return TransformNameManager::c_dangerous.get(name);
        }    
    }

    function convertNamespaceKey(nskey: BSQAssembly::NamespaceKey): SMTAssembly::NamespaceKey {
        return SMTAssembly::NamespaceKey::from(resymbolCStringForSMT(nskey.value));
    }

    function convertTypeKey(nskey: BSQAssembly::TypeKey): SMTAssembly::TypeKey {
        return SMTAssembly::TypeKey::from(resymbolCStringForSMT(nskey.value));
    }

    function convertInvokeKey(ikey: BSQAssembly::InvokeKey): SMTAssembly::InvokeKey {
        return SMTAssembly::InvokeKey::from(resymbolCStringForSMT(ikey.value));
    }
}

datatype SMTExpTransformResult using {
    field oftype: SMTAssembly::TypeKey;
}
of 
SafeResult { field exp: SMTAssembly::SafeExpression; }
| ErrorResult { field exp: SMTAssembly::Expression; }
;

entity SMTTransformerCtx {
    field mayErrorReturn: Bool;

    field currentFile: String;
    field currentInvoke: Option<SMTAssembly::InvokeKey>;

    field tempCtr: Nat;
    field errCtr: Nat;

    field errors: List<SMTAssembly::ErrorInfo>;

    method addError(bsqsinfo: BSQAssembly::SourceInfo): SMTTransformerCtx {
        let smtsinfo = SMTAssembly::SourceInfo{bsqsinfo.line, bsqsinfo.column};
        let errinfo = SMTAssembly::ErrorInfo{this.errCtr, this.currentFile, smtsinfo, this.currentInvoke};

        return this[errors = $errors.pushBack(errinfo), errCtr = $errCtr + 1n];
    }
}

entity SMTTransformer {
    field assembly: BSQAssembly::Assembly;

    function isTermSMTTypeKey(tkey: SMTAssembly::TypeKey): Bool {
        return tkey === '@Term'<SMTAssembly::TypeKey>;
    }

    method transformStdTypeToSMT(tsig: BSQAssembly::TypeSignature): SMTAssembly::TypeKey {
        if(tsig)@!<BSQAssembly::NominalTypeSignature> {
            return TransformNameManager::convertTypeKey(tsig.tkeystr);
        }
        else {
            if(this.assembly.isNominalTypeConcrete($tsig.tkeystr)) {
                return TransformNameManager::convertTypeKey($tsig.tkeystr);
            }
            else {
                return SMTAssembly::TypeKey::from('@BTerm');
            }
        }
    }

    method transformCallTypeToSMT(tsig: BSQAssembly::TypeSignature): SMTAssembly::ParamTypeKey {
        if(tsig)@!<BSQAssembly::LambdaTypeSignature> {
            return SMTAssembly::ParamTypeKey::from(this.transformStdTypeToSMT(tsig));
        }
        else {
            abort; %% NOT IMPLEMENTED LAMBDA TYPES
        }
    }

    method unpackSingleResultErrors(subexp: SMTExpTransformResult, ctx: SMTTransformerCtx): SMTAssembly::SafeExpression, SMTTransformerCtx, Option<List<(|SMTAssembly::Expression, SMTAssembly::VarIdentifier|)>> {
        if(subexp)@<SafeResult> {
            return $subexp.exp, ctx, none;
        }
        else {
            let mtag = ctx.tempCtr.toCString();
            let vname = SMTAssembly::VarIdentifier::from(CString::concat('@tmp-', mtag));
            let rexp = SMTAssembly::UnwrapFromResultExpression{$subexp.oftype, vname};

            return rexp, ctx[tempCtr = $tempCtr + 1n], some(List<(|SMTAssembly::Expression, SMTAssembly::VarIdentifier|)>{(|$subexp.exp, vname|)});
        }
    }

    method unpackExpressionErrors(subexps: List<SMTExpTransformResult>, ctx: SMTTransformerCtx): List<SMTAssembly::SafeExpression>, SMTTransformerCtx, Option<List<(|SMTAssembly::Expression, SMTAssembly::VarIdentifier|)>> {
        if(subexps.allOf(pred(etr) => etr?<SafeResult>)) {
            return subexps.map<SMTAssembly::SafeExpression>(fn(etr) => etr@<SafeResult>.exp), ctx, none;
        }
        else {
            let mtag = ctx.tempCtr.toCString();
            let eexps = subexps.mapIdx<(|SMTExpTransformResult, Option<SMTAssembly::VarIdentifier>|)>(fn(etr, idx) => {
                if(etr)<SafeResult> {
                    return (|etr, none|);
                }
                else {
                    let vname = SMTAssembly::VarIdentifier::from(CString::concat('@tmp-', mtag, '-', idx.toCString()));
                    return (|etr, some(vname)|);
                }
            });

            let exps = eexps.map<SMTAssembly::SafeExpression>(fn(etrp) => {
                if($vv = etrp.0)@<SafeResult> {
                    return $vv.exp;
                }
                else {
                    return SMTAssembly::UnwrapFromResultExpression{$vv.oftype, etrp.1@some};
                }
            });

            let binds = eexps.filter(pred(etrp) => etrp.0?<ErrorResult>).map<(|SMTAssembly::Expression, SMTAssembly::VarIdentifier|)>(fn(etrp) => (|etrp.0@<ErrorResult>.exp, etrp.1@some|));

            return exps, ctx[tempCtr = $tempCtr + 1n], some(binds);
        }
    }

    recursive method processArgsInOrder(args: List<BSQAssembly::Expression>, ctx: SMTTransformerCtx): List<SMTAssembly::SafeExpression>, SMTTransformerCtx, Option<List<(|SMTAssembly::Expression, SMTAssembly::VarIdentifier|)>> {
        let nctx, subexps = args.transduce<SMTTransformerCtx, SMTExpTransformResult>(ctx, recursive fn(ctx, arg) => this.transformExpressionToSMT[recursive](arg, ctx));

        return this.unpackExpressionErrors(subexps, nctx);
    }

    recursive method processUnaryArg(arg: BSQAssembly::Expression, ctx: SMTTransformerCtx): SMTAssembly::SafeExpression, SMTTransformerCtx, Option<List<(|SMTAssembly::Expression, SMTAssembly::VarIdentifier|)>> {
        let rexps, nctx, obinds = this.processArgsInOrder[recursive](List<BSQAssembly::Expression>{arg}, ctx);
        return rexps.get(0n), nctx, obinds;
    }

    recursive method processBinaryArgs(lhs: BSQAssembly::Expression, rhs: BSQAssembly::Expression, ctx: SMTTransformerCtx): SMTAssembly::SafeExpression, SMTAssembly::SafeExpression, SMTTransformerCtx, Option<List<(|SMTAssembly::Expression, SMTAssembly::VarIdentifier|)>> {
        let rexps, nctx, obinds = this.processArgsInOrder[recursive](List<BSQAssembly::Expression>{lhs, rhs}, ctx);
        return rexps.get(0n), rexps.get(1n), nctx, obinds;
    }

    method wrapOperationResult(etype: BSQAssembly::TypeSignature, exp: SMTAssembly::SafeExpression, binds: Option<List<(|SMTAssembly::Expression, SMTAssembly::VarIdentifier|)>>): SMTExpTransformResult {
        let smtetype = this.transformStdTypeToSMT(etype);

        if(binds)@none {
            return SafeResult{smtetype, exp};
        }
        else {
            let rexp = SMTAssembly::WrapIntoResultExpression{smtetype, exp};
            let lerr = SMTAssembly::LetWErrorsExpression{$binds, rexp};

            return ErrorResult{smtetype, lerr};
        }
    }

    method wrapOperationResultWErr(etype: BSQAssembly::TypeSignature, exp: SMTAssembly::Expression, binds: Option<List<(|SMTAssembly::Expression, SMTAssembly::VarIdentifier|)>>): SMTExpTransformResult {
        let smtetype = this.transformStdTypeToSMT(etype);

        if(binds)@none {
            return ErrorResult{smtetype, exp};
        }
        else {
            return ErrorResult{smtetype, SMTAssembly::LetWErrorsExpression{$binds, exp}};
        }
    }

    method transformLiteralNoneExpression(exp: BSQAssembly::LiteralNoneExpression): SMTAssembly::SafeExpression {
        return SMTAssembly::LiteralNoneExpression{};
    }

    method transformLiteralSimpleExpression(exp: BSQAssembly::LiteralSimpleExpression): SMTAssembly::SafeExpression {
        return SMTAssembly::LiteralSimpleExpression{this.transformStdTypeToSMT(exp.etype), exp.value};
    }

    method transformLiteralCStringExpression(exp: BSQAssembly::LiteralCStringExpression): SMTAssembly::SafeExpression {
        return SMTAssembly::LiteralCStringExpression{exp.value};
    }

    method transformLiteralStringExpression(exp: BSQAssembly::LiteralStringExpression): SMTAssembly::SafeExpression {
        return SMTAssembly::LiteralStringExpression{exp.value};
    }

    method transformAccessVariableExpression(exp: BSQAssembly::AccessVariableExpression): SMTAssembly::SafeExpression {
        return SMTAssembly::AccessVariableExpression{SMTAssembly::VarIdentifier::from(TransformNameManager::safeifyName(exp.vname.value))};
    }

    recursive method transformPostfixAccessFromName(exp: BSQAssembly::PostfixAccessFromName, ctx: SMTTransformerCtx, bexp: SMTExpTransformResult): SMTTransformerCtx, SMTExpTransformResult {
        if(this.assembly.isNominalTypeConcrete(exp.baseType.tkeystr)) {
            let onarg, nctx, obinds = this.unpackSingleResultErrors(bexp, ctx);
            let accessop = SMTAssembly::AccessFromNameResolvedExpression{TransformNameManager::convertTypeKey(exp.declaredInType.tkeystr), exp.name.value, onarg};

            return nctx, this.wrapOperationResult(exp.ftype, accessop, obinds);
        }
        else {
            abort; %% NOT IMPLEMENTED
        }
    }

    recursive method transformPostfixOp(exp: BSQAssembly::PostfixOp, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        let ebase, nctx, obinds = this.processUnaryArg[recursive](exp.rootExp, ctx);
        let eexp = this.wrapOperationResult(exp.rootExp.etype, ebase, obinds);

        let rres = exp.ops.reduce[recursive]<(|SMTTransformerCtx, SMTExpTransformResult|)>((|nctx, eexp|), recursive fn(pstate, op) => {
            match(op)@ {
                BSQAssembly::PostfixAccessFromName => { return this.transformPostfixAccessFromName[recursive]($op, pstate.0, pstate.1); }
                | BSQAssembly::PostfixProjectFromNames => { abort; }
                | BSQAssembly::PostfixAccessFromIndex => { abort; }
                | BSQAssembly::PostfixIsTest => { abort; }
                | BSQAssembly::PostfixAsConvert => { abort; }
                | BSQAssembly::PostfixAssignFields => { abort; }
                | BSQAssembly::PostfixInvokeStatic => { abort; }
                | BSQAssembly::PostfixInvokeVirtual => { abort; }
                | BSQAssembly::PostfixLiteralKeyAccess => { abort; }
            }
        });

        return rres;
    }

    recursive method transformUnaryExpression(exp: BSQAssembly::UnaryExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        let nexp, nctx, obinds = this.processUnaryArg[recursive](exp.exp, ctx);
        let unaryop = SMTAssembly::UnaryExpression{nexp};

        return nctx, this.wrapOperationResult(exp.etype, unaryop, obinds);
    }

    recursive method transformBinAddExpression(exp: BSQAssembly::BinAddExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        let lexp, rexp, nctx, obinds = this.processBinaryArgs[recursive](exp.lhs, exp.rhs, ctx);
        let addop = SMTAssembly::BinAddExpression{lexp, rexp};

        return nctx, this.wrapOperationResult(exp.etype, addop, obinds);
    }

    recursive method transformBinSubExpression(exp: BSQAssembly::BinSubExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        let smtetype = this.transformStdTypeToSMT(exp.etype);

        let lexp, rexp, nctx, obinds = this.processBinaryArgs[recursive](exp.lhs, exp.rhs, ctx);
        let subop = SMTAssembly::BinSubExpression{lexp, rexp};

        if(exp.etype.tkeystr !== 'Nat'<BSQAssembly::TypeKey> && exp.etype.tkeystr !== 'BigNat'<BSQAssembly::TypeKey>) {
            return nctx, this.wrapOperationResult(exp.etype, subop, obinds);
        }
        else {
            let lesstest = SMTAssembly::NumericLessExpression{lexp, rexp};
            let chekd = SMTAssembly::IfThenElseExpression{lesstest, SMTAssembly::AbortExpression{smtetype, nctx.errCtr}, SMTAssembly::WrapIntoResultExpression{smtetype, subop}};
            
            return nctx.addError(exp.sinfo), this.wrapOperationResultWErr(exp.etype, chekd, obinds);
        }
    }

    function useUninterpretedOps(tkey: BSQAssembly::TypeKey): Bool {
        return \/(tkey === 'Int'<BSQAssembly::TypeKey>, tkey === 'BigInt'<BSQAssembly::TypeKey>, tkey === 'Nat'<BSQAssembly::TypeKey>, tkey === 'BigNat'<BSQAssembly::TypeKey>);
    }

    recursive method transformBinMultExpression(exp: BSQAssembly::BinMultExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        let lexp, rexp, nctx, obinds = this.processBinaryArgs[recursive](exp.lhs, exp.rhs, ctx);
        let hasconstarg = \/(lexp?<SMTAssembly::LiteralSimpleExpression>, rexp?<SMTAssembly::LiteralSimpleExpression>);
        let isuniterpreted = SMTTransformer::useUninterpretedOps(exp.etype.tkeystr);
        let multop = SMTAssembly::BinMultExpression{lexp, rexp, /\(!hasconstarg, isuniterpreted)};

        return nctx, this.wrapOperationResult(exp.etype, multop, obinds);
    }

    recursive method transformBinDivExpression(exp: BSQAssembly::BinDivExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        let smtetype = this.transformStdTypeToSMT(exp.etype);

        let lexp, rexp, nctx, obinds = this.processBinaryArgs[recursive](exp.lhs, exp.rhs, ctx);
        let hasconstarg = \/(lexp?<SMTAssembly::LiteralSimpleExpression>, rexp?<SMTAssembly::LiteralSimpleExpression>);
        let isuniterpreted = SMTTransformer::useUninterpretedOps(exp.etype.tkeystr);
        let divop = SMTAssembly::BinDivExpression{lexp, rexp, /\(!hasconstarg, isuniterpreted)};

        let ztest = SMTAssembly::NumericEqExpression{rexp, SMTAssembly::AccessStaticFieldExpression{smtetype, 'zero'}};
        let chekd = SMTAssembly::IfThenElseExpression{ztest, SMTAssembly::AbortExpression{smtetype, nctx.errCtr}, SMTAssembly::WrapIntoResultExpression{smtetype, divop}};
        
        return nctx.addError(exp.sinfo), this.wrapOperationResultWErr(exp.etype, chekd, obinds);
    }

    recursive method transformBinaryArithExpression(exp: BSQAssembly::BinaryArithExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        match(exp)@ {
            BSQAssembly::BinAddExpression => { 
                return this.transformBinAddExpression[recursive]($exp, ctx); 
            }
            | BSQAssembly::BinSubExpression => { 
                return this.transformBinSubExpression[recursive]($exp, ctx); 
            }
            | BSQAssembly::BinMultExpression => { 
                return this.transformBinMultExpression[recursive]($exp, ctx); 
            }
            | BSQAssembly::BinDivExpression => { 
                return this.transformBinDivExpression[recursive]($exp, ctx); 
            }
        }
    }

    recursive method transformBinKeyEqNoneExpression(exp: BSQAssembly::BinKeyEqNoneExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        let nexp, nctx, obinds = this.processUnaryArg[recursive](exp.exp, ctx);
        let noneop = SMTAssembly::BinKeyEqNoneExpression{nexp};

        return nctx, this.wrapOperationResult(exp.etype, noneop, obinds);
    }

    recursive method transformBinKeyNotEqNoneExpression(exp: BSQAssembly::BinKeyNotEqNoneExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        let nexp, nctx, obinds = this.processUnaryArg[recursive](exp.exp, ctx);
        let noneop = SMTAssembly::BinKeyNotEqNoneExpression{nexp};

        return nctx, this.wrapOperationResult(exp.etype, noneop, obinds);
    }

    recursive method transformBinKeySomeEqExpression(exp: BSQAssembly::BinKeySomeEqExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        let neqoption, neqval, nctx, obinds = this.processBinaryArgs[recursive](exp.eqoption, exp.eqval, ctx);
        let optiondecl = this.assembly.lookupNominalTypeDeclaration(exp.eqoption.etype.tkeystr)@<BSQAssembly::OptionTypeDecl>;

        let someop = SMTAssembly::BinKeySomeEqExpression{ 
            TransformNameManager::convertTypeKey(optiondecl.tkey),
            TransformNameManager::convertTypeKey(optiondecl.someType.tkey),
            neqoption,
            neqval
        };

        return nctx, this.wrapOperationResult(exp.etype, someop, obinds);
    }

    recursive method transformBinKeyNotSomeEqExpression(exp: BSQAssembly::BinKeyNotSomeEqExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        let neqoption, neqval, nctx, obinds = this.processBinaryArgs[recursive](exp.neoption, exp.neval, ctx);
        let optiondecl = this.assembly.lookupNominalTypeDeclaration(exp.neoption.etype.tkeystr)@<BSQAssembly::OptionTypeDecl>;

        let someop = SMTAssembly::BinKeyNotSomeEqExpression{ 
            TransformNameManager::convertTypeKey(optiondecl.tkey),
            TransformNameManager::convertTypeKey(optiondecl.someType.tkey),
            neqoption,
            neqval
        };

        return nctx, this.wrapOperationResult(exp.etype, someop, obinds);
    }

    recursive method transformBinKeyEqExpression(exp: BSQAssembly::BinKeyEqExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        let lexp, rexp, nctx, obinds = this.processBinaryArgs[recursive](exp.lhs, exp.rhs, ctx);
        let eqop = SMTAssembly::BinKeyEqExpression{lexp, rexp};

        return nctx, this.wrapOperationResult(exp.etype, eqop, obinds);
    }

    recursive method transformBinKeyNotEqExpression(exp: BSQAssembly::BinKeyNotEqExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        let lexp, rexp, nctx, obinds = this.processBinaryArgs[recursive](exp.lhs, exp.rhs, ctx);
        let eqop = SMTAssembly::BinKeyNotEqExpression{lexp, rexp};

        return nctx, this.wrapOperationResult(exp.etype, eqop, obinds);
    }

    recursive method transformBinaryKeyEqExpression(exp: BSQAssembly::BinaryKeyEqExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        match(exp)@ {
            BSQAssembly::BinKeyEqNoneExpression => { 
                return this.transformBinKeyEqNoneExpression[recursive]($exp, ctx); 
            }
            | BSQAssembly::BinKeyNotEqNoneExpression => { 
                return this.transformBinKeyNotEqNoneExpression[recursive]($exp, ctx); 
            }
            | BSQAssembly::BinKeySomeEqExpression => { 
                return this.transformBinKeySomeEqExpression[recursive]($exp, ctx); 
            }
            | BSQAssembly::BinKeyNotSomeEqExpression => { 
                return this.transformBinKeyNotSomeEqExpression[recursive]($exp, ctx); 
            }
            | BSQAssembly::BinKeyEqExpression => { 
                return this.transformBinKeyEqExpression[recursive]($exp, ctx); 
            }
            | BSQAssembly::BinKeyNotEqExpression => { 
                return this.transformBinKeyNotEqExpression[recursive]($exp, ctx); 
            }
        }
    }

    recursive method transformBinaryNumericCompareExpression(exp: BSQAssembly::BinaryNumericExpression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        let lexp, rexp, nctx, obinds = this.processBinaryArgs[recursive](exp.lhs, exp.rhs, ctx);

        var opexp: SMTAssembly::SafeExpression;
        match(exp)@ {
            BSQAssembly::NumericEqExpression => { 
                opexp = SMTAssembly::NumericEqExpression{lexp, rexp}; 
            }
            | BSQAssembly::NumericNeqExpression => { 
                opexp = SMTAssembly::NumericNeqExpression{lexp, rexp}; 
            }
            | BSQAssembly::NumericLessExpression => { 
                opexp = SMTAssembly::NumericLessExpression{lexp, rexp}; 
            }
            | BSQAssembly::NumericLessEqExpression => { 
                opexp = SMTAssembly::NumericLessEqExpression{lexp, rexp}; 
            }
            | BSQAssembly::NumericGreaterExpression => { 
                opexp = SMTAssembly::NumericGreaterExpression{lexp, rexp}; 
            }
            | BSQAssembly::NumericGreaterEqExpression => { 
                opexp = SMTAssembly::NumericGreaterEqExpression{lexp, rexp}; 
            }
        }

        return nctx, this.wrapOperationResult(exp.etype, opexp, obinds);
    }

    recursive method transformExpressionToSMT(exp: BSQAssembly::Expression, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTExpTransformResult {
        match(exp)@ {
            BSQAssembly::LiteralNoneExpression => { 
                return ctx, SafeResult{this.transformStdTypeToSMT(exp.etype), this.transformLiteralNoneExpression($exp)}; 
            }
            | BSQAssembly::LiteralSimpleExpression => { 
                return ctx, SafeResult{this.transformStdTypeToSMT(exp.etype), this.transformLiteralSimpleExpression($exp)}; 
            }
            | BSQAssembly::LiteralCStringExpression => { 
                return ctx, SafeResult{this.transformStdTypeToSMT(exp.etype), this.transformLiteralCStringExpression($exp)};
            }
            | BSQAssembly::LiteralStringExpression => { 
                return ctx, SafeResult{this.transformStdTypeToSMT(exp.etype), this.transformLiteralStringExpression($exp)}; 
            }
            | BSQAssembly::AccessVariableExpression => { 
                return ctx, SafeResult{this.transformStdTypeToSMT(exp.etype), this.transformAccessVariableExpression($exp)}; 
            }
            | BSQAssembly::PostfixOp => { 
                return this.transformPostfixOp[recursive]($exp, ctx);
            }
            | BSQAssembly::UnaryExpression => { 
                return this.transformUnaryExpression[recursive]($exp, ctx);
            }
            | BSQAssembly::BinaryArithExpression => { 
                return this.transformBinaryArithExpression[recursive]($exp, ctx);
            }
            | BSQAssembly::BinaryKeyEqExpression => { 
                return this.transformBinaryKeyEqExpression[recursive]($exp, ctx);
            }
            | BSQAssembly::BinaryNumericExpression => { 
                return this.transformBinaryNumericCompareExpression[recursive]($exp, ctx);
            }
            | _ => { 
                abort; %% NOT IMPLEMENTED
            }
        }
    }

    method transformVariableInitializationStatement(stmt: BSQAssembly::VariableInitializationStatement, tail: SMTAssembly::Operation, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTAssembly::Operation {
        let rctx, smtexp = this.transformExpressionToSMT(stmt.exp, ctx);
        
        if(smtexp)@<SafeResult> {
            let vname = SMTAssembly::VarIdentifier::from(TransformNameManager::safeifyName(stmt.name.value));
            let vtype = this.transformStdTypeToSMT(stmt.vtype);
            return rctx, SMTAssembly::LetOperation{vname, vtype, $smtexp.exp, tail};
        }
        else {
            let tname = TransformNameManager::safeifyName(stmt.name.value);
            let vebind = SMTAssembly::VarIdentifier::from(CString::concat('@tmpe-', tname));
            let vbind = SMTAssembly::VarIdentifier::from(tname);
            let vtype = this.transformStdTypeToSMT(stmt.vtype);

            return rctx, SMTAssembly::LetOperationWError{vebind, vbind, vtype, $smtexp.exp, tail};
        }
    }

    method transformVariableAssignmentStatement(stmt: BSQAssembly::VariableAssignmentStatement, tail: SMTAssembly::Operation, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTAssembly::Operation {
        let rctx, smtexp = this.transformExpressionToSMT(stmt.exp, ctx);
        
        if(smtexp)@<SafeResult> {
            let vname = SMTAssembly::VarIdentifier::from(TransformNameManager::safeifyName(stmt.name.value));
            let vtype = this.transformStdTypeToSMT(stmt.vtype);
            return rctx, SMTAssembly::LetOperation{vname, vtype, $smtexp.exp, tail};
        }
        else {
            let tname = TransformNameManager::safeifyName(stmt.name.value);
            let vebind = SMTAssembly::VarIdentifier::from(CString::concat('@tmpe-', tname));
            let vbind = SMTAssembly::VarIdentifier::from(tname);
            let vtype = this.transformStdTypeToSMT(stmt.vtype);

            return rctx, SMTAssembly::LetOperationWError{vebind, vbind, vtype, $smtexp.exp, tail};
        }
    }

    method transformAssertStatement(stmt: BSQAssembly::AssertStatement, tail: SMTAssembly::Operation, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTAssembly::Operation {
        let rctx, smtexp = this.transformExpressionToSMT(stmt.cond, ctx);
        
        if(smtexp)@<SafeResult> {
            let aop = SMTAssembly::AssertOperation{$smtexp.exp, ctx.errCtr, tail};
            return ctx.addError(stmt.sinfo), aop;
        }
        else {
            abort;
        }
    }

    recursive method transformStatementToSMT(stmt: BSQAssembly::Statement, tail: SMTAssembly::Operation, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTAssembly::Operation {
        match(stmt)@ {
            BSQAssembly::EmptyStatement => {
                return ctx, tail;
            }
            | BSQAssembly::VariableDeclarationStatement => {
                return ctx, tail;
            }
            | BSQAssembly::VariableMultiDeclarationStatement => {
                return ctx, tail;
            }
            | BSQAssembly::VariableInitializationStatement => {
                return this.transformVariableInitializationStatement($stmt, tail, ctx);
            }
            | BSQAssembly::VariableMultiInitializationExplicitStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | BSQAssembly::VariableMultiInitializationImplicitStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | BSQAssembly::VariableAssignmentStatement => {
                return this.transformVariableAssignmentStatement($stmt, tail, ctx);
            }
            | BSQAssembly::VariableMultiAssignmentExplicitStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | BSQAssembly::VariableMultiAssignmentImplicitStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | BSQAssembly::AssertStatement => {
                return this.transformAssertStatement($stmt, tail, ctx);
            }
        }
    }

    recursive method transformStatementListToSMTStep(stmts: List<BSQAssembly::Statement>, idx: Nat, tail: SMTAssembly::Operation, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTAssembly::Operation {
        if(idx == 0n) {
            return this.transformStatementToSMT(stmts.get(idx), tail, ctx);
        }
        else {
            let rctx, smtstmt = this.transformStatementToSMT(stmts.get(idx), tail, ctx);
            return this.transformStatementListToSMTStep(stmts, idx - 1n, smtstmt, rctx);
        }
    }

    recursive method transformStatementListToSMT(stmts: List<BSQAssembly::Statement>, ctx: SMTTransformerCtx): SMTTransformerCtx, SMTAssembly::Operation {
        let tailop = stmts.back();

        var lop: SMTAssembly::Operation;
        var lctx: SMTTransformerCtx;
        match(tailop)@ {
            BSQAssembly::ReturnVoidStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | BSQAssembly::ReturnSingleStatement => {
                let rctx, smtexp = this.transformExpressionToSMT($tailop.value, ctx);

                if(smtexp)@<ErrorResult> {
                    lop = SMTAssembly::ReturnOperation{$smtexp.exp};
                }
                else {
                    if(!ctx.mayErrorReturn) {
                        lop = SMTAssembly::ReturnOperation{$smtexp.exp};
                    }
                    else {
                        lop = SMTAssembly::ReturnOperation{SMTAssembly::WrapIntoResultExpression{this.transformStdTypeToSMT($tailop.rtype), $smtexp.exp}};
                    }
                }

                lctx = rctx;
            }
            | BSQAssembly::ReturnMultiStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | BSQAssembly::AbortStatement => {
                lop = SMTAssembly::AbortOperation{ctx.errCtr};
                lctx = ctx.addError($tailop.sinfo);
            }
            | BSQAssembly::VoidRefCallStatement => {
                abort; %% NOT IMPLEMENTED
            }
        }

        if(stmts.isSingleElement()) {
            return lctx, lop;
        }
        else {
            let ttidx = stmts.lastIndex() - 1n;
            return this.transformStatementListToSMTStep(stmts, ttidx, lop, lctx);
        }
    }

    method transformBodyToSMT(impl: BSQAssembly::BodyImplementation, currentFile: String, ikey: Option<BSQAssembly::InvokeKey>, mayerror: Bool, ttype: BSQAssembly::TypeSignature): SMTAssembly::Body {
        let smtkey = if(ikey)@some then some(TransformNameManager::convertInvokeKey($ikey)) else none;
        let ctx = SMTTransformerCtx{mayerror, currentFile, smtkey, 1n, 1n, List<SMTAssembly::ErrorInfo>{}};

        match(impl)@ {
            BSQAssembly::BuiltinBodyImplementation => {
                abort; %% NOT IMPLEMENTED
            }
            | BSQAssembly::ExpressionBodyImplementation => {
                let rctx, smtexp = this.transformExpressionToSMT($impl.exp, ctx);

                if(smtexp)@<ErrorResult> {
                    return SMTAssembly::Body{SMTAssembly::ReturnOperation{$smtexp.exp}, rctx.errors};
                }
                else {
                    if(!ctx.mayErrorReturn) {
                        return SMTAssembly::Body{SMTAssembly::ReturnOperation{$smtexp.exp}, rctx.errors};
                    }
                    else {
                        return SMTAssembly::Body{SMTAssembly::ReturnOperation{SMTAssembly::WrapIntoResultExpression{this.transformStdTypeToSMT(ttype), $smtexp.exp}}, rctx.errors};
                    }
                }
            }
            | BSQAssembly::StandardBodyImplementation => {
                let rctx, smtop = this.transformStatementListToSMT($impl.statements, ctx);
                return SMTAssembly::Body{smtop, rctx.errors};
            }
            | _ => {
                abort; %% NOT IMPLEMENTED
            }
        }
    }

    method transformNamespaceFunctionDeclToSMT(decl: BSQAssembly::NamespaceFunctionDecl, errinvokes: Map<BSQAssembly::InvokeKey, Bool>): SMTAssembly::NamespaceFunctionDecl {
        let nskey = TransformNameManager::convertNamespaceKey(decl.declaredInNS);
        let ikey = TransformNameManager::convertInvokeKey(decl.ikey);

        let params = decl.params.map<SMTAssembly::InvokeParameterDecl>(fn(p) => SMTAssembly::InvokeParameterDecl{p.pname.value, this.transformCallTypeToSMT(p.ptype)});
        let rtype = this.transformStdTypeToSMT(decl.resultType);
        let artype = if(errinvokes.get(decl.ikey)) then SMTAssembly::ErrorResult{ rtype } else SMTAssembly::SafeResult{ rtype };

        let body = this.transformBodyToSMT(decl.body, decl.file, some(decl.ikey), errinvokes.get(decl.ikey), decl.resultType);
        return SMTAssembly::NamespaceFunctionDecl{ nskey, decl.name.value, ikey, params, artype, body };
    }

    method processConstExpression(exp: BSQAssembly::Expression, ctx: SMTTransformerCtx): SMTAssembly::Body {
        let rctx, smtexp = this.transformExpressionToSMT(exp, ctx);
        
        if(smtexp)@<ErrorResult> {
            return SMTAssembly::Body{SMTAssembly::ReturnOperation{$smtexp.exp}, rctx.errors};
        }
        else {
            return SMTAssembly::Body{SMTAssembly::ReturnOperation{SMTAssembly::WrapIntoResultExpression{this.transformStdTypeToSMT(exp.etype), $smtexp.exp}}, rctx.errors};
        }
    }

    method transformNamspaceConstDeclToSMT(decl: BSQAssembly::NamespaceConstDecl): SMTAssembly::NamespaceConstDecl {
        let nskey = TransformNameManager::convertNamespaceKey(decl.declaredInNS);
        let vtype = SMTAssembly::ErrorResult{ this.transformStdTypeToSMT(decl.declaredType) }; %%Not strictly needed but means we don't need to do errors over consts

        let ctx = SMTTransformerCtx{true, decl.file, none, 1n, 1n, List<SMTAssembly::ErrorInfo>{}};
        let body = this.processConstExpression(decl.value, ctx);
        return SMTAssembly::NamespaceConstDecl{ nskey, decl.name.value, vtype, body };
    }

    method transformTypeConstDeclToSMT(decl: BSQAssembly::ConstMemberDecl): SMTAssembly::ConstMemberDecl {
        let tkey = TransformNameManager::convertTypeKey(decl.declaredInType.tkeystr);
        let vtype = SMTAssembly::ErrorResult{ this.transformStdTypeToSMT(decl.declaredType) }; %%Not strictly needed but means we don't need to do errors over consts

        let ctx = SMTTransformerCtx{true, decl.file, none, 1n, 1n, List<SMTAssembly::ErrorInfo>{}};
        let body = this.processConstExpression(decl.value, ctx);
        return SMTAssembly::ConstMemberDecl{ tkey, decl.name.value, vtype, body };
    }

    method transformFieldInfoToSMT(finfo: BSQAssembly::SaturatedFieldInfo): SMTAssembly::FieldInfo {
        return SMTAssembly::FieldInfo{finfo.fname.value, this.transformStdTypeToSMT(finfo.ftype)};
    }

    method transformEntityDeclToSMT(decl: BSQAssembly::EntityTypeDecl): SMTAssembly::EntityTypeDecl {
        let tkey = TransformNameManager::convertTypeKey(decl.tkey);
        let termable = !decl.saturatedProvides.empty();
        let finfo = decl.saturatedBFieldInfo.map<SMTAssembly::FieldInfo>(fn(f) => this.transformFieldInfoToSMT(f));

        return SMTAssembly::EntityTypeDecl{ tkey, termable, finfo };
    }

    function transformAssemblyToSMT(assembly: BSQAssembly::Assembly, errinvokes: Map<BSQAssembly::InvokeKey, Bool>): SMTAssembly::Assembly {
        let transformer = SMTTransformer{assembly};

        let tnsfuncs = assembly.allfuncs
            .filter(pred(ikey) => assembly.nsfuncs.has(ikey))
            .reduce<Map<SMTAssembly::InvokeKey, SMTAssembly::NamespaceFunctionDecl>>(Map<SMTAssembly::InvokeKey, SMTAssembly::NamespaceFunctionDecl>{}, 
                fn(acc, ikey) => {
                    let bsqdecl = assembly.nsfuncs.get(ikey);
                    let smtdecl = transformer.transformNamespaceFunctionDeclToSMT(bsqdecl, errinvokes);
                    return acc.insert(smtdecl.invokeKey, smtdecl);
                });

        let tentities = assembly.allconcretetypes
            .filter(pred(tkey) => assembly.entities.has(tkey))
            .map<SMTAssembly::EntityTypeDecl>(fn(tkey) => transformer.transformEntityDeclToSMT(assembly.entities.get(tkey)));

        let tallfuncs = assembly.allfuncs.map<SMTAssembly::InvokeKey>(fn(ikey) => TransformNameManager::convertInvokeKey(ikey));

        return SMTAssembly::Assembly {
            nsconsts = assembly.nsconsts.map<SMTAssembly::NamespaceConstDecl>(fn(nsc) => transformer.transformNamspaceConstDeclToSMT(nsc)),
            typeconsts = assembly.typeconsts.map<SMTAssembly::ConstMemberDecl>(fn(tc) => transformer.transformTypeConstDeclToSMT(tc)),

            nspreds = List<SMTAssembly::NamespacePredicateFunctionDecl>{},
            nsbuiltins = List<SMTAssembly::NamespaceBuiltinFunctionDecl>{},
    
            nsfuncs = tnsfuncs,
            typefuncs = Map<SMTAssembly::InvokeKey, SMTAssembly::TypeFunctionDecl>{},
    
            enums = List<SMTAssembly::EnumTypeDecl>{},
            typedecls = List<SMTAssembly::TypedeclTypeDecl>{},
            constructables = List<SMTAssembly::ConstructableTypeDecl>{},
            collections = List<SMTAssembly::CollectionTypeDecl>{},

            entities = tentities,
            datamembers = List<SMTAssembly::DatatypeMemberEntityTypeDecl>{},

            pconcepts = List<SMTAssembly::PrimitiveConceptTypeDecl>{},
            concepts = List<SMTAssembly::ConceptTypeDecl>{},

            datatypes = List<SMTAssembly::DatatypeTypeDecl>{},

            allfuncs = tallfuncs
        };
    }
}
