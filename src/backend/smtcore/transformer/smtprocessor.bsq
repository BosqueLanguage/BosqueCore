%*
 * Take a Bosque IR Assembly and transform it into a SMT representation:
 *%

declare namespace SMTEmitter {
    using BSQAssembly;
    using SMTAssembly;
}

const s_ignoreErrTrgt: Nat = 0n;
const s_invalidErrTrgt: Nat = 65536n;

entity Transformer {
    function transformAssembly(assembly: BSQAssembly::Assembly): SMTAssembly::Assembly {
        let explicitAssembly = BSQAssembly::ExplicitifyTransform::process(assembly);
        let simpleAssembly = BSQAssembly::ConstantSimplification::process(explicitAssembly);

        let treeAssembly = simpleAssembly; %%TODO:: treeflow.bsq
        
        let callg = BSQToSMTCallGraphBuilder::constructBSQToSMTCallGraph(treeAssembly);
        let errinvokes: Map<BSQAssembly::InvokeKey, Bool> = MayErrorAnalysis::generateInvokeErrorInfo(treeAssembly, callg);

        return SMTTransformer::transformAssemblyToSMT(treeAssembly, callg, errinvokes);
    }
}
%*
public function main(assembly: BSQAssembly::Assembly): CString {
    let tasm = Transformer::transformAssembly(assembly);
    let smtstr = SMTEmitter::emitAssembly(tasm, (|'[NO_ERROR_TRGT]', SMTEmitter::s_ignoreErrTrgt|));

    return CString::concat('#BEGIN _ERRORS_%n;', errstr, '#END _ERRORS_%n;', smtstr);
}
*%

public function main(assembly: BSQAssembly::Assembly): CString {
    let tasm = Transformer::transformAssembly(assembly);

    let errstr = CString::joinAll('%n;', tasm.getAllErrors().map<CString>(fn(e) => CString::concat(e.ininvoke@some, ': ', e.errCtr.toCString())));
    let smtstr = SMTEmitter::emitAssembly(tasm, (|'Main@Database@processRemove'<SMTAssembly::InvokeKey>, 2n|));

    return CString::concat('#BEGIN _ERRORS_%n;', errstr, '#END _ERRORS_%n;', smtstr);
}
