%*
 * Take a Bosque IR Assembly and transform it into a SMT representation:
 *%

declare namespace SMTEmitter {
    using BSQAssembly;
    using SMTAssembly;
}

entity Transformer {
    function transformAssembly(assembly: BSQAssembly::Assembly): SMTAssembly::Assembly {
        let explicitAssembly = BSQAssembly::ExplicitifyTransform::process(assembly);
        let simpleAssembly = BSQAssembly::ConstantSimplification::process(explicitAssembly);

        let taggedAssembly = simpleAssembly; %%TODO:: varuse.bsq
        let treeAssembly = taggedAssembly; %%TODO:: treeflow.bsq
        
        let callg = BSQAssembly::CallGraphBuilder::buildCallGraph(treeAssembly);
        let errinvokes: Map<BSQAssembly::InvokeKey, Bool> = MayErrorAnalysis::generate(treeAssembly, callg);

        return SMTTransformer::transformAssemblyToSMT(treeAssembly, errinvokes);
    }
}

public function main(assembly: BSQAssembly::Assembly): CString {
    let tasm = Transformer::transformAssembly(assembly);
    let smtstr = SMTEmitter::emitAssembly(tasm, SMTEmitter::s_ignoreErrTrgt);

    return smtstr;
}
