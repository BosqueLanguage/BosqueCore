%*
 * Take a Bosque IR Assembly and transform it into a SMT representation:
 *%

declare namespace SMTEmitter {
    using BSQAssembly;
    using SMTAssembly;
}

entity Transformer {
    function transformAssembly(assembly: BSQAssembly::Assembly): SMTAssembly::Assembly {
        let explicitAssembly = BSQAssembly::ExplicitifyTransform::process(assembly);
        let simpleAssembly = explicitAssembly; %%TODO:: constssimplify.bsq

        let treeAssembly = simpleAssembly; %%TODO:: treeflow.bsq
        let taggedAssembly = treeAssembly; %%TODO:: varuse.bsq

        let callg = CallGraphBuilder::buildCallGraph(assembly);
        let errinvokes: Map<BSQAssembly::InvokeKey, Bool> = MayErrorAnalysis::generate(assembly, callg);
        
        return SMTTransformer::transformAssemblyToSMT(explicitAssembly, errinvokes);
    }
}

public function main(assembly: BSQAssembly::Assembly): CString {
    let tasm = Transformer::transformAssembly(assembly);
    let smtstr = SMTEmitter::emitAssembly(tasm, SMTEmitter::s_ignoreErrTrgt);

    return smtstr;
}
