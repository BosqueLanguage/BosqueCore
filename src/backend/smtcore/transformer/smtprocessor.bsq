%*
 * Take a Bosque IR Assembly and transform it into a SMT representation:
 *%

declare namespace SMTEmitter {
    using BSQAssembly;
    using SMTAssembly;
}

const s_sample_bsqasm: BSQAssembly::Assembly = BSQAssembly::Assembly{
    nsconsts = List<BSQAssembly::NamespaceConstDecl>{
        BSQAssembly::NamespaceConstDecl{
            file = "Main.bsq",
            sinfo = BSQAssembly::SourceInfo{0n, 0n, 0n, 0n},
            declaredInNS = 'Main'<BSQAssembly::NamespaceKey>,
            attributes = List<BSQAssembly::DeclarationAttibute>{},
            name = 'c1'<BSQAssembly::Identifier>,
            declaredType = BSQAssembly::NominalTypeSignature{ BSQAssembly::SourceInfo{0n, 0n, 0n, 0n}, 'Int'<BSQAssembly::TypeKey> },
            value = BSQAssembly::LiteralSimpleExpression{
                sinfo = BSQAssembly::SourceInfo{0n, 0n, 0n, 0n},
                etype = BSQAssembly::NominalTypeSignature{ BSQAssembly::SourceInfo{0n, 0n, 0n, 0n}, 'Int'<BSQAssembly::TypeKey> },
                value = '2i'
            }
        }
    },
    typeconsts = List<BSQAssembly::ConstMemberDecl>{
    },
    nsfuncs = Map<BSQAssembly::InvokeKey, BSQAssembly::NamespaceFunctionDecl>{
        'Main::main'<BSQAssembly::InvokeKey> => BSQAssembly::NamespaceFunctionDecl{
            file = "Main.bsq",
            sinfo = BSQAssembly::SourceInfo{0n, 0n, 0n, 0n},
            declaredInNS = 'Main'<BSQAssembly::NamespaceKey>,
            attributes = List<BSQAssembly::DeclarationAttibute>{},
            name = 'main'<BSQAssembly::Identifier>,
            ikey = 'Main::main'<BSQAssembly::InvokeKey>,
            irecursive = BSQAssembly::RecursiveAnnotation#NonRecursiveTag,
            params = List<BSQAssembly::InvokeParameterDecl>{},
            resultType = BSQAssembly::NominalTypeSignature{ BSQAssembly::SourceInfo{0n, 0n, 0n, 0n}, 'Int'<BSQAssembly::TypeKey> },
            body = BSQAssembly::StandardBodyImplementation{
                List<BSQAssembly::Statement>{
                    BSQAssembly::ReturnSingleStatement{
                        sinfo = BSQAssembly::SourceInfo{0n, 0n, 0n, 0n},
                        value = BSQAssembly::LiteralSimpleExpression{
                            sinfo = BSQAssembly::SourceInfo{0n, 0n, 0n, 0n},
                            etype = BSQAssembly::NominalTypeSignature{ BSQAssembly::SourceInfo{0n, 0n, 0n, 0n}, 'Int'<BSQAssembly::TypeKey> },
                            value = '2i'
                        },
                        rtype = BSQAssembly::NominalTypeSignature{ BSQAssembly::SourceInfo{0n, 0n, 0n, 0n}, 'Int'<BSQAssembly::TypeKey> }
                    }
                }
            },
            preconditions = List<BSQAssembly::PreConditionDecl>{},
            postconditions = List<BSQAssembly::PostConditionDecl>{},
            fkind = BSQAssembly::FunctionDeclKindTag#Function
        }
    },
    typefuncs = Map<BSQAssembly::InvokeKey, BSQAssembly::TypeFunctionDecl>{
    },
    enums = Map<BSQAssembly::TypeKey, BSQAssembly::EnumTypeDecl>{
    },
    typedecls = Map<BSQAssembly::TypeKey, BSQAssembly::TypedeclTypeDecl>{
    },
    primtives = Map<BSQAssembly::TypeKey, BSQAssembly::PrimitiveEntityTypeDecl>{
        'Int'<BSQAssembly::TypeKey> => BSQAssembly::PrimitiveEntityTypeDecl{
            file = "Core.bsq",
            sinfo = BSQAssembly::SourceInfo{0n, 0n, 0n, 0n},
            declaredInNS = 'Core'<BSQAssembly::NamespaceKey>,
            attributes = List<BSQAssembly::DeclarationAttibute>{},
            tkey = 'Int'<BSQAssembly::TypeKey>,
            invariants = List<BSQAssembly::InvariantDecl>{},
            validates = List<BSQAssembly::ValidateDecl>{},
            consts = List<BSQAssembly::ConstMemberDecl>{},
            functions = List<BSQAssembly::TypeFunctionDecl>{},
            methods = List<BSQAssembly::MethodDecl>{},
            saturatedProvides = List<BSQAssembly::NominalTypeSignature>{},
            saturatedBFieldInfo = List<BSQAssembly::SaturatedFieldInfo>{},
            allInvariants = List<BSQAssembly::SaturatedInvariantInfo>{},
            allValidates = List<BSQAssembly::SaturatedInvariantInfo>{}
        }
    },
    constructables = Map<BSQAssembly::TypeKey, BSQAssembly::ConstructableTypeDecl>{
    },
    collections = Map<BSQAssembly::TypeKey, BSQAssembly::CollectionTypeDecl>{
    },
    entities = Map<BSQAssembly::TypeKey, BSQAssembly::EntityTypeDecl>{
    },
    datamembers = Map<BSQAssembly::TypeKey, BSQAssembly::DatatypeMemberEntityTypeDecl>{
    },
    pconcepts = Map<BSQAssembly::TypeKey, BSQAssembly::PrimitiveConceptTypeDecl>{
    },
    concepts = Map<BSQAssembly::TypeKey, BSQAssembly::ConceptTypeDecl>{
    },
    datatypes = Map<BSQAssembly::TypeKey, BSQAssembly::DatatypeTypeDecl>{
    },
    allfuncs = List<BSQAssembly::InvokeKey>{
        'Main::main'<BSQAssembly::InvokeKey>
    },
    allconcretetypes = List<BSQAssembly::TypeKey>{
        'Int'<BSQAssembly::TypeKey>
    },
    allabstracttypes = List<BSQAssembly::TypeKey>{
    }
};

const s_sample_smtasm: SMTAssembly::Assembly = SMTAssembly::Assembly{
    nsconsts = List<SMTAssembly::NamespaceConstDecl>{
        SMTAssembly::NamespaceConstDecl{
            'Main'<SMTAssembly::NamespaceKey>, 
            'c1', 
            SMTAssembly::DirectResult{'Int'<SMTAssembly::TypeKey>}, 
            SMTAssembly::OperationBlock{
                List<SMTAssembly::FlowOperation>{},
                SMTAssembly::ReturnValueOperation{SMTAssembly::LiteralSimpleValue{'Int'<SMTAssembly::TypeKey>, '3i'}}
            }
        }
    },
    typeconsts = List<SMTAssembly::ConstMemberDecl>{
    },
    nspreds = List<SMTAssembly::NamespacePredicateFunctionDecl>{
    },
    nsbuiltins = List<SMTAssembly::NamespaceBuiltinFunctionDecl>{
    },
    nsfuncs = Map<SMTAssembly::InvokeKey, SMTAssembly::NamespaceFunctionDecl>{
        'Main@main'<SMTAssembly::InvokeKey> => SMTAssembly::NamespaceFunctionDecl{
            'Main'<SMTAssembly::NamespaceKey>,
            'main',
            'Main@main'<SMTAssembly::InvokeKey>, 
            List<SMTAssembly::InvokeParameterDecl>{
                SMTAssembly::InvokeParameterDecl{'x', 'Int'<SMTAssembly::ParamTypeKey>},
            }, 
            SMTAssembly::DirectResult{'Int'<SMTAssembly::TypeKey>}, 
            SMTAssembly::OperationBlock{
                List<SMTAssembly::FlowOperation>{},
                SMTAssembly::ReturnValueOperation{
                    SMTAssembly::BinAddValue{
                        SMTAssembly::AccessNamespaceConstantValue{'Main'<SMTAssembly::NamespaceKey>, 'c1'}, 
                        SMTAssembly::LiteralSimpleValue{'Int'<SMTAssembly::TypeKey>, '1i'}
                    }
                }
            }
        }
    },
    typefuncs = Map<SMTAssembly::InvokeKey, SMTAssembly::TypeFunctionDecl>{
    },
    allfuncs = List<SMTAssembly::InvokeKey>{
        'Main@main'<SMTAssembly::InvokeKey>
    },
    enums = List<SMTAssembly::EnumTypeDecl>{
    },
    typedecls = List<SMTAssembly::TypedeclTypeDecl>{
    },
    constructables = List<SMTAssembly::ConstructableTypeDecl>{
    },
    collections = List<SMTAssembly::CollectionTypeDecl>{
    },
    entities = List<SMTAssembly::EntityTypeDecl>{
    },
    datamembers = List<SMTAssembly::DatatypeMemberEntityTypeDecl>{
    },
    pconcepts = List<SMTAssembly::PrimitiveConceptTypeDecl>{
    },
    concepts = List<SMTAssembly::ConceptTypeDecl>{
    },
    datatypes = List<SMTAssembly::DatatypeTypeDecl>{
    }
};

entity Transformer {
    function transformAssembly(assembly: BSQAssembly::Assembly): SMTAssembly::Assembly {
        %% TODO -- calls to special process bsq assembly 
        %%         (1) generic calls from bsqir simplifier like rename and tree convert ...
        %%         (2) specific calls from transformer to ground recursive calls ...

        %%TODO compute errinvokes info
        let errinvokes: Map<BSQAssembly::InvokeKey, Bool> = Map<BSQAssembly::InvokeKey, Bool>{ 
            'Main::main'<BSQAssembly::InvokeKey> => false
        };

        return SMTTransformer::transformAssemblyToSMT(assembly, errinvokes);
    }
}

public function main(): CString {
    let tasm = Transformer::transformAssembly(SMTEmitter::s_sample_bsqasm);
    let smtstr = SMTEmitter::emitAssembly(tasm, SMTEmitter::s_ignoreErrTrgt);

    return smtstr;
}
