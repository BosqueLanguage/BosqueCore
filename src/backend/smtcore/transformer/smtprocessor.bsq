%*
 * Take a Bosque IR Assembly and transform it into a SMT representation:
 *%

declare namespace SMTEmitter {
    using BSQAssembly;
    using SMTAssembly;
}

const s_ignoreErrTrgt: Nat = 0n;
const s_invalidErrTrgt: Nat = 65536n;

entity Transformer {
    function assemblyProcess(assembly: BSQAssembly::Assembly): BSQAssembly::Assembly, BSQToSMTCallGraph, Map<BSQAssembly::InvokeKey, Bool> {
        let explicitAssembly = BSQAssembly::ExplicitifyTransform::process(assembly);
        let simpleAssembly = BSQAssembly::ConstantSimplification::process(explicitAssembly);

        let treeAssembly = simpleAssembly; %%TODO:: treeflow.bsq
        
        let callg = BSQToSMTCallGraphBuilder::constructBSQToSMTCallGraph(treeAssembly);
        let errinvokes: Map<BSQAssembly::InvokeKey, Bool> = MayErrorAnalysis::generateInvokeErrorInfo(treeAssembly, callg);

        return treeAssembly, callg, errinvokes;    
    }

    function transformAssembly(assembly: BSQAssembly::Assembly): SMTAssembly::Assembly {
        let asm, callg, errinvokes = Transformer::assemblyProcess(assembly);

        return SMTTransformer::transformAssemblyToSMT(asm, callg, errinvokes);
    }

    function transformAssemblyAsCheckTest(assembly: BSQAssembly::Assembly): SMTAssembly::Assembly, CString {
        let asm, callg, errinvokes = Transformer::assemblyProcess(assembly);
        
        return SMTTransformer::transformAssemblyAsCheckTest(asm, callg, errinvokes);
    }

    function transformAssemblyAsErrorTest(assembly: BSQAssembly::Assembly): SMTAssembly::Assembly, CString {
        let asm, callg, errinvokes = Transformer::assemblyProcess(assembly);
        
        return SMTTransformer::transformAssemblyAsErrorTest(asm, callg, errinvokes);
    }
}

public function main(mode: CString, assembly: BSQAssembly::Assembly): CString {
    if(mode !== '--errtest' && mode !== '--chktest') {
        let tasm = Transformer::transformAssembly(assembly);
        return SMTEmitter::emitAssembly(tasm, (|none, SMTEmitter::s_ignoreErrTrgt|));
    }
    else {
        if(mode === '--chktest') {
            let tasm, opc = Transformer::transformAssemblyAsCheckTest(assembly);
            let smtop = CString::join('%n;', '#BEGIN ;;--SMT_OPERATION--;;', opc, '#END ;;--SMT_OPERATION--;;');
            
            return CString::concat(SMTEmitter::emitAssembly(tasm, (|none, SMTEmitter::s_ignoreErrTrgt|)), '%n;%n;', smtop);
        }
        else {
            let tasm, opc = Transformer::transformAssemblyAsErrorTest(assembly);
            let smtop = CString::join('%n;', '#BEGIN ;;--SMT_OPERATION--;;', opc, '#END ;;--SMT_OPERATION--;;');

            let erroropts = tasm.getAllErrors();
            let errcompiles = erroropts.map<CString>(fn(err) => {
                let smtstr = SMTEmitter::emitAssembly(tasm, (|err.ininvoke, err.errCtr|));

                let smtchk = CString::concat(';;Error in ', err.ininvoke@some.value, '%n;%n;', smtstr, '%n;', smtop);
                return CString::concat('#### CHECK ####%n;', smtchk);
            });

            return CString::joinAll('%n;%n;', errcompiles);
        }
    }
}
