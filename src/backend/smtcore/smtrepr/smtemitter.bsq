declare namespace SMTEmitter;

entity SMTEmitterEnv {
    field expectedResultType: ResultType;
}

function cleanOptionalLeadingPlus(vstr: CString): CString {
    return if(vstr.startsWithString('+')) then vstr.removePrefixString('+') else vstr;
}

function emitTaggedNumericType(nstr: CString, tag: CString): CString {
    return cleanOptionalLeadingPlus(nstr.removeSuffixString(tag));
}

function emitLiteralNoneValue(): CString {
    return 'none';
}

function emitLiteralSimpleValue(v: LiteralSimpleValue): CString {
    switch(v.vtype) {
        'Bool'<TypeKey>     => { return v.value; }
        | 'Nat'<TypeKey>    => { return emitTaggedNumericType(v.value, 'n'); }
        | 'Int'<TypeKey>    => { return emitTaggedNumericType(v.value, 'i'); }
        | 'BigNat'<TypeKey> => { return emitTaggedNumericType(v.value, 'N'); }
        | 'BigInt'<TypeKey> => { return emitTaggedNumericType(v.value, 'I'); }
        | 'Float'<TypeKey>  => { return emitTaggedNumericType(v.value, 'f'); }
    }
}

function emitLiteralCStringValue(v: LiteralCStringValue): CString {
    return CString::concat('"', v.value, '"');
}

function emitLiteralStringValue(v: LiteralStringValue): CString {
    return CString::concat('"', v.value, '"');
}

function emitLiteralCRegexValue(v: LiteralCRegexValue): CString {
    %%TODO
    abort;
}

function emitLiteralRegexValue(v: LiteralRegexValue): CString {
    %%TODO
    abort;
}

function emitConstantValue(v: ConstantValue): CString {
    match(v)@ {
        LiteralNoneValue => { return emitLiteralNoneValue(); }
        | LiteralSimpleValue => { return emitLiteralSimpleValue($v); }
        | LiteralCStringValue => { return emitLiteralCStringValue($v); }
        | LiteralStringValue => { return emitLiteralStringValue($v); }
        | LiteralCRegexValue => { return emitLiteralCRegexValue($v); }
        | LiteralRegexValue => { return emitLiteralRegexValue($v); }
    }
}

function emitAccessNamespaceConstantValue(v: AccessNamespaceConstantValue): CString {
    return CString::concat(v.ns.value, '@', v.name);
}

function emitAccessStaticFieldValue(v: AccessStaticFieldValue): CString {
    return CString::concat(v.tresolved.value, '@', v.name);
}

function emitAccessEnumValue(v: AccessEnumValue): CString {
    return CString::concat(v.enumtype.value, '$$', v.name);
}

function emitAccessVariableValue(v: AccessVariableValue): CString {
    return v.vname;
}

function emitAccessVariableRetypeStepValue(v: AccessVariableRetypeStepValue): CString {
    let access = SMTNameManager::generateStructFieldName(v.step.ttype,  v.step.specialfname);
    
    return CString::concat('(', access, ' ',  v.vname, ')');
}

function emitAccessVariableRetypeMultiStepValue(v: AccessVariableRetypeMultiStepValue): CString {
    %%TODO
    abort;
}

recursive function emitTermifyValue(v: TermifyValue): CString {
    let consname = SMTNameManager::generateStructTermConstructorName(v.fromtype);
    let vv = emitValue[recursive](v.value);
    
    return CString::concat('(', consname, ' ', vv, ')');
}

recursive function emitUntermifyValue(v: UntermifyValue): CString {
    let access = SMTNameManager::generateStructTermFieldName(v.fromtype);
    let vv = emitValue[recursive](v.value);
    
    return CString::concat('(', access, ' ', vv, ')');
}

function emitLiteralTypeDeclValue(v: LiteralTypeDeclValue): CString {
    let consname = SMTNameManager::generateStructConstructorName(v.constype);
    let vv = emitConstantValue(v.value);

    return CString::concat('(', consname, ' ', vv, ')');
}

recursive function emitConstructorListSingletonsValue(v: ConstructorListSingletonsValue): CString {
    let consname = SMTNameManager::generateStructConstructorName(v.constype);

    if(v.args.empty()) {
        let scons = CString::concat('(as seq.empty (Seq ', v.oftype.value, '))');
        return CString::concat('(', consname, ' ', scons, ')');
    }
    else {
        if(v.args.isSingleElement()) {
            let scons = CString::concat('(seq.unit ', emitValue[recursive](v.args.single()), ')');
            return CString::concat('(', consname, ' ', scons, ')');
        }
        else {
            let cvals = v.args.map[recursive]<CString>(fn(x) => CString::concat('(seq.unit ', emitValue[recursive](x), ')'));
            let argsl = CString::joinAll(' ', cvals);

            let scons = CString::concat('(seq.++ ', argsl, ')');
            return CString::concat('(', consname, ' ', scons, ')');
        }
    }
}

recursive function emitConstructorMapSingletonsValue(v: ConstructorMapSingletonsValue): CString {
    %%TODO
    abort;
}

recursive function emitConstructorPrimarySpecialConstructableValue(v: ConstructorPrimarySpecialConstructableValue): CString {
    let consname = SMTNameManager::generateStructConstructorName(v.constype);
    let vv = emitValue[recursive](v.arg);

    return CString::concat('(', consname, ' ', vv, ')');
}

recursive function emitConstructorTypeDeclValue(v: ConstructorTypeDeclValue): CString {
    let consname = SMTNameManager::generateStructConstructorName(v.constype);
    let vv = emitValue[recursive](v.arg);

    return CString::concat('(', consname, ' ', vv, ')');
}

recursive function emitConstructorStdValue(v: ConstructorStdValue): CString {
    let consname = SMTNameManager::generateStructConstructorName(v.constype);
    if(v.args.empty()) {
        return consname;
    }
    else {
        let cvals = v.args.map[recursive]<CString>(fn(x) => emitValue[recursive](x));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', consname, ' ', argsl, ')');
    }
}

recursive function emitConstructorPrimaryValue(v: ConstructorPrimaryValue): CString {
    match(v)@ {
        ConstructorListSingletonsValue => { return emitConstructorListSingletonsValue[recursive]($v); }
        | ConstructorMapSingletonsValue => { return emitConstructorMapSingletonsValue[recursive]($v); }
        | ConstructorPrimarySpecialConstructableValue => { return emitConstructorPrimarySpecialConstructableValue[recursive]($v); }
        | ConstructorTypeDeclValue => { return emitConstructorTypeDeclValue[recursive]($v); }
        | ConstructorStdValue => { return emitConstructorStdValue[recursive]($v); }
    }
}

recursive function emitLetValue(v: LetValue): CString {
    let vbind = CString::concat('((', v.vname, ' ', emitValue[recursive](v.value), '))');
    let bbody = emitValue[recursive](v.body);
    
    return CString::concat('(let ', vbind, ' ', bbody, ')');
}

recursive function emitCallNamespaceFunctionValue(v: CallNamespaceFunctionValue): CString {
    let fname = SMTNameManager::generateNamespaceFunctionName(v.ns, v.name);
    if(v.args.empty()) {
        return fname;
    }
    else {
        let cvals = v.args.map[recursive]<CString>(fn(x) => emitValue[recursive](x));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', fname, ' ', argsl, ')');
    }
}

recursive function emitCallTypeFunctionValue(v: CallTypeFunctionValue): CString {
    let fname = SMTNameManager::generateTypeFunctionName(v.resolvedType, v.name);
    if(v.args.empty()) {
        return fname;
    }
    else {
        let cvals = v.args.map[recursive]<CString>(fn(x) => emitValue[recursive](x));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', fname, ' ', argsl, ')');
    }
}

recursive function emitLogicActionAndValue(v: LogicActionAndValue): CString {
    let cvals = v.args.map[recursive]<CString>(fn(x) => emitValue[recursive](x));
    let argsl = CString::joinAll(' ', cvals);

    return CString::concat('(and ', argsl, ')');
}

recursive function emitLogicActionOrValue(v: LogicActionOrValue): CString {
    let cvals = v.args.map[recursive]<CString>(fn(x) => emitValue[recursive](x));
    let argsl = CString::joinAll(' ', cvals);

    return CString::concat('(or ', argsl, ')');
}

recursive function emitUnwrapTypeDeclToPrimitiveValue(v: UnwrapTypeDeclToPrimitiveValue): CString {
    let access = SMTNameManager::generateStructFieldName(v.decltype, 'value');
    return CString::concat('(', access, ' ', emitValue(v.arg), ')');
}

recursive function emitAccessFromNameResolvedValue(v: AccessFromNameResolvedValue): CString {
    let access = SMTNameManager::generateStructFieldName(v.ontype, v.name);
    return CString::concat('(', access, ' ', emitValue(v.arg), ')');
}

recursive function emitIsNoneTestValue(v: IsNoneTestValue): CString {
    let vv = emitValue[recursive](v.arg);
    return CString::concat('(= ', vv, ' @Term-mk-None)');
}

recursive function emitIsSomeTestValue(v: IsSomeTestValue): CString {
    let vv = emitValue[recursive](v.arg);
    return CString::concat('(not (= ', vv, ' @Term-mk-None))');
}

recursive function emitIsTypeTestValue(v: IsTypeTestValue): CString {
    let ccons = SMTNameManager::generateStructTermConstructorName(v.istype);
    let ttchk = CString::concat('(_ is ', ccons, ')');
    let vv = emitValue[recursive](v.arg);

    %%v is always in term repr to test against term constructor
    return CString::concat('(', ttchk, ' ', vv, ')');
}

recursive function emitIsSubtypeTestValue(v: IsSubtypeTestValue): CString {
    let subchk = SMTNameManager::generateTermSubtypeFunctionName(v.oftype);
    let vv = emitValue[recursive](v.arg);

    %%v is always in term repr to test against term constructor
    return CString::concat('(', subchk, ' ', vv, ')');
}

recursive function emitConvertOptionToSomeTValue(v: ConvertOptionToSomeTValue): CString {
    let ubx = SMTNameManager::generateStructTermFieldName(v.optiontype);
    let extract = SMTNameManager::generateStructFieldName(v.sometype, 'value');

    let ubxop = CString::concat('(', ubx, ' ', emitValue[recursive](v.arg), ')');
    return CString::concat('(', extract, ' ', ubxop, ')');
}

recursive function emitConvertResultToOkTValue(v: ConvertResultToOkTValue): CString {
    let ubx = SMTNameManager::generateStructTermFieldName(v.resulttype);
    let extract = SMTNameManager::generateStructFieldName(v.oktype, 'value');

    let ubxop = CString::concat('(', ubx, ' ', emitValue[recursive](v.arg), ')');
    return CString::concat('(', extract, ' ', ubxop, ')');
}

recursive function emitConvertResultToFailEValue(v: ConvertResultToFailEValue): CString {
    let ubx = SMTNameManager::generateStructTermFieldName(v.resulttype);
    let extract = SMTNameManager::generateStructFieldName(v.failtype, 'value');

    let ubxop = CString::concat('(', ubx, ' ', emitValue[recursive](v.arg), ')');
    return CString::concat('(', extract, ' ', ubxop, ')');
}

recursive function emitMethodInvokeStaticValue(v: MethodInvokeStaticValue): CString {
    let fname = SMTNameManager::generateTypeFunctionName(v.resolvedTrgt, v.name);
    let rootv = emitValue[recursive](v.rootExp);

    let rpfx = CString::concat(fname, ' ', rootv);
    if(v.args.empty()) {
        return CString::concat('(', rpfx, ')');
    }
    else {
        let cvals = v.args.map[recursive]<CString>(fn(x) => emitValue[recursive](x));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', rpfx, ' ', argsl, ')');
    }
}

recursive function emitPrefixNotOpValue(v: PrefixNotOpValue): CString {
    let vv = emitValue[recursive](v.exp);
    return CString::concat('(not ', vv, ')');
}

recursive function emitPrefixNegateOpValue(v: PrefixNegateOpValue): CString {
    let vv = emitValue[recursive](v.exp);
    return CString::concat('(- ', vv, ')');
}

recursive function emitPrefixPlusOpValue(v: PrefixPlusOpValue): CString {
    return emitValue[recursive](v.exp);
}

recursive function emitUnaryValue(v: UnaryValue): CString {
    match(v)@ {
        PrefixNotOpValue => { return emitPrefixNotOpValue[recursive]($v); }
        | PrefixNegateOpValue => { return emitPrefixNegateOpValue[recursive]($v); }
        | PrefixPlusOpValue => { return emitPrefixPlusOpValue[recursive]($v); }
    }
}

recursive function emitBinAddValue(v: BinAddValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);
    return CString::concat('(+ ', lhs, ' ', rhs, ')');
}

recursive function emitBinSubValue(v: BinSubValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);
    return CString::concat('(- ', lhs, ' ', rhs, ')');
}

recursive function emitBinMultValue(v: BinMultValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);

    if(v.useUninterpreted) {
        return CString::concat('(@NLA_I_mult ', lhs, ' ', rhs, ')');
    }
    else {
        return CString::concat('(* ', lhs, ' ', rhs, ')');
    }
}

recursive function emitBinDivValue(v: BinDivValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);
    
    if(v.useUninterpreted) {
        return CString::concat('(@NLA_I_div ', lhs, ' ', rhs, ')');
    }
    else {
        return CString::concat('(/ ', lhs, ' ', rhs, ')');
    }
}

recursive function emitBinaryArithValue(v: BinaryArithValue): CString {
    match(v)@ {
        BinAddValue => { return emitBinAddValue[recursive]($v); }
        | BinSubValue => { return emitBinSubValue[recursive]($v); }
        | BinMultValue => { return emitBinMultValue[recursive]($v); }
        | BinDivValue => { return emitBinDivValue[recursive]($v); }
    }
}

recursive function emitBinKeyEqNoneValue(v: BinKeyEqNoneValue): CString {
    let vv = emitValue[recursive](v.exp);
    return CString::concat('(= ', vv, ' @Term-mk-None)');
}

recursive function emitBinKeyNotEqNoneValue(v: BinKeyNotEqNoneValue): CString {
    let vv = emitValue[recursive](v.exp);
    return CString::concat('(not (= ', vv, ' @Term-mk-None))');
}

recursive function emitBinKeySomeEqValue(v: BinKeySomeEqValue): CString {
    let eopt = emitValue[recursive](v.eoption);
    let val = emitValue[recursive](v.val);
    
    let ubx = SMTNameManager::generateStructTermFieldName(v.optiontype);
    let extract = SMTNameManager::generateStructFieldName(v.sometype, 'value');

    let ubxop = CString::concat('(', ubx, ' ', eopt, ')');
    let extractop = CString::concat('(', extract, ' ', ubxop, ')');
    let eqop = CString::concat('(= ', extractop, ' ', val, ')');

    let notnoneop = CString::concat('(not (= ', eopt, ' @Term-mk-None))');

    return CString::concat('(and ', notnoneop, ' ', eqop, ')');
}

recursive function emitBinKeyNotSomeEqValue(v: BinKeyNotSomeEqValue): CString {
    let eopt = emitValue[recursive](v.eoption);
    let val = emitValue[recursive](v.val);
    
    let ubx = SMTNameManager::generateStructTermFieldName(v.optiontype);
    let extract = SMTNameManager::generateStructFieldName(v.sometype, 'value');

    let ubxop = CString::concat('(', ubx, ' ', eopt, ')');
    let extractop = CString::concat('(', extract, ' ', ubxop, ')');
    let neqop = CString::concat('(not (= ', extractop, ' ', val, '))');

    let noneop = CString::concat('(= ', eopt, ' @Term-mk-None)');

    return CString::concat('(or ', noneop, ' ', neqop, ')');
}

recursive function emitBinKeyEqValue(v: BinKeyEqValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);
    return CString::concat('(= ', lhs, ' ', rhs, ')');
}

recursive function emitBinKeyNotEqValue(v: BinKeyNotEqValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);
    return CString::concat('(not (= ', lhs, ' ', rhs, '))');
}

recursive function emitBinaryKeyEqValue(v: BinaryKeyEqValue): CString {
    match(v)@ {
        BinKeyEqNoneValue => { return emitBinKeyEqNoneValue[recursive]($v); }
        | BinKeyNotEqNoneValue => { return emitBinKeyNotEqNoneValue[recursive]($v); }
        | BinKeySomeEqValue => { return emitBinKeySomeEqValue[recursive]($v); }
        | BinKeyNotSomeEqValue => { return emitBinKeyNotSomeEqValue[recursive]($v); }
        | BinKeyEqValue => { return emitBinKeyEqValue[recursive]($v); }
        | BinKeyNotEqValue => { return emitBinKeyNotEqValue[recursive]($v); }
    }
}

recursive function emitKeyLessValue(v: KeyLessValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);

    switch(v.kind) {
        KeyLessKind#KeyBool => {return CString::concat('(and (not ', lhs, ') ', rhs, ')'); }
        | KeyLessKind#KeyNumber => { return CString::concat('(< ', lhs, ' ', rhs, ')'); }
        | KeyLessKind#KeyString => { return CString::concat('(str.< ', lhs, ' ', rhs, ')'); }
        | KeyLessKind#KeyUUID => { abort; }
        | KeyLessKind#KeyHash => { abort; }
        | KeyLessKind#KeyDataInfo => { abort; }
    }
}

recursive function emitBinaryNumericCompareValue(v: BinaryNumericCompareValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);

    match(v)@ {
        NumericEqValue => { return CString::concat('(= ', lhs, ' ', rhs, ')'); }
        | NumericNeqValue => { return CString::concat('(not (= ', lhs, ' ', rhs, '))'); }
        | NumericLessValue => { return CString::concat('(< ', lhs, ' ', rhs, ')'); }
        | NumericLessEqValue => { return CString::concat('(<= ', lhs, ' ', rhs, ')'); }
        | NumericGreaterValue => { return CString::concat('(> ', lhs, ' ', rhs, ')'); }
        | NumericGreaterEqValue => { return CString::concat('(>= ', lhs, ' ', rhs, ')'); }
    }
}

recursive function emitBinLogicValue(v: BinLogicValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);

    match(v)@ {
        BinLogicAndValue => { return CString::concat('(and ', lhs, ' ', rhs, ')'); }
        | BinLogicOrValue => { return CString::concat('(or ', lhs, ' ', rhs, ')'); }
        | BinLogicImpliesValue => { return CString::concat('(=> ', lhs, ' ', rhs, ')'); }
        | BinLogicIFFValue => { return CString::concat('(= ', lhs, ' ', rhs, ')'); }
    }
}

recursive function emitMapEntryConstructorValue(v: MapEntryConstructorValue): CString {
    let consname = SMTNameManager::generateStructConstructorName(v.constype);
    let key = emitValue[recursive](v.kexp);
    let val = emitValue[recursive](v.vexp);

    let ops = CString::concat(' ', key, ' ', val);
    return CString::concat('(', consname, ops, ')');
}

recursive function emitIfValue(v: IfValue): CString {
    let tst = emitValue[recursive](v.iftest);
    let tv = emitValue[recursive](v.trueValue);
    let fv = emitValue[recursive](v.falseValue);

    let flows = CString::concat(' ', tv, ' ', fv);
    return CString::concat('(ite ', tst, flows, ')');
}

recursive function emitValue(v: Value): CString {
    match(v)@ {
        ConstantValue => { return emitConstantValue($v); }
        | AccessNamespaceConstantValue => { return emitAccessNamespaceConstantValue($v); }
        | AccessStaticFieldValue => { return emitAccessStaticFieldValue($v); }
        | AccessEnumValue => { return emitAccessEnumValue($v); }
        | AccessVariableValue => { return emitAccessVariableValue($v); }
        | AccessVariableRetypeStepValue => { return emitAccessVariableRetypeStepValue($v); }
        | AccessVariableRetypeMultiStepValue => { return emitAccessVariableRetypeMultiStepValue($v); }
        | TermifyValue => { return emitTermifyValue[recursive]($v); }
        | UntermifyValue => { return emitUntermifyValue[recursive]($v); }
        | LiteralTypeDeclValue => { return emitLiteralTypeDeclValue($v); }
        | ConstructorPrimaryValue => { return emitConstructorPrimaryValue[recursive]($v); }
        | LetValue => { return emitLetValue[recursive]($v); }
        | CallNamespaceFunctionValue => { return emitCallNamespaceFunctionValue[recursive]($v); }
        | CallTypeFunctionValue => { return emitCallTypeFunctionValue[recursive]($v); }
        | LogicActionAndValue => { return emitLogicActionAndValue[recursive]($v); }
        | LogicActionOrValue => { return emitLogicActionOrValue[recursive]($v); }
        | UnwrapTypeDeclToPrimitiveValue => { return emitUnwrapTypeDeclToPrimitiveValue($v); }
        | AccessFromNameResolvedValue => { return emitAccessFromNameResolvedValue[recursive]($v); }
        | IsNoneTestValue => { return emitIsNoneTestValue[recursive]($v); }
        | IsSomeTestValue => { return emitIsSomeTestValue[recursive]($v); }
        | IsTypeTestValue => { return emitIsTypeTestValue[recursive]($v); }
        | IsSubtypeTestValue => { return emitIsSubtypeTestValue[recursive]($v); }
        | ConvertOptionToSomeTValue => { return emitConvertOptionToSomeTValue[recursive]($v); }
        | ConvertResultToOkTValue => { return emitConvertResultToOkTValue[recursive]($v); }
        | ConvertResultToFailEValue => { return emitConvertResultToFailEValue[recursive]($v); }
        | MethodInvokeStaticValue => { return emitMethodInvokeStaticValue[recursive]($v); }
        | UnaryValue => { return emitUnaryValue[recursive]($v); }
        | BinaryArithValue => { return emitBinaryArithValue[recursive]($v); }
        | BinaryKeyEqValue => { return emitBinaryKeyEqValue[recursive]($v); }
        | KeyLessValue => { return emitKeyLessValue($v); }
        | BinaryNumericCompareValue => { return emitBinaryNumericCompareValue[recursive]($v); }
        | BinLogicValue => { return emitBinLogicValue[recursive]($v); }
        | MapEntryConstructorValue => { return emitMapEntryConstructorValue[recursive]($v); }
        | IfValue => { return emitIfValue[recursive]($v); }
    }
}

recursive function emitLambdaConstructor(v: LambdaConstructor): CString {
    let plist = v.invoke.params.map<CString>(fn(p) => CString::concat('(', p.pname, ' ', p.ptype.value, ')'));
    let pll = CString::concat('(', CString::joinAll(' ', plist), ')');

    let elambda = SMTEmitterEnv{v.invoke.resultType};
    let body = emitExpression[recursive](v.invoke.body, elambda);

    return CString::concat('(lambda ', pll, ' ', body, ')');
}

recursive function emitCallArgExpression(v: CallArgExpression): CString {
    match(v)@ {
        LambdaConstructor => { return emitLambdaConstructor[recursive]($v); }
        | Value => { return emitValue($v); }
    }
}

function emitValueExpression(v: ValueExpression): CString {
    return emitValue(v.value);
}

recursive function emitLambdaInvokeExpression(e: LambdaInvokeExpression): CString {
    if(e.args.isSingleElement()) {
        return CString::concat('(', e.name, ' ', emitCallArgExpression[recursive](e.args.single()), ')');
    }
    else {
        let cvals = e.args.map[recursive]<CString>(fn(x) => emitCallArgExpression[recursive](x, e));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(select ', e.name, ' ', argsl, ')');
    }
}

recursive function emitCallNamespaceFunctionExpression(e: CallNamespaceFunctionExpression): CString {
    let fname = SMTNameManager::generateNamespaceFunctionName(e.ns, e.name);
    if(e.args.empty()) {
        return fname;
    }
    else {
        let cvals = e.args.map[recursive]<CString>(fn(x) => emitCallArgExpression[recursive](x));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', fname, ' ', argsl, ')');
    }
}

recursive function emitCallTypeFunctionExpression(e: CallTypeFunctionExpression): CString {
    let fname = SMTNameManager::generateTypeFunctionName(e.resolvedType, e.name);
    if(e.args.empty()) {
        return fname;
    }
    else {
        let cvals = e.args.map[recursive]<CString>(fn(x) => emitCallArgExpression[recursive](x));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', fname, ' ', argsl, ')');
    }
}

recursive function emitMethodInvokeStaticExpression(e: MethodInvokeStaticExpression): CString {
    let fname = SMTNameManager::generateTypeFunctionName(e.resolvedTrgt, e.name);
    let rootv = emitValue(e.rootExp);

    let rpfx = CString::concat(fname, ' ', rootv);
    if(e.args.empty()) {
        return CString::concat('(', rpfx, ')');
    }
    else {
        let cvals = e.args.map[recursive]<CString>(fn(x) => emitCallArgExpression[recursive](x));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', rpfx, ' ', argsl, ')');
    }
}

function doLetIndent(enext: Expression): Bool {
    return !\/(enext?<LetExpression>, enext?<ResultErrorProcessExpression>);
}

recursive function emitLetExpression(e: LetExpression, evv: SMTEmitterEnv, indent: Option<CString>): CString {
    let vbind = CString::concat('((', e.vname, ' ', emitValue[recursive](e.value), '))');

    if(indent)@none {
        return CString::concat('(let ', vbind, ' ', emitExpression[recursive](e.body, evv, none), ')');
    }
    else {
        var iident = $indent;
        var tident = ')';
        if(doLetIndent(e.body)) {
            iident = CString::concat('    ', $indent);
            tident = CString::concat('%n;', $indent, ')');
        }

        let bbody = emitExpression[recursive](e.body, evv, some(iident));
        return CString::concat('(let ', vbind, '%n;', bbody, tident);
    }
}

recursive function emitIfExpression(e: IfExpression, evv: SMTEmitterEnv, indent: Option<CString>): CString {
    let tst = emitValue[recursive](e.iftest);
    let ttst = CString::concat('(ite ', tst);

    if(indent)@none {
        return CString::concat(ttst, ' ', emitExpression[recursive](e.trueExpression, evv, none), ' ', emitExpression[recursive](e.falseExpression, evv, none), ')');
    }
    else {
        let iident = CString::concat('    ', $indent);
        let tident = CString::concat('%n;', $indent, ')');

        let tv = emitExpression[recursive](e.trueExpression, evv, some(iident));
        let fv = emitExpression[recursive](e.falseExpression, evv, some(iident));

        return CString::concat(ttst, '%n;', tv, '%n;', fv, tident);
    }
}

function emitReturnExpression(e: ReturnValueExpression, evv: SMTEmitterEnv, indent: Option<CString>): CString {
    let vval = emitValue(e.val);

    if(evv.expectedResultType)<DirectResult> {
        return vval;
    }
    else {
        return CString::concat('(@Result-ok ', vval, ')');
    }
}

recursive function emitReturnPassThroughExpression(e: ReturnPassThroughExpression, evv: SMTEmitterEnv, indent: Option<CString>): CString {
    return emitExpression[recursive](e.val, evv, indent);
}

recursive function emitResultErrorProcessExpression(e: ResultErrorProcessExpression, evv: SMTEmitterEnv, indent: Option<CString>): CString {
    let vval = emitExpression[recursive](e.val, evv, none);

    let bbind = CString::concat('(let ((', e.tmpvar, ' ', vval, '))');
    let chk = ;
    %%(ite (not ((_ is (@Result-ok eev.expectedResult.tkeysr)) e.tmpvar)) e.tmpvar (let ((e.bindvar (@Result-value e.tmpvar)))
    %%  body
    %%)

    if(indent)@none {
        return 
    }
    else {
        return CString::concat('(let ((', e.tmpvar, ' ', vval, '))%n;', $indent);
    }
}

ntity ResultErrorProcessExpression provides Expression {
    field tmpvar: CString;
    field val: Expression;
}

%*
chktest test_emitLambdaConstructorSafeCallable(): Bool {
    let op = LambdaConstructorSafeCallable{
        List<InvokeParameterDecl>{InvokeParameterDecl{'a', 'Int'<TypeKey>}, InvokeParameterDecl{'b', 'Int'<TypeKey>}},
        DirectResult{'Int'<TypeKey>},
        ValueExpression{AccessVariableValue{'a'}}
    };
    return emitLambdaConstructorSafeCallable(op) === '(lambda ((a Int) (b Int)) a)';
}

chktest test_emitLambdaInvokeValue_one(): Bool {
    let op = LambdaInvokeValue{'f', List<Value>{LiteralSimpleValue{'Int'<TypeKey>, '0i'}}};
    return emitLambdaInvokeValue(op) === '(f 0)';
}

chktest test_emitLambdaInvokeValue_two(): Bool {
    let op = LambdaInvokeValue{'f', List<Value>{LiteralSimpleValue{'Int'<TypeKey>, '0i'}, LiteralSimpleValue{'Bool'<TypeKey>, 'true'}}};
    return emitLambdaInvokeValue(op) === '(select f 0 true)';
}
*%

recursive function emitExpression(e: Expression, evv: SMTEmitterEnv, indent: Option<CString>): CString {
    var eexp: CString;
    match(e)@ {
        ValueExpression => { eexp = emitValueExpression($e); }
        | LambdaInvokeExpression => { eexp = emitLambdaInvokeExpression[recursive]($e); }
        | CallNamespaceFunctionExpression => { eexp = emitCallNamespaceFunctionExpression[recursive]($e); }
        | CallTypeFunctionExpression => { eexp = emitCallTypeFunctionExpression[recursive]($e); }
        | MethodInvokeStaticExpression => { eexp = emitMethodInvokeStaticExpression[recursive]($e); }
        | LetExpression => { eexp = emitLetExpression[recursive]($e, eev, indent); }
        | IfExpression => { eexp = emitIfExpression[recursive]($e, eev, indent); }
        | ReturnValueExpression => { eexp = emitReturnExpression($e, evv, indent); }
        | ReturnPassThroughExpression => { eexp = emitReturnPassThroughExpression[recursive]($e, evv, indent); }

    }

    if(indent)@none {
        return eexp;
    }
    else {
        return CString::concat($indent, eexp);
    }
}

public function main(): Int {
    var asm: Assembly;

    return 0i;
}
