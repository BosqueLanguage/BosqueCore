declare namespace SMTEmitter;

entity SMTEmitterEnv {
    field expectedResultType: ResultType;
    field errtrgt: CString;
}

function cleanOptionalLeadingPlus(vstr: CString): CString {
    return if(vstr.startsWithString('+')) then vstr.removePrefixString('+') else vstr;
}

function tryGetConstFlowOperation(value: FlowOperation): Option<ConstantValue> {
    if(value)@<ReturnValueOperation> {
        if($vv = $value.val)@<ConstantValue> {
            return some($vv);
        }
    }

    return none;
}

function emitTaggedNumericType(nstr: CString, tag: CString): CString {
    return cleanOptionalLeadingPlus(nstr.removeSuffixString(tag));
}

function emitLiteralNoneValue(): CString {
    return 'none';
}

function emitLiteralSimpleValue(v: LiteralSimpleValue): CString {
    switch(v.vtype) {
        'Bool'<TypeKey>     => { return v.value; }
        | 'Nat'<TypeKey>    => { return emitTaggedNumericType(v.value, 'n'); }
        | 'Int'<TypeKey>    => { return emitTaggedNumericType(v.value, 'i'); }
        | 'BigNat'<TypeKey> => { return emitTaggedNumericType(v.value, 'N'); }
        | 'BigInt'<TypeKey> => { return emitTaggedNumericType(v.value, 'I'); }
        | 'Float'<TypeKey>  => { return emitTaggedNumericType(v.value, 'f'); }
    }
}

function emitLiteralCStringValue(v: LiteralCStringValue): CString {
    return CString::concat('"', v.value, '"');
}

function emitLiteralStringValue(v: LiteralStringValue): CString {
    return CString::concat('"', v.value, '"');
}

function emitLiteralCRegexValue(v: LiteralCRegexValue): CString {
    %%TODO
    abort;
}

function emitLiteralRegexValue(v: LiteralRegexValue): CString {
    %%TODO
    abort;
}

function emitConstantValue(v: ConstantValue): CString {
    match(v)@ {
        LiteralNoneValue => { return emitLiteralNoneValue(); }
        | LiteralSimpleValue => { return emitLiteralSimpleValue($v); }
        | LiteralCStringValue => { return emitLiteralCStringValue($v); }
        | LiteralStringValue => { return emitLiteralStringValue($v); }
        | LiteralCRegexValue => { return emitLiteralCRegexValue($v); }
        | LiteralRegexValue => { return emitLiteralRegexValue($v); }
    }
}

function emitAccessNamespaceConstantValue(v: AccessNamespaceConstantValue): CString {
    return CString::concat(v.ns.value, '@', v.name);
}

function emitAccessStaticFieldValue(v: AccessStaticFieldValue): CString {
    return CString::concat(v.tresolved.value, '@', v.name);
}

function emitAccessEnumValue(v: AccessEnumValue): CString {
    return CString::concat(v.enumtype.value, '$$', v.name);
}

function emitAccessVariableValue(v: AccessVariableValue): CString {
    return v.vname;
}

function emitAccessVariableRetypeStepValue(v: AccessVariableRetypeStepValue): CString {
    let access = SMTNameManager::generateStructFieldName(v.step.ttype,  v.step.specialfname);
    
    return CString::concat('(', access, ' ',  v.vname, ')');
}

function emitAccessVariableRetypeMultiStepValue(v: AccessVariableRetypeMultiStepValue): CString {
    %%TODO
    abort;
}

recursive function emitTermifyValue(v: TermifyValue): CString {
    let consname = SMTNameManager::generateStructTermConstructorName(v.fromtype);
    let vv = emitValue[recursive](v.value);
    
    return CString::concat('(', consname, ' ', vv, ')');
}

recursive function emitUntermifyValue(v: UntermifyValue): CString {
    let access = SMTNameManager::generateStructTermFieldName(v.fromtype);
    let vv = emitValue[recursive](v.value);
    
    return CString::concat('(', access, ' ', vv, ')');
}

function emitLiteralTypeDeclValue(v: LiteralTypeDeclValue): CString {
    let consname = SMTNameManager::generateStructConstructorName(v.constype);
    let vv = emitConstantValue(v.value);

    return CString::concat('(', consname, ' ', vv, ')');
}

recursive function emitConstructorListSingletonsValue(v: ConstructorListSingletonsValue): CString {
    let consname = SMTNameManager::generateStructConstructorName(v.constype);

    if(v.args.empty()) {
        let scons = CString::concat('(as seq.empty (Seq ', v.oftype.value, '))');
        return CString::concat('(', consname, ' ', scons, ')');
    }
    else {
        if(v.args.isSingleElement()) {
            let scons = CString::concat('(seq.unit ', emitValue[recursive](v.args.single()), ')');
            return CString::concat('(', consname, ' ', scons, ')');
        }
        else {
            let cvals = v.args.map[recursive]<CString>(fn(x) => CString::concat('(seq.unit ', emitValue[recursive](x), ')'));
            let argsl = CString::joinAll(' ', cvals);

            let scons = CString::concat('(seq.++ ', argsl, ')');
            return CString::concat('(', consname, ' ', scons, ')');
        }
    }
}

recursive function emitConstructorMapSingletonsValue(v: ConstructorMapSingletonsValue): CString {
    %%TODO
    abort;
}

recursive function emitConstructorPrimarySpecialConstructableValue(v: ConstructorPrimarySpecialConstructableValue): CString {
    let consname = SMTNameManager::generateStructConstructorName(v.constype);
    let vv = emitValue[recursive](v.arg);

    return CString::concat('(', consname, ' ', vv, ')');
}

recursive function emitConstructorTypeDeclValue(v: ConstructorTypeDeclValue): CString {
    let consname = SMTNameManager::generateStructConstructorName(v.constype);
    let vv = emitValue[recursive](v.arg);

    return CString::concat('(', consname, ' ', vv, ')');
}

recursive function emitConstructorStdValue(v: ConstructorStdValue): CString {
    let consname = SMTNameManager::generateStructConstructorName(v.constype);
    if(v.args.empty()) {
        return consname;
    }
    else {
        let cvals = v.args.map[recursive]<CString>(fn(x) => emitValue[recursive](x));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', consname, ' ', argsl, ')');
    }
}

recursive function emitConstructorPrimaryValue(v: ConstructorPrimaryValue): CString {
    match(v)@ {
        ConstructorListSingletonsValue => { return emitConstructorListSingletonsValue[recursive]($v); }
        | ConstructorMapSingletonsValue => { return emitConstructorMapSingletonsValue[recursive]($v); }
        | ConstructorPrimarySpecialConstructableValue => { return emitConstructorPrimarySpecialConstructableValue[recursive]($v); }
        | ConstructorTypeDeclValue => { return emitConstructorTypeDeclValue[recursive]($v); }
        | ConstructorStdValue => { return emitConstructorStdValue[recursive]($v); }
    }
}

recursive function emitConstructorEListValue(v: ConstructorEListValue): CString {
    let consname = SMTNameManager::generateStructConstructorName(v.constype);
    if(v.args.empty()) {
        return consname;
    }
    else {
        let cvals = v.args.map[recursive]<CString>(fn(x) => emitValue[recursive](x));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', consname, ' ', argsl, ')');
    }
}

recursive function emitCallNamespaceFunctionValue(v: CallNamespaceFunctionValue): CString {
    let fname = SMTNameManager::generateNamespaceFunctionName(v.ns, v.name);
    if(v.args.empty()) {
        return fname;
    }
    else {
        let cvals = v.args.map[recursive]<CString>(fn(x) => emitValue[recursive](x));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', fname, ' ', argsl, ')');
    }
}

recursive function emitCallTypeFunctionValue(v: CallTypeFunctionValue): CString {
    let fname = SMTNameManager::generateTypeFunctionName(v.resolvedType, v.name);
    if(v.args.empty()) {
        return fname;
    }
    else {
        let cvals = v.args.map[recursive]<CString>(fn(x) => emitValue[recursive](x));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', fname, ' ', argsl, ')');
    }
}

recursive function emitLogicActionAndValue(v: LogicActionAndValue): CString {
    let cvals = v.args.map[recursive]<CString>(fn(x) => emitValue[recursive](x));
    let argsl = CString::joinAll(' ', cvals);

    return CString::concat('(and ', argsl, ')');
}

recursive function emitLogicActionOrValue(v: LogicActionOrValue): CString {
    let cvals = v.args.map[recursive]<CString>(fn(x) => emitValue[recursive](x));
    let argsl = CString::joinAll(' ', cvals);

    return CString::concat('(or ', argsl, ')');
}

recursive function emitUnwrapTypeDeclToPrimitiveValue(v: UnwrapTypeDeclToPrimitiveValue): CString {
    let access = SMTNameManager::generateStructFieldName(v.decltype, 'value');
    return CString::concat('(', access, ' ', emitValue(v.arg), ')');
}

recursive function emitAccessFromNameResolvedValue(v: AccessFromNameResolvedValue): CString {
    let access = SMTNameManager::generateStructFieldName(v.ontype, v.name);
    return CString::concat('(', access, ' ', emitValue(v.arg), ')');
}

recursive function emitAccessFromIndexValue(v: AccessFromIndexValue): CString {
    let access = SMTNameManager::generateStructFieldName(v.elisttype, v.idx);
    return CString::concat('(', access, ' ', emitValue(v.arg), ')');
}

recursive function emitIsNoneTestValue(v: IsNoneTestValue): CString {
    let vv = emitValue[recursive](v.arg);
    return CString::concat('(= ', vv, ' @Term-mk-None)');
}

recursive function emitIsSomeTestValue(v: IsSomeTestValue): CString {
    let vv = emitValue[recursive](v.arg);
    return CString::concat('(not (= ', vv, ' @Term-mk-None))');
}

recursive function emitIsTypeTestValue(v: IsTypeTestValue): CString {
    let ccons = SMTNameManager::generateStructTermConstructorName(v.istype);
    let ttchk = CString::concat('(_ is ', ccons, ')');
    let vv = emitValue[recursive](v.arg);

    %%v is always in term repr to test against term constructor
    return CString::concat('(', ttchk, ' ', vv, ')');
}

recursive function emitIsSubtypeTestValue(v: IsSubtypeTestValue): CString {
    let subchk = SMTNameManager::generateTermSubtypeFunctionName(v.oftype);
    let vv = emitValue[recursive](v.arg);

    %%v is always in term repr to test against term constructor
    return CString::concat('(', subchk, ' ', vv, ')');
}

recursive function emitConvertOptionToSomeTValue(v: ConvertOptionToSomeTValue): CString {
    let ubx = SMTNameManager::generateStructTermFieldName(v.optiontype);
    let extract = SMTNameManager::generateStructFieldName(v.sometype, 'value');

    let ubxop = CString::concat('(', ubx, ' ', emitValue[recursive](v.arg), ')');
    return CString::concat('(', extract, ' ', ubxop, ')');
}

recursive function emitConvertResultToOkTValue(v: ConvertResultToOkTValue): CString {
    let ubx = SMTNameManager::generateStructTermFieldName(v.resulttype);
    let extract = SMTNameManager::generateStructFieldName(v.oktype, 'value');

    let ubxop = CString::concat('(', ubx, ' ', emitValue[recursive](v.arg), ')');
    return CString::concat('(', extract, ' ', ubxop, ')');
}

recursive function emitConvertResultToFailEValue(v: ConvertResultToFailEValue): CString {
    let ubx = SMTNameManager::generateStructTermFieldName(v.resulttype);
    let extract = SMTNameManager::generateStructFieldName(v.failtype, 'value');

    let ubxop = CString::concat('(', ubx, ' ', emitValue[recursive](v.arg), ')');
    return CString::concat('(', extract, ' ', ubxop, ')');
}

recursive function emitMethodInvokeStaticValue(v: MethodInvokeStaticValue): CString {
    let fname = SMTNameManager::generateTypeFunctionName(v.resolvedTrgt, v.name);
    let rootv = emitValue[recursive](v.rootExp);

    let rpfx = CString::concat(fname, ' ', rootv);
    if(v.args.empty()) {
        return CString::concat('(', rpfx, ')');
    }
    else {
        let cvals = v.args.map[recursive]<CString>(fn(x) => emitValue[recursive](x));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', rpfx, ' ', argsl, ')');
    }
}

recursive function emitPrefixNotOpValue(v: PrefixNotOpValue): CString {
    let vv = emitValue[recursive](v.exp);
    return CString::concat('(not ', vv, ')');
}

recursive function emitPrefixNegateOpValue(v: PrefixNegateOpValue): CString {
    let vv = emitValue[recursive](v.exp);
    return CString::concat('(- ', vv, ')');
}

recursive function emitPrefixPlusOpValue(v: PrefixPlusOpValue): CString {
    return emitValue[recursive](v.exp);
}

recursive function emitUnaryValue(v: UnaryValue): CString {
    match(v)@ {
        PrefixNotOpValue => { return emitPrefixNotOpValue[recursive]($v); }
        | PrefixNegateOpValue => { return emitPrefixNegateOpValue[recursive]($v); }
        | PrefixPlusOpValue => { return emitPrefixPlusOpValue[recursive]($v); }
    }
}

recursive function emitBinAddValue(v: BinAddValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);
    return CString::concat('(+ ', lhs, ' ', rhs, ')');
}

recursive function emitBinSubValue(v: BinSubValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);
    return CString::concat('(- ', lhs, ' ', rhs, ')');
}

recursive function emitBinMultValue(v: BinMultValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);

    if(v.useUninterpreted) {
        return CString::concat('(@NLA_I_mult ', lhs, ' ', rhs, ')');
    }
    else {
        return CString::concat('(* ', lhs, ' ', rhs, ')');
    }
}

recursive function emitBinDivValue(v: BinDivValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);
    
    if(v.useUninterpreted) {
        return CString::concat('(@NLA_I_div ', lhs, ' ', rhs, ')');
    }
    else {
        return CString::concat('(/ ', lhs, ' ', rhs, ')');
    }
}

recursive function emitBinaryArithValue(v: BinaryArithValue): CString {
    match(v)@ {
        BinAddValue => { return emitBinAddValue[recursive]($v); }
        | BinSubValue => { return emitBinSubValue[recursive]($v); }
        | BinMultValue => { return emitBinMultValue[recursive]($v); }
        | BinDivValue => { return emitBinDivValue[recursive]($v); }
    }
}

recursive function emitBinKeyEqNoneValue(v: BinKeyEqNoneValue): CString {
    let vv = emitValue[recursive](v.exp);
    return CString::concat('(= ', vv, ' @Term-mk-None)');
}

recursive function emitBinKeyNotEqNoneValue(v: BinKeyNotEqNoneValue): CString {
    let vv = emitValue[recursive](v.exp);
    return CString::concat('(not (= ', vv, ' @Term-mk-None))');
}

recursive function emitBinKeySomeEqValue(v: BinKeySomeEqValue): CString {
    let eopt = emitValue[recursive](v.eoption);
    let val = emitValue[recursive](v.val);
    
    let ubx = SMTNameManager::generateStructTermFieldName(v.optiontype);
    let extract = SMTNameManager::generateStructFieldName(v.sometype, 'value');

    let ubxop = CString::concat('(', ubx, ' ', eopt, ')');
    let extractop = CString::concat('(', extract, ' ', ubxop, ')');
    let eqop = CString::concat('(= ', extractop, ' ', val, ')');

    let notnoneop = CString::concat('(not (= ', eopt, ' @Term-mk-None))');

    return CString::concat('(and ', notnoneop, ' ', eqop, ')');
}

recursive function emitBinKeyNotSomeEqValue(v: BinKeyNotSomeEqValue): CString {
    let eopt = emitValue[recursive](v.eoption);
    let val = emitValue[recursive](v.val);
    
    let ubx = SMTNameManager::generateStructTermFieldName(v.optiontype);
    let extract = SMTNameManager::generateStructFieldName(v.sometype, 'value');

    let ubxop = CString::concat('(', ubx, ' ', eopt, ')');
    let extractop = CString::concat('(', extract, ' ', ubxop, ')');
    let neqop = CString::concat('(not (= ', extractop, ' ', val, '))');

    let noneop = CString::concat('(= ', eopt, ' @Term-mk-None)');

    return CString::concat('(or ', noneop, ' ', neqop, ')');
}

recursive function emitBinKeyEqValue(v: BinKeyEqValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);
    return CString::concat('(= ', lhs, ' ', rhs, ')');
}

recursive function emitBinKeyNotEqValue(v: BinKeyNotEqValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);
    return CString::concat('(not (= ', lhs, ' ', rhs, '))');
}

recursive function emitBinaryKeyEqValue(v: BinaryKeyEqValue): CString {
    match(v)@ {
        BinKeyEqNoneValue => { return emitBinKeyEqNoneValue[recursive]($v); }
        | BinKeyNotEqNoneValue => { return emitBinKeyNotEqNoneValue[recursive]($v); }
        | BinKeySomeEqValue => { return emitBinKeySomeEqValue[recursive]($v); }
        | BinKeyNotSomeEqValue => { return emitBinKeyNotSomeEqValue[recursive]($v); }
        | BinKeyEqValue => { return emitBinKeyEqValue[recursive]($v); }
        | BinKeyNotEqValue => { return emitBinKeyNotEqValue[recursive]($v); }
    }
}

recursive function emitKeyLessValue(v: KeyLessValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);

    switch(v.kind) {
        KeyLessKind#KeyBool => {return CString::concat('(and (not ', lhs, ') ', rhs, ')'); }
        | KeyLessKind#KeyNumber => { return CString::concat('(< ', lhs, ' ', rhs, ')'); }
        | KeyLessKind#KeyString => { return CString::concat('(str.< ', lhs, ' ', rhs, ')'); }
        | KeyLessKind#KeyUUID => { abort; }
        | KeyLessKind#KeyHash => { abort; }
        | KeyLessKind#KeyDataInfo => { abort; }
    }
}

recursive function emitBinaryNumericCompareValue(v: BinaryNumericCompareValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);

    match(v)@ {
        NumericEqValue => { return CString::concat('(= ', lhs, ' ', rhs, ')'); }
        | NumericNeqValue => { return CString::concat('(not (= ', lhs, ' ', rhs, '))'); }
        | NumericLessValue => { return CString::concat('(< ', lhs, ' ', rhs, ')'); }
        | NumericLessEqValue => { return CString::concat('(<= ', lhs, ' ', rhs, ')'); }
        | NumericGreaterValue => { return CString::concat('(> ', lhs, ' ', rhs, ')'); }
        | NumericGreaterEqValue => { return CString::concat('(>= ', lhs, ' ', rhs, ')'); }
    }
}

recursive function emitBinLogicValue(v: BinLogicValue): CString {
    let lhs = emitValue[recursive](v.lhs);
    let rhs = emitValue[recursive](v.rhs);

    match(v)@ {
        BinLogicAndValue => { return CString::concat('(and ', lhs, ' ', rhs, ')'); }
        | BinLogicOrValue => { return CString::concat('(or ', lhs, ' ', rhs, ')'); }
        | BinLogicImpliesValue => { return CString::concat('(=> ', lhs, ' ', rhs, ')'); }
        | BinLogicIFFValue => { return CString::concat('(= ', lhs, ' ', rhs, ')'); }
    }
}

recursive function emitMapEntryConstructorValue(v: MapEntryConstructorValue): CString {
    let consname = SMTNameManager::generateStructConstructorName(v.constype);
    let key = emitValue[recursive](v.kexp);
    let val = emitValue[recursive](v.vexp);

    let ops = CString::concat(' ', key, ' ', val);
    return CString::concat('(', consname, ops, ')');
}

recursive function emitIfValue(v: IfValue): CString {
    let tst = emitValue[recursive](v.iftest);
    let tv = emitValue[recursive](v.trueValue);
    let fv = emitValue[recursive](v.falseValue);

    let flows = CString::concat(' ', tv, ' ', fv);
    return CString::concat('(ite ', tst, flows, ')');
}

recursive function emitValue(v: Value): CString {
    match(v)@ {
        ConstantValue => { return emitConstantValue($v); }
        | AccessNamespaceConstantValue => { return emitAccessNamespaceConstantValue($v); }
        | AccessStaticFieldValue => { return emitAccessStaticFieldValue($v); }
        | AccessEnumValue => { return emitAccessEnumValue($v); }
        | AccessVariableValue => { return emitAccessVariableValue($v); }
        | AccessVariableRetypeStepValue => { return emitAccessVariableRetypeStepValue($v); }
        | AccessVariableRetypeMultiStepValue => { return emitAccessVariableRetypeMultiStepValue($v); }
        | TermifyValue => { return emitTermifyValue[recursive]($v); }
        | UntermifyValue => { return emitUntermifyValue[recursive]($v); }
        | LiteralTypeDeclValue => { return emitLiteralTypeDeclValue($v); }
        | ConstructorPrimaryValue => { return emitConstructorPrimaryValue[recursive]($v); }
        | ConstructorEListValue => { return emitConstructorEListValue[recursive]($v); }
        | CallNamespaceFunctionValue => { return emitCallNamespaceFunctionValue[recursive]($v); }
        | CallTypeFunctionValue => { return emitCallTypeFunctionValue[recursive]($v); }
        | LogicActionAndValue => { return emitLogicActionAndValue[recursive]($v); }
        | LogicActionOrValue => { return emitLogicActionOrValue[recursive]($v); }
        | UnwrapTypeDeclToPrimitiveValue => { return emitUnwrapTypeDeclToPrimitiveValue($v); }
        | AccessFromNameResolvedValue => { return emitAccessFromNameResolvedValue[recursive]($v); }
        | AccessFromIndexValue => { return emitAccessFromIndexValue[recursive]($v); }
        | IsNoneTestValue => { return emitIsNoneTestValue[recursive]($v); }
        | IsSomeTestValue => { return emitIsSomeTestValue[recursive]($v); }
        | IsTypeTestValue => { return emitIsTypeTestValue[recursive]($v); }
        | IsSubtypeTestValue => { return emitIsSubtypeTestValue[recursive]($v); }
        | ConvertOptionToSomeTValue => { return emitConvertOptionToSomeTValue[recursive]($v); }
        | ConvertResultToOkTValue => { return emitConvertResultToOkTValue[recursive]($v); }
        | ConvertResultToFailEValue => { return emitConvertResultToFailEValue[recursive]($v); }
        | MethodInvokeStaticValue => { return emitMethodInvokeStaticValue[recursive]($v); }
        | UnaryValue => { return emitUnaryValue[recursive]($v); }
        | BinaryArithValue => { return emitBinaryArithValue[recursive]($v); }
        | BinaryKeyEqValue => { return emitBinaryKeyEqValue[recursive]($v); }
        | KeyLessValue => { return emitKeyLessValue($v); }
        | BinaryNumericCompareValue => { return emitBinaryNumericCompareValue[recursive]($v); }
        | BinLogicValue => { return emitBinLogicValue[recursive]($v); }
        | MapEntryConstructorValue => { return emitMapEntryConstructorValue[recursive]($v); }
        | IfValue => { return emitIfValue[recursive]($v); }
    }
}

recursive function emitLambdaConstructor(v: LambdaConstructor, evv: SMTEmitterEnv): CString {
    let plist = v.params.map<CString>(fn(p) => CString::concat('(', p.pname, ' ', p.ptype.value, ')'));
    let pll = CString::concat('(', CString::joinAll(' ', plist), ')');

    let elambda = SMTEmitterEnv{v.resultType, evv.errtrgt};
    let body = emitFlowOperation[recursive](v.body, elambda, none);

    return CString::concat('(lambda ', pll, ' ', body, ')');
}

recursive function emitCallArgExpression(v: CallArgExpression, evv: SMTEmitterEnv): CString {
    match(v)@ {
        LambdaConstructor => { return emitLambdaConstructor[recursive]($v, evv); }
        | Value => { return emitValue($v); }
    }
}

recursive function emitLambdaInvokeExpression(e: LambdaInvokeExpression, evv: SMTEmitterEnv): CString {
    if(e.args.isSingleElement()) {
        return CString::concat('(', e.name, ' ', emitCallArgExpression[recursive](e.args.single(), evv), ')');
    }
    else {
        let cvals = e.args.map[recursive]<CString>(fn(x) => emitCallArgExpression[recursive](x, evv));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(select ', e.name, ' ', argsl, ')');
    }
}

recursive function emitCallNamespaceFunctionExpression(e: CallNamespaceFunctionExpression, evv: SMTEmitterEnv): CString {
    let fname = SMTNameManager::generateNamespaceFunctionName(e.ns, e.name);
    if(e.args.empty()) {
        return fname;
    }
    else {
        let cvals = e.args.map[recursive]<CString>(fn(x) => emitCallArgExpression[recursive](x, evv));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', fname, ' ', argsl, ')');
    }
}

recursive function emitCallTypeFunctionExpression(e: CallTypeFunctionExpression, evv: SMTEmitterEnv): CString {
    let fname = SMTNameManager::generateTypeFunctionName(e.resolvedType, e.name);
    if(e.args.empty()) {
        return fname;
    }
    else {
        let cvals = e.args.map[recursive]<CString>(fn(x) => emitCallArgExpression[recursive](x, evv));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', fname, ' ', argsl, ')');
    }
}

recursive function emitMethodInvokeStaticExpression(e: MethodInvokeStaticExpression, evv: SMTEmitterEnv): CString {
    let fname = SMTNameManager::generateTypeFunctionName(e.resolvedTrgt, e.name);
    let rootv = emitValue(e.rootExp);

    let rpfx = CString::concat(fname, ' ', rootv);
    if(e.args.empty()) {
        return CString::concat('(', rpfx, ')');
    }
    else {
        let cvals = e.args.map[recursive]<CString>(fn(x) => emitCallArgExpression[recursive](x, evv));
        let argsl = CString::joinAll(' ', cvals);

        return CString::concat('(', rpfx, ' ', argsl, ')');
    }
}

recursive function emitExpression(e: Expression, evv: SMTEmitterEnv): CString {
    match(e)@ {
        LambdaInvokeExpression => { return emitLambdaInvokeExpression[recursive]($e, evv); }
        | CallNamespaceFunctionExpression => { return emitCallNamespaceFunctionExpression[recursive]($e, evv); }
        | CallTypeFunctionExpression => { return emitCallTypeFunctionExpression[recursive]($e, evv); }
        | MethodInvokeStaticExpression => { return emitMethodInvokeStaticExpression[recursive]($e, evv); }
    }
}

function doLetIndent(enext: FlowOperation): Bool {
    return !\/(enext?<LetOperation>, enext?<ResultErrorProcessOperation>);
}

recursive function emitLetOperation(e: LetOperation, evv: SMTEmitterEnv, indent: Option<CString>): CString {
    let vbind = CString::concat('((', e.vname, ' ', emitValue(e.value), '))');

    if(indent)@none {
        return CString::concat('(let ', vbind, ' ', emitFlowOperation[recursive](e.body, evv, none), ')');
    }
    else {
        var iident = $indent;
        var tident = ')';
        if(doLetIndent(e.body)) {
            iident = CString::concat('    ', $indent);
            tident = CString::concat('%n;', $indent, ')');
        }

        let bbody = emitFlowOperation[recursive](e.body, evv, some(iident));
        return CString::concat('(let ', vbind, '%n;', bbody, tident);
    }
}

recursive function emitIfOperation(e: IfOperation, evv: SMTEmitterEnv, indent: Option<CString>): CString {
    let tst = emitValue[recursive](e.iftest);
    let ttst = CString::concat('(ite ', tst);

    if(indent)@none {
        return CString::concat(ttst, ' ', emitFlowOperation[recursive](e.trueExpression, evv, none), ' ', emitFlowOperation[recursive](e.falseExpression, evv, none), ')');
    }
    else {
        let iident = CString::concat('    ', $indent);
        let tident = CString::concat('%n;', $indent, ')');

        let tv = emitFlowOperation[recursive](e.trueExpression, evv, some(iident));
        let fv = emitFlowOperation[recursive](e.falseExpression, evv, some(iident));

        return CString::concat(ttst, '%n;', tv, '%n;', fv, tident);
    }
}

function emitReturnOperation(e: ReturnValueOperation, evv: SMTEmitterEnv): CString {
    let vval = emitValue(e.val);

    if(evv.expectedResultType)<DirectResult> {
        return vval;
    }
    else {
        return CString::concat('(@Result-ok ', vval, ')');
    }
}

recursive function emitResultErrorProcessOperation(e: ResultErrorProcessOperation, evv: SMTEmitterEnv, indent: Option<CString>): CString {
    let vval = emitExpression[recursive](e.val, evv);

    let bbind = CString::concat('(let ((', e.tmpvar, ' ', vval, '))');
    let chk = CString::concat('(ite (not ((_ is (@Result-ok ', evv.expectedResultType.rtype.value, ')) ', e.tmpvar, '))');
    let lop = CString::concat(e.tmpvar, ' (let ((', e.bindvar, ' (@Result-value ', e.tmpvar, ')))');

    let prefix = CString::concat(bbind, chk, lop);

    if(indent)@none {
        return CString::concat(prefix, ' ', emitFlowOperation[recursive](e.follow, evv, none), '))');
    }
    else {
        let iident = CString::concat('    ', $indent);
        let tident = CString::concat('%n;', $indent, '))');

        let body = emitFlowOperation[recursive](e.follow, evv, some(iident));
        return CString::concat(prefix, '%n;', body, tident);
    }
}

function emitAbortOperation(e: AbortOperation, evv: SMTEmitterEnv): CString {
    if(e.label === evv.errtrgt) {
        return '@Result-errtrgt';
    }
    else {
        return '@Result-errother';
    }
}

recursive function emitAssertOperation(e: AssertOperation, evv: SMTEmitterEnv, indent: Option<CString>): CString {
    let cond = emitValue(e.cond);
    let rop = if(e.label === evv.errtrgt) then '@Result-errtrgt' else '@Result-errother';

    let chk = CString::concat('(ite (not ', cond, ') ', rop, ' ');

    if(indent)@none {
        return CString::concat(chk, emitFlowOperation[recursive](e.follow, evv, none), ')');
    }
    else {
        let iident = CString::concat('    ', $indent);
        let tident = CString::concat('%n;', $indent, '))');

        let follow = emitFlowOperation[recursive](e.follow, evv, some(iident));
        return CString::concat(chk, '%n;', follow, tident);
    }
}

recursive function emitAssumeOperation(e: AssumeOperation, evv: SMTEmitterEnv, indent: Option<CString>): CString {
    let cond = emitValue(e.cond);

    let chk = CString::concat('(ite (not ', cond, ') @Result-errother ');

    if(indent)@none {
        return CString::concat(chk, emitFlowOperation[recursive](e.follow, evv, none), ')');
    }
    else {
        let iident = CString::concat('    ', $indent);
        let tident = CString::concat('%n;', $indent, '))');

        let follow = emitFlowOperation[recursive](e.follow, evv, some(iident));
        return CString::concat(chk, '%n;', follow, tident);
    }
}

recursive function emitFlowOperation(op: FlowOperation, evv: SMTEmitterEnv, indent: Option<CString>): CString {
    var eexp: CString;
    match(op)@ {
        LetOperation => { eexp = emitLetOperation[recursive]($op, evv, indent); }
        | IfOperation => { eexp = emitIfOperation[recursive]($op, evv, indent); }
        | ReturnValueOperation => { eexp = emitReturnOperation($op, evv); }
        | ResultErrorProcessOperation => { eexp = emitResultErrorProcessOperation[recursive]($op, evv, indent); }
        | AbortOperation => { eexp = emitAbortOperation($op, evv); }
        | AssertOperation => { eexp = emitAssertOperation[recursive]($op, evv, indent); }
        | AssumeOperation => { eexp = emitAssumeOperation[recursive]($op, evv, indent); }
    }

    if(indent)@none {
        return eexp;
    }
    else {
        return CString::concat($indent, eexp);
    }
}

function emitConstDeclarationHelper(cname: CString, vtype: ResultType, value: FlowOperation): CString {
    var optconstv = tryGetConstFlowOperation(value);
    var opteagerinit = '';
    if(optconstv)@some {
        opteagerinit = emitConstantValue($optconstv);
    }

    let cdecl = CString::concat('(declare-const ', cname, ' ', vtype.rtype.value, ')');

    if(!opteagerinit.empty()) {
        let cinit = CString::concat('(assert (= ', cname, ' ', opteagerinit, '))');
        return CString::join(' ', cdecl, cinit);
    }
    else {
        if(vtype)<DirectResult> {
            return cdecl;
        }
        else {
            let tname = CString::concat(cname, '-cc-temp');
            let ttype = CString::concat('(@Result ', vtype.rtype.value, ')');
            let icompute = CString::concat('(declare-const ', tname, ' ', vtype.rtype.value, ')');

            return CString::join(' ', cdecl, icompute);
        }
    }
}

function emitConstInitializerHelper(cname: CString, vtype: ResultType, value: FlowOperation): CString {
    let evv = SMTEmitterEnv{vtype, '[NO_CONST_ERRORS]'};
    let cval = emitFlowOperation(value, evv, none);

    if(vtype)<DirectResult> {
        return CString::concat('(assert (= ', cname, ' ', cval, '))');
    }
    else {
        let tname = CString::concat(cname, '-cc-temp');
        let tval = CString::concat('(assert (= ', tname, ' ', cval, '))');
        let chk = CString::concat('(assert ((_ is @Result-ok ', vtype.rtype.value, ') ', tname, '))');
        let asgn = CString::concat('(assert (= ', cname, ' (@Result-value', tname, ')))');

        return CString::join('%n;', tval, chk, asgn);
    }
}

%** Return the declarations and definitions as 2 seperate components **%
function emitConstInfo(nsconsts: List<NamespaceConstDecl>, typeconsts: List<ConstMemberDecl>): CString, CString {
    let nsconstdecls = nsconsts.map<CString>(fn(c) => {
        let cname = SMTNameManager::generateNamespaceConstName(c.ns, c.cname);
        return emitConstDeclarationHelper(cname, c.vtype, c.value);
    });
    let nsconstdecls_str = CString::joinAll('%n;', nsconstdecls);

    let tconstdecls = typeconsts.map<CString>(fn(c) => {
        let cname = SMTNameManager::generateTypeConstName(c.tkey, c.cname);
        return emitConstDeclarationHelper(cname, c.vtype, c.value);    
    });
    let tconstdecls_str = CString::joinAll('%n;', tconstdecls);
    
    var alldecls: CString;
    if(nsconstdecls_str.empty() && tconstdecls_str.empty()) {
        alldecls = '';
    }
    elif(nsconstdecls_str.empty()) {
        alldecls = tconstdecls_str;
    }
    elif(tconstdecls_str.empty()) {
        alldecls = nsconstdecls_str;
    }
    else {
        alldecls = CString::join('%n;', nsconstdecls_str, tconstdecls_str);
    }

    let nsconstinits = nsconsts
        .filter(pred(c) => tryGetConstFlowOperation(c.value)?none)
        .map<CString>(fn(c) => {
            let cname = SMTNameManager::generateNamespaceConstName(c.ns, c.cname);
            return emitConstInitializerHelper(cname, c.vtype, c.value);
        });
    let nsconstinits_str = CString::joinAll('%n;', nsconstinits);

    let tconstinits = typeconsts
        .filter(pred(c) => tryGetConstFlowOperation(c.value)?none)
        .map<CString>(fn(c) => {
            let cname = SMTNameManager::generateTypeConstName(c.tkey, c.cname);
            return emitConstInitializerHelper(cname, c.vtype, c.value);
        });
    let tconstinits_str = CString::joinAll('%n;', tconstinits);

    var allinits: CString;
    if(nsconstinits_str.empty() && tconstinits_str.empty()) {
        allinits = '';
    }
    elif(nsconstinits_str.empty()) {
        allinits = tconstinits_str;
    }
    elif(tconstinits_str.empty()) {
        allinits = nsconstinits_str;
    }
    else {
        allinits = CString::join('%n;', nsconstinits_str, tconstinits_str);
    }

    return alldecls, allinits;
}

function emitNamespacePredicateFunctionDecl(f: NamespacePredicateFunctionDecl): CString {
    let fname = SMTNameManager::generateNamespaceFunctionName(f.ns, f.name);
    let plist = f.params.map<CString>(fn(p) => CString::concat('(', p.pname, ' ', p.ptype.value, ')'));
    let pll = CString::concat('(', CString::joinAll(' ', plist), ')');

    return CString::concat('(declare-fun ', fname, ' ', pll, ' Bool)');
}

function emitNamespaceBuiltinFunctionDecl(f: NamespaceBuiltinFunctionDecl, trgterr: CString): CString {
    let fname = SMTNameManager::generateNamespaceFunctionName(f.ns, f.name);
    let plist = f.params.map<CString>(fn(p) => CString::concat('(', p.pname, ' ', p.ptype.value, ')'));
    let pll = CString::concat('(', CString::joinAll(' ', plist), ')');

    let psig = CString::concat('define-fun ', fname, ' ', pll, ' ');
    var body: CString;
    if(f.specialname === 'cstring_empty') {
        body = '(= s "")';
    }
    else {
        abort; %%Missing builtin function implementation
    }

    return CString::concat('(', psig, SMTNameManager::generateResultName(f.resultType), ' ', body, ')');
}

function emitNamespaceFunctionDecl(f: NamespaceFunctionDecl, trgterr: CString): CString {
    let fname = SMTNameManager::generateNamespaceFunctionName(f.ns, f.name);
    let plist = f.params.map<CString>(fn(p) => CString::concat('(', p.pname, ' ', p.ptype.value, ')'));
    let pll = CString::concat('(', CString::joinAll(' ', plist), ')');

    let psig = CString::concat('define-fun ', fname, ' ', pll, ' ');

    let evv = SMTEmitterEnv{f.resultType, trgterr};

    var body: CString;
    if($rb = f.body)@<ReturnValueOperation> {
        body = CString::concat('%n;    ', emitReturnOperation($rb, evv));
    }
    else {
        body = CString::concat('%n;', emitFlowOperation(f.body, evv, some('    ')));
    }

    return CString::concat('(', psig, SMTNameManager::generateResultName(f.resultType), body, '%n;)');
}

function emitAssembly(asm: Assembly): CString {
    let constdecls, constimpls = emitConstInfo(asm.nsconsts, asm.typeconsts);

%*
    field nspreds: List<NamespacePredicateFunctionDecl>;
    field nsbuiltins: List<NamespaceBuiltinFunctionDecl>;
    field nsfuncs: List<NamespaceFunctionDecl>;
    
    field typefuncs: List<TypeFunctionDecl>;
    
    field enums: List<EnumTypeDecl>;
    field typedecls: List<TypedeclTypeDecl>;
    field pentities: List<PrimitiveEntityTypeDecl>;
    field constructables: List<ConstructableTypeDecl>;
    field collections: List<CollectionTypeDecl>;
    field entities: List<EntityTypeDecl>;
    
    field pconcepts: List<PrimitiveConceptTypeDecl>;
    field concepts: List<ConceptTypeDecl>;

    field datatypes: List<DatatypeTypeDecl>;
    field datamembers: List<DatatypeMemberEntityTypeDecl>;
*%
    return 'ok';
}

public function main(): Int {
    var asm: Assembly;

    return 0i;
}
