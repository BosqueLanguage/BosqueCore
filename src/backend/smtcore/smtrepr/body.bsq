namespace SMTEmitter;

const varnameRE: CRegex = /'$'?[_a-z][a-zA-Z0-9_]*/c;
type VarName = CString of SMTEmitter::varnameRE;

concept CallArgExpression {
}

entity LambdaConstructor provides CallArgExpression {
    field params: List<InvokeParameterDecl>;
    field resultType: ResultType;

    field body: Expression;
}

concept Value provides CallArgExpression {
}

datatype ConstantValue provides Value
of
LiteralNoneValue { }
| LiteralSimpleValue {
    field vtype: TypeKey;
    field value: CString;
}
| LiteralCStringValue {
    field value: CString;
}
| LiteralStringValue {
    field value: CString;
}
| LiteralCRegexValue {
    field value: CString;
}
| LiteralRegexValue {
    field value: String;
}
;

entity AccessNamespaceConstantValue provides Value {
    field ns: NamespaceKey;
    field name: CString;
}

entity AccessStaticFieldValue provides Value {
    field tresolved: TypeKey;
    field name: CString;
}

entity AccessEnumValue provides Value {
    field enumtype: TypeKey;
    field name: CString;
}

entity AccessVariableValue provides Value {
    field vname: CString;
}

entity AccessRetypeStep {
    field ttype: TypeKey;
    field specialfname: CString;
}

entity AccessVariableRetypeStepValue provides Value {
    field vname: CString;
    field step: AccessRetypeStep;
}

entity AccessVariableRetypeMultiStepValue provides Value {
    field vname: CString;
    field steps: List<AccessRetypeStep>;
}

entity TermifyValue provides Value {
    field value: Value;
    field fromtype: TypeKey;
    field intotype: TypeKey;
}

entity UntermifyValue provides Value {
    field value: Value;
    field fromtype: TypeKey;
    field intotype: TypeKey;
}

entity LiteralTypeDeclValue provides Value {
    field value: ConstantValue;
    field constype: TypeKey;
}

%% Assume that checks are always inlined explicitly so that these are simple values
datatype ConstructorPrimaryValue provides Value using {
    field constype: TypeKey;
}
of 
ConstructorListSingletonsValue { 
    field oftype: TypeKey;
    field args: List<Value>;
}
| ConstructorMapSingletonsValue { 
    field oftype: TypeKey;
    field args: List<Value>;
}
| ConstructorPrimarySpecialConstructableValue { 
    field arg: Value;
}
| ConstructorTypeDeclValue { 
    field arg: Value;
}
| ConstructorStdValue { 
    field args: List<Value>;
}
;

entity LetValue provides Value {
    field vname: CString;
    field value: Value;
    field body: Value;
}

entity CallNamespaceFunctionValue provides Value {
    field ns: NamespaceKey;
    field name: CString;

    field args: List<Value>;
}

entity CallTypeFunctionValue provides Value {
    field resolvedType: TypeKey;
    field name: CString;
    
    field args: List<Value>;
}

entity LogicActionAndValue provides Value {
    field args: List<Value>;

    invariant $args.size() >= 2n;
}

entity LogicActionOrValue provides Value {
    field args: List<Value>;

    invariant $args.size() >= 2n;
}

entity UnwrapTypeDeclToPrimitiveValue provides Value {
    field decltype: TypeKey;
    field arg: Value;
}

entity AccessFromNameResolvedValue provides Value {
    field ontype: TypeKey;
    field name: CString;

    field arg: Value;
}

entity IsNoneTestValue provides Value {
    field arg: Value;
}

entity IsSomeTestValue provides Value {
    field arg: Value;
}

entity IsTypeTestValue provides Value {
    field istype: TypeKey;

    field arg: Value;
}

entity IsSubtypeTestValue provides Value {
    field oftype: TypeKey;

    field arg: Value;
}

entity ConvertOptionToSomeTValue provides Value {
    field optiontype: TypeKey;
    field sometype: TypeKey;

    field arg: Value;
}

entity ConvertResultToOkTValue provides Value {
    field resulttype: TypeKey;
    field oktype: TypeKey;

    field arg: Value;
}

entity ConvertResultToFailEValue provides Value {
    field resulttype: TypeKey;
    field failtype: TypeKey;

    field arg: Value;
}

entity MethodInvokeStaticValue provides Value {
    field resolvedTrgt: TypeKey;
    field name: CString;
    field rootExp: Value;
    field args: List<Value>;
}

datatype UnaryValue provides Value using {
    field exp: Value;
}
of
PrefixNotOpValue { }
| PrefixNegateOpValue { }
| PrefixPlusOpValue { }
;

datatype BinaryArithValue provides Value using {
    field lhs: Value;
    field rhs: Value;
}
of
BinAddValue { }
| BinSubValue { }
| BinMultValue { field useUninterpreted: Bool; }
| BinDivValue {field useUninterpreted: Bool; }
;

datatype BinaryKeyEqValue provides Value 
of
BinKeyEqNoneValue { 
    field exp: Value;
}
| BinKeyNotEqNoneValue { 
    field exp: Value;
}
| BinKeySomeEqValue {
    field optiontype: TypeKey;
    field sometype: TypeKey;

    field eoption: Value;
    field val: Value;
}
| BinKeyNotSomeEqValue {
    field optiontype: TypeKey;
    field sometype: TypeKey;
    
    field eoption: Value;
    field val: Value;
}
| BinKeyEqValue{
    field lhs: Value;
    field rhs: Value;
}
| BinKeyNotEqValue {
    field lhs: Value;
    field rhs: Value;
}
;

enum KeyLessKind {
    KeyBool,
    KeyNumber,
    KeyString,
    KeyUUID,
    KeyHash,
    KeyDataInfo
}

entity KeyLessValue provides Value {
    field kind: KeyLessKind;

    field lhs: Value;
    field rhs: Value;
}

datatype BinaryNumericCompareValue provides Value using {
    field lhs: Value;
    field rhs: Value;
}
of
NumericEqValue { }
| NumericNeqValue { }
| NumericLessValue { }
| NumericLessEqValue { }
| NumericGreaterValue { }
| NumericGreaterEqValue { }
;

datatype BinLogicValue provides Value using {
    field lhs: Value;
    field rhs: Value;
}
of
BinLogicAndValue { }
| BinLogicOrValue { }
| BinLogicImpliesValue { }
| BinLogicIFFValue { }
;

entity MapEntryConstructorValue provides Value {
    field constype: TypeKey;

    field kexp: Value;
    field vexp: Value;
}

entity IfValue provides Value {
    field iftest: Value;
    field trueValue: Value;
    field falseValue: Value;
}

concept Expression {
}

entity ValueExpression provides Expression {
    field value: Value;
}

entity LambdaInvokeExpression provides Expression {
    field name: CString;
    field args: List<CallArgExpression>;
    
    invariant !$args.empty();
}

entity CallNamespaceFunctionExpression provides Expression {
    field ns: NamespaceKey;
    field name: CString;

    field args: List<CallArgExpression>;
}

entity CallTypeFunctionExpression provides Expression {
    field resolvedType: TypeKey;
    field name: CString;
    
    field args: List<CallArgExpression>;
}

entity MethodInvokeStaticExpression provides Expression {
    field resolvedTrgt: TypeKey;
    field name: CString;
    field rootExp: Value;
    field args: List<CallArgExpression>;
}

entity LetExpression provides Expression {
    field vname: CString;
    field value: Value;
    field body: Expression;
}

entity IfExpression provides Expression {
    field iftest: Value;
    field trueExpression: Expression;
    field falseExpression: Expression;
}

entity ReturnValueExpression provides Expression {
    field val: Value;
}

entity ReturnPassThroughExpression provides Expression {
    field val: Expression;
}

entity ResultErrorProcessExpression provides Expression {
    field tmpvar: CString;
    field bindvar: CString;
    field val: Expression;
}

entity AbortExpression provides Expression {
    field label: CString;
}

entity AssertExpression provides Expression {
    field label: CString;
    field cond: Value;
}
