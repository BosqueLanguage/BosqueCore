namespace SMTAssembly;

concept Expression {
}

concept SafeExpression provides Expression {
}

datatype ConstantExpression provides SafeExpression
of
LiteralNoneExpression { }
| LiteralSimpleExpression {
    field vtype: TypeKey;
    field value: CString;
}
| LiteralCCharExpression {
    field value: CString;
}
| LiteralUnicodeCharExpression {
    field value: CString;
}
| LiteralCStringExpression {
    field value: CString;
}
| LiteralStringExpression {
    field value: CString;
}
| LiteralCRegexExpression {
    field value: CString;
}
| LiteralRegexExpression {
    field value: String;
}
;

entity AccessNamespaceConstantExpression provides SafeExpression {
    field ns: NamespaceKey;
    field name: CString;
}

entity AccessStaticFieldExpression provides SafeExpression {
    field tresolved: TypeKey;
    field name: CString;
}

entity AccessEnumExpression provides SafeExpression {
    field enumtype: TypeKey;
    field name: CString;
}

entity AccessVariableExpression provides SafeExpression {
    field vname: Identifier;
}

entity TermifyExpression provides SafeExpression {
    field value: SafeExpression;
    field fromtype: TypeKey;
    field intotype: TypeKey;
}

entity UntermifyExpression provides SafeExpression {
    field value: SafeExpression;
    field fromtype: TypeKey;
    field intotype: TypeKey;
}

entity LiteralTypeDeclExpression provides SafeExpression {
    field value: ConstantExpression;
    field constype: TypeKey;
}

%% Assume that checks are always inlined explicitly 
datatype ConstructorPrimaryExpression provides SafeExpression using {
    field constype: TypeKey;
}
of 
ConstructorListSingletonExpression { 
    field oftype: TypeKey;
    field args: List<SafeExpression>;
}
| ConstructorMapSingletonExpression { 
    field oftype: TypeKey;
    field args: List<SafeExpression>;
}
| ConstructorPrimarySpecialConstructableExpression { 
    field arg: SafeExpression;
}
| ConstructorTypeDeclExpression { 
    field arg: SafeExpression;
}
| ConstructorStdExpression { 
    field args: List<SafeExpression>;
}
;

entity ConstructorEListExpression provides SafeExpression {
    field elcons: CString;
    field args: List<SafeExpression>;
}

entity LambdaConstructor provides SafeExpression {
    field params: List<(|Identifier, TypeKey|)>;
    field resultType: ResultType;

    field body: Operation;
}

concept CallFunctionConcept {
    field invokeKey: InvokeKey;
}

entity CallFunctionSafeExpression provides CallFunctionConcept, SafeExpression { 
    field args: List<SafeExpression>;
} 

entity CallFunctionExpression provides CallFunctionConcept, Expression { 
    field args: List<SafeExpression>;
}

entity CallLambdaFunctionSafeExpression provides SafeExpression {
    field lambda: Identifier;
    field args: List<SafeExpression>;
}

entity CallLambdaFunctionExpression provides Expression {
    field lambda: Identifier;
    field args: List<SafeExpression>;
}

entity LogicActionAndExpression provides SafeExpression {
    field args: List<SafeExpression>;

    invariant $args.size() >= 2n;
}

entity LogicActionOrExpression provides SafeExpression {
    field args: List<SafeExpression>;

    invariant $args.size() >= 2n;
}

entity UnwrapTypeDeclToPrimitiveExpression provides SafeExpression {
    field decltype: TypeKey;
    field arg: SafeExpression;
}

entity AccessFromNameResolvedExpression provides SafeExpression {
    field ontype: TypeKey;
    field name: CString;

    field arg: SafeExpression;
}

entity AccessFromIndexExpression provides SafeExpression {
    field elisttype: TypeKey;
    field elistkey: CString;

    field arg: SafeExpression;
}

entity IsTypeTestExpression provides SafeExpression {
    field istype: TypeKey;

    field arg: SafeExpression;
}

entity IsSubtypeTestExpression provides SafeExpression {
    field oftype: TypeKey;

    field arg: SafeExpression;
}

entity ConvertOptionToSomeTExpression provides SafeExpression {
    field optiontype: TypeKey;
    field sometype: TypeKey;

    field arg: SafeExpression;
}

entity ConvertResultToOkTExpression provides SafeExpression {
    field resulttype: TypeKey;
    field oktype: TypeKey;

    field arg: SafeExpression;
}

entity ConvertResultToFailEExpression provides SafeExpression {
    field resulttype: TypeKey;
    field failtype: TypeKey;

    field arg: SafeExpression;
}

entity MethodInvokeStaticExpression provides Expression {
    field resolvedTrgt: InvokeKey;
    field name: CString;
    field rootExp: SafeExpression;
    field args: List<SafeExpression>;
}

datatype UnaryExpression provides SafeExpression using {
    field exp: SafeExpression;
}
of
PrefixNotOpExpression { }
| PrefixNegateOpExpression { }
| PrefixPlusOpExpression { }
;

datatype BinaryArithExpression provides SafeExpression using {
    field lhs: SafeExpression;
    field rhs: SafeExpression;
}
of
BinAddExpression { }
| BinSubExpression { }
| BinMultExpression { }
| BinDivExpression { }
;

datatype BinaryKeyEqExpression provides SafeExpression 
of
BinKeyEqNoneExpression { 
    field exp: SafeExpression;
}
| BinKeyNotEqNoneExpression { 
    field exp: SafeExpression;
}
| BinKeySomeEqExpression {
    field optiontype: TypeKey;
    field sometype: TypeKey;

    field eoption: SafeExpression;
    field val: SafeExpression;
}
| BinKeyNotSomeEqExpression {
    field optiontype: TypeKey;
    field sometype: TypeKey;
    
    field eoption: SafeExpression;
    field val: SafeExpression;
}
| BinKeyEqExpression{
    field lhs: SafeExpression;
    field rhs: SafeExpression;
}
| BinKeyNotEqExpression {
    field lhs: SafeExpression;
    field rhs: SafeExpression;
}
;

enum KeyLessKind {
    KeyBool,
    KeyNumber,
    KeyString,
    KeyUUID,
    KeyHash,
    KeyDataInfo
}

entity KeyLessExpression provides SafeExpression {
    field kind: KeyLessKind;

    field lhs: SafeExpression;
    field rhs: SafeExpression;
}

datatype BinaryNumericCompareExpression provides SafeExpression using {
    field lhs: SafeExpression;
    field rhs: SafeExpression;
}
of
NumericEqExpression { }
| NumericNeqExpression { }
| NumericLessExpression { }
| NumericLessEqExpression { }
| NumericGreaterExpression { }
| NumericGreaterEqExpression { }
;

entity MapEntryConstructorExpression provides SafeExpression {
    field constype: TypeKey;

    field kexp: SafeExpression;
    field vexp: SafeExpression;
}

entity LetSafeExpression provides SafeExpression {
    field vbind: Identifier;
    field value: SafeExpression;
    field inexp: SafeExpression;
}

entity IfThenElseSafeExpression provides SafeExpression {
    field iftest: SafeExpression;
    field trueexp: SafeExpression;
    field falseexp: SafeExpression;
}

entity AbortExpression provides Expression {
    field etype: TypeKey;
    field label: Nat;
}

entity AssertExpression provides Expression {
    field etype: TypeKey;
    field aexp: Expression; %%TODO: we are going to treat this as if an error is a failure on this assertion -- I like that but perhaps other options are better
    field label: Nat;
    
    field inexp: Expression;
}

entity AssertSetExpression provides Expression {
    field etype: TypeKey;
    field aset: List<(|Expression, Nat|)>; %%TODO: we are going to treat this as if an error is a failure on this assertion -- I like that but perhaps other options are better
    
    field inexp: Expression;

    invariant !$aset.empty();
}

entity UnwrapFromResultExpression provides SafeExpression {
    field etype: TypeKey;
    field varg: Identifier;
}

entity WrapIntoResultExpression provides SafeExpression {
    field etype: TypeKey;
    field arg: SafeExpression;
}

entity ConvertResultExpression provides Expression {
    field etype: TypeKey;
    field intotype: TypeKey;
    field arg: Expression;
}

entity IfThenElseExpression provides Expression {
    field iftest: SafeExpression;
    field trueexp: Expression;
    field falseexp: Expression;
}

entity LetGeneralExpression provides Expression {
    field vbind: Identifier;
    field value: SafeExpression;
    field inexp: Expression;
}

entity LetWErrorsExpression provides Expression {
    field errtype: TypeKey;
    field vvbind: List<(|Expression, TypeKey, Identifier|)>;
    field inexp: Expression;

    invariant !$vvbind.empty();
}

concept Operation {
}

entity ReturnOperation provides Operation {
    field exp: Expression;
}

entity AbortOperation provides Operation {
    field label: Nat;
}

entity AssertOperation provides Operation {
    field cond: Expression; %%TODO: we are going to treat this as if an error is a failure on this assertion -- I like that but perhaps other options are better
    field label: Nat;

    field inop: Operation;
}

entity AssumeOperation provides Operation {
    field cond: Expression; %%TODO: we are going to treat this as if an error is a failure on this assertion -- I like that but perhaps other options are better

    field inop: Operation;
}

entity LetOperation provides Operation {
    field vbind: Identifier;
    field value: SafeExpression;

    field inop: Operation;
}

entity LetOperationWError provides Operation {
    field vebind: Identifier;
    field vbind: Identifier;
    field vtype: TypeKey;
    field value: Expression;

    field inop: Operation;
}

entity LetWErrorsOperation provides Operation {
    field vvbind: List<(|Expression, TypeKey, Identifier|)>;
    field inop: Operation;

    invariant !$vvbind.empty();
}

entity IfThenElseOperation provides Operation {
    field iftest: SafeExpression;
    field trueop: Operation;
    field falseop: Operation;
}

entity Body {
    field op: Operation;
    field errors: List<ErrorInfo>;
}
