namespace SMTAssembly;

const varidentifierRE: CRegex = /'$'?[_a-z][a-zA-Z0-9_$-]*/c;
type VarIdentifier = CString of SMTAssembly::varidentifierRE;

concept CallArgExpression {
}

entity LambdaConstructor provides CallArgExpression {
    field params: List<InvokeParameterDecl>;
    field resultType: ResultType;

    field body: Body;
}

concept Expression provides CallArgExpression {
}

datatype ConstantExpression provides Expression
of
LiteralNoneExpression { }
| LiteralSimpleExpression {
    field vtype: TypeKey;
    field value: CString;
}
| LiteralCStringExpression {
    field value: CString;
}
| LiteralStringExpression {
    field value: CString;
}
| LiteralCRegexExpression {
    field value: CString;
}
| LiteralRegexExpression {
    field value: String;
}
;

entity AccessNamespaceConstantExpression provides Expression {
    field ns: NamespaceKey;
    field name: CString;
}

entity AccessStaticFieldExpression provides Expression {
    field tresolved: TypeKey;
    field name: CString;
}

entity AccessEnumExpression provides Expression {
    field enumtype: TypeKey;
    field name: CString;
}

entity AccessVariableExpression provides Expression {
    field vname: VarIdentifier;
}

entity TermifyExpression provides Expression {
    field value: Expression;
    field fromtype: TypeKey;
    field intotype: TypeKey;
}

entity UntermifyExpression provides Expression {
    field value: Expression;
    field fromtype: TypeKey;
    field intotype: TypeKey;
}

entity LiteralTypeDeclExpression provides Expression {
    field value: ConstantExpression;
    field constype: TypeKey;
}

%% Assume that checks are always inlined explicitly 
datatype ConstructorPrimaryExpression provides Expression using {
    field constype: TypeKey;
}
of 
ConstructorListSingletonsExpression { 
    field oftype: TypeKey;
    field args: List<Expression>;
}
| ConstructorMapSingletonsExpression { 
    field oftype: TypeKey;
    field args: List<Expression>;
}
| ConstructorPrimarySpecialConstructableExpression { 
    field arg: Expression;
}
| ConstructorTypeDeclExpression { 
    field arg: Expression;
}
| ConstructorStdExpression { 
    field args: List<Expression>;
}
;

entity ConstructorEListExpression provides Expression {
    field constype: TypeKey;
    field args: List<Expression>;
}

entity CallNamespaceFunctionExpression provides Expression {
    field ns: NamespaceKey;
    field name: CString;

    field args: List<Expression>;
}

entity CallTypeFunctionExpression provides Expression {
    field resolvedType: TypeKey;
    field name: CString;
    
    field args: List<Expression>;
}

entity LogicActionAndExpression provides Expression {
    field args: List<Expression>;

    invariant $args.size() >= 2n;
}

entity LogicActionOrExpression provides Expression {
    field args: List<Expression>;

    invariant $args.size() >= 2n;
}

entity LogicActionImpliesExpression provides Expression {
    field argl: Expression;
    field argr: Expression;
}

entity UnwrapTypeDeclToPrimitiveExpression provides Expression {
    field decltype: TypeKey;
    field arg: Expression;
}

entity AccessFromNameResolvedExpression provides Expression {
    field ontype: TypeKey;
    field name: CString;

    field arg: Expression;
}

entity AccessFromIndexExpression provides Expression {
    field elisttype: TypeKey;
    field idx: CString;

    field arg: Expression;
}

entity IsNoneTestExpression provides Expression {
    field arg: Expression;
}

entity IsSomeTestExpression provides Expression {
    field arg: Expression;
}

entity IsTypeTestExpression provides Expression {
    field istype: TypeKey;

    field arg: Expression;
}

entity IsSubtypeTestExpression provides Expression {
    field oftype: TypeKey;

    field arg: Expression;
}

entity ConvertOptionToSomeTExpression provides Expression {
    field optiontype: TypeKey;
    field sometype: TypeKey;

    field arg: Expression;
}

entity ConvertResultToOkTExpression provides Expression {
    field resulttype: TypeKey;
    field oktype: TypeKey;

    field arg: Expression;
}

entity ConvertResultToFailEExpression provides Expression {
    field resulttype: TypeKey;
    field failtype: TypeKey;

    field arg: Expression;
}

entity MethodInvokeStaticExpression provides Expression {
    field resolvedTrgt: TypeKey;
    field name: CString;
    field rootExp: Expression;
    field args: List<Expression>;
}

datatype UnaryExpression provides Expression using {
    field exp: Expression;
}
of
PrefixNotOpExpression { }
| PrefixNegateOpExpression { }
| PrefixPlusOpExpression { }
;

datatype BinaryArithExpression provides Expression using {
    field lhs: Expression;
    field rhs: Expression;
}
of
BinAddExpression { }
| BinSubExpression { }
| BinMultExpression { field useUninterpreted: Bool; }
| BinDivExpression {field useUninterpreted: Bool; }
;

datatype BinaryKeyEqExpression provides Expression 
of
BinKeyEqNoneExpression { 
    field exp: Expression;
}
| BinKeyNotEqNoneExpression { 
    field exp: Expression;
}
| BinKeySomeEqExpression {
    field optiontype: TypeKey;
    field sometype: TypeKey;

    field eoption: Expression;
    field val: Expression;
}
| BinKeyNotSomeEqExpression {
    field optiontype: TypeKey;
    field sometype: TypeKey;
    
    field eoption: Expression;
    field val: Expression;
}
| BinKeyEqExpression{
    field lhs: Expression;
    field rhs: Expression;
}
| BinKeyNotEqExpression {
    field lhs: Expression;
    field rhs: Expression;
}
;

enum KeyLessKind {
    KeyBool,
    KeyNumber,
    KeyString,
    KeyUUID,
    KeyHash,
    KeyDataInfo
}

entity KeyLessExpression provides Expression {
    field kind: KeyLessKind;

    field lhs: Expression;
    field rhs: Expression;
}

datatype BinaryNumericCompareExpression provides Expression using {
    field lhs: Expression;
    field rhs: Expression;
}
of
NumericEqExpression { }
| NumericNeqExpression { }
| NumericLessExpression { }
| NumericLessEqExpression { }
| NumericGreaterExpression { }
| NumericGreaterEqExpression { }
;

entity MapEntryConstructorExpression provides Expression {
    field constype: TypeKey;

    field kexp: Expression;
    field vexp: Expression;
}

entity LetExpression provides Expression {
    field vbind: VarIdentifier;
    field value: Expression;
    field body: Expression;
}

entity IfThenElseExpression provides Expression {
    field iftest: Expression;
    field trueexp: Expression;
    field falseexp: Expression;
}

entity AbortExpression provides Expression {
    field etype: TypeKey;
    field label: Nat;
}

entity UnwrapFromResultExpression provides Expression {
    field etype: TypeKey;
    field arg: Expression;
}

entity WrapIntoResultExpression provides Expression {
    field etype: TypeKey;
    field arg: Expression;
}

entity ConvertResultExpression provides Expression {
    field etype: TypeKey;
    field intotype: TypeKey;
    field arg: Expression;
}

entity LetWErrorsExpression provides Expression {
    field vvbind: List<(|Expression, VarIdentifier|)>;
    field inexp: Expression;

    invariant !$vvbind.empty();
}

concept Operation {
}

entity ReturnOperation provides Operation {
    field exp: Expression;
}

entity AbortOperation provides Operation {
    field label: Nat;
}

entity AssertOperation provides Operation {
    field cond: Expression;
    field label: Nat;
}

entity AssumeOperation provides Operation {
    field cond: Expression;
}

entity LetOperation provides Operation {
    field vbind: VarIdentifier;
    field value: Expression;
    field inops: List<Operation>;
}

entity LetOperationWError provides Operation {
    field vebind: VarIdentifier;
    field vbind: VarIdentifier;
    field value: Expression;
    field inops: List<Operation>;
}

entity IfThenElseOperation provides Operation {
    field iftest: Expression;
    field trueexp: List<Operation>;
    field falseexp: List<Operation>;
}

entity Body {
    field op: Operation;
    field errors: List<ErrorInfo>;
}
