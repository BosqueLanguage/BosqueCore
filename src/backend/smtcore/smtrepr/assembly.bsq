namespace SMTEmitter;

entity SourceInfo {
    field line: Nat;
    field column: Nat;
}

const namespaceComponentRE: CRegex = /[A-Z][_a-zA-Z0-9]+/c;
type NamespaceKey = CString of /(${SMTEmitter::namespaceComponentRE}'@')*${SMTEmitter::namespaceComponentRE}?/c; %%Core is implicit here

const basicNominalTypeKeyRE: CRegex = /(${SMTEmitter::namespaceComponentRE}'@')*[A-Z][_a-zA-Z0-9]+('$'.+'$')?/c; %%Core is implicit here
const specialScopedTypeKeyRE: CRegex = /('Result'|'APIResult')'$'.+'$''@'('Ok'|'Fail'|'Rejected'|'Failed'|'Error'|'Success')/c; %%Core is implicit here
const nominalTypeKeyRE: CRegex = /${SMTEmitter::basicNominalTypeKeyRE}|${SMTEmitter::specialScopedTypeKeyRE}/c; %%a bit rough but helps prevent mistakes
const elistTypeKeyRE: CRegex = /'@EList$'.*'$'/c;
const typeKeyRE: CRegex = /'@Term'|${SMTEmitter::elistTypeKeyRE}|${SMTEmitter::nominalTypeKeyRE}/c;

const lambdaTypeKeyRE: CRegex = /('fn'|'pred') '_$'.*'$_' '-' ${SMTEmitter::typeKeyRE}/c;
const paramTypeKeyRE: CRegex = /${SMTEmitter::typeKeyRE}|${lambdaTypeKeyRE}/c;

const resultTypeKeyRE: CRegex = /'(@Result '${SMTEmitter::typeKeyRE}')'/c;
const returnTypeKeyRE: CRegex = /'${SMTEmitter::typeKeyRE}|${SMTEmitter::resultTypeKeyRE}'/c;

type TypeKey = CString of SMTEmitter::typeKeyRE;
type ParamTypeKey = CString of SMTEmitter::paramTypeKeyRE;
type ReturnTypeKey = CString of SMTEmitter::resultTypeKeyRE;

datatype ResultType using {
    field rtype: TypeKey;
}
of
DirectResult { }
| OptionResult { }
%% TODO -- later add result types with ref (etc.) stuff
;

entity InvokeParameterDecl {
    field pname: CString;
    field ptype: ParamTypeKey;
}

entity NamespacePredicateFunctionDecl {
    field ns: NamespaceKey;
    field name: CString;

    field params: List<InvokeParameterDecl>;
    %%Always Bool
}

entity NamespaceBuiltinFunctionDecl {
    field ns: NamespaceKey;
    field name: CString;

    field params: List<InvokeParameterDecl>;
    field resultType: ResultType;

    field specialname: CString;
}

entity NamespaceFunctionDecl {
    field ns: NamespaceKey;
    field name: CString;

    field params: List<InvokeParameterDecl>;
    field resultType: ResultType;

    field body: FlowOperation;
}

entity TypeFunctionDecl {
    field tkey: TypeKey;
    field name: CString;

    field params: List<InvokeParameterDecl>;
    field resultType: ResultType;

    field body: FlowOperation;
}

entity ConstMemberDecl {
    field tkey: TypeKey;
    field cname: CString;

    field vtype: ResultType;
    field value: FlowOperation;
}

entity MemberFieldDecl {
    field tkey: TypeKey;
    field fname: CString;

    field declaredType: TypeKey;
}

entity FieldInfo {
    field fname: CString;
    field ftype: TypeKey;
}

entity EnumTypeDecl {
    field tkey: TypeKey;

    field members: List<CString>;
}

%%
%%No need for primitive type decls -- these are hardcoded
%%

enum TypeKind {
    Unknown,
    Simple,
    Inductive
}

entity TypedeclTypeDecl {
    field tkey: TypeKey;
    field typekind: TypeKind;

    field valuetype: TypeKey;
}

datatype ConstructableTypeDecl using {
    field tkey: TypeKey;
    field typekind: TypeKind;
}
of
OkTypeDecl { field ttype: TypeKey; field etype: TypeKey; }
| FailTypeDecl { field ttype: TypeKey; field etype: TypeKey; }
| APIRejectedTypeDecl { }
| APIFailedTypeDecl { }
| APIErrorTypeDecl { }
| APISuccessTypeDecl { }
| SomeTypeDecl { field vtype: TypeKey; }
| MapEntryTypeDecl { field ktype: TypeKey; field vtype: TypeKey; }
;

datatype CollectionTypeDecl using {
    field tkey: TypeKey;
    field typekind: TypeKind;

    field oftype: TypeKey;
}
of
ListTypeDecl { }
| StackTypeDecl { }
| QueueTypeDecl { }
| SetTypeDecl { }
| MapTypeDecl { }
;

entity EntityTypeDecl {
    field tkey: TypeKey;
    field typekind: TypeKind;

    field saturatedProvides: List<TypeKey>;
    field allfields: List<FieldInfo>;
}

datatype PrimitiveConceptTypeDecl using {
    field tkey: TypeKey;
}
of
OptionTypeDecl {
    field someType: TypeKey;
 }
| ResultTypeDecl {
    field okType: TypeKey;
    field failType: TypeKey;
}
| APIResultTypeDecl {
    field errorType: TypeKey;
    field failedType: TypeKey;
    field rejectedType: TypeKey;
    field successType: TypeKey;
}
;

entity ConceptTypeDecl {
    field tkey: TypeKey;

    field subtypes: List<TypeKey>;
}

entity DatatypeTypeDecl {
    field tkey: TypeKey;

    field subtypes: List<TypeKey>;
}

entity DatatypeMemberEntityTypeDecl {
    field tkey: TypeKey;

    field allfields: List<FieldInfo>;
}

%%
%% TODO: missing task related stuff
%%

entity NamespaceConstDecl {
    field ns: NamespaceKey;
    field cname: CString;

    field vtype: ResultType;
    field value: FlowOperation;
}

entity Assembly {
    field nsconsts: List<NamespaceConstDecl>;
    field typeconsts: List<ConstMemberDecl>;

    field nspreds: List<NamespacePredicateFunctionDecl>;
    field nsbuiltins: List<NamespaceBuiltinFunctionDecl>;
    field nsfuncs: List<NamespaceFunctionDecl>;
    
    field typefuncs: List<TypeFunctionDecl>;
    
    field enums: List<EnumTypeDecl>;


    field typedecls: List<TypedeclTypeDecl>;
    field constructables: List<ConstructableTypeDecl>;
    field collections: List<CollectionTypeDecl>;
    field entities: List<EntityTypeDecl>;
    
    field pconcepts: List<PrimitiveConceptTypeDecl>;
    field concepts: List<ConceptTypeDecl>;

    field datatypes: List<DatatypeTypeDecl>;
    field datamembers: List<DatatypeMemberEntityTypeDecl>;
}
