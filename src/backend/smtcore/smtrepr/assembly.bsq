declare namespace SMTAssembly;

entity SourceInfo {
    field line: Nat;
    field column: Nat;
}

const namespaceComponentRE: CRegex = /[A-Z][_a-zA-Z0-9]+/c;
const namespaceKeyRE: CRegex = /(${SMTAssembly::namespaceComponentRE}'@')*${SMTAssembly::namespaceComponentRE}/c; %%Core is implicit here
type NamespaceKey = CString of SMTAssembly::namespaceKeyRE; 

const basicNominalTypeKeyRE: CRegex = /(${SMTAssembly::namespaceComponentRE}'@')*[A-Z][_a-zA-Z0-9]+('<'.+'>')?/c; %%Core is implicit here
const specialScopedTypeKeyRE: CRegex = /('Result'|'APIResult')'<'.+'>''@'('Ok'|'Fail'|'Rejected'|'Failed'|'Error'|'Success')/c; %%Core is implicit here
const nominalTypeKeyRE: CRegex = /${SMTAssembly::basicNominalTypeKeyRE}|${SMTAssembly::specialScopedTypeKeyRE}/c; %%a bit rough but helps prevent mistakes
const elistTypeKeyRE: CRegex = /'@EList<'.*'>'/c;
const typeKeyRE: CRegex = /'@Term'|${SMTAssembly::elistTypeKeyRE}|${SMTAssembly::nominalTypeKeyRE}/c;

const lambdaTypeKeyRE: CRegex = /('@fn'|'@pred') '<'.*'>' '-' ${SMTAssembly::typeKeyRE}/c;
const paramTypeKeyRE: CRegex = /${SMTAssembly::typeKeyRE}|${lambdaTypeKeyRE}/c;

const resultTypeKeyRE: CRegex = /'(@Result '${SMTAssembly::typeKeyRE}')'/c;
const returnTypeKeyRE: CRegex = /'${SMTAssembly::typeKeyRE}|${SMTAssembly::resultTypeKeyRE}'/c;

type TypeKey = CString of SMTAssembly::typeKeyRE;
type ParamTypeKey = CString of SMTAssembly::paramTypeKeyRE;
type ReturnTypeKey = CString of SMTAssembly::resultTypeKeyRE;

const invokeKeyRE: CRegex = /(${SMTAssembly::namespaceKeyRE}|${SMTAssembly::nominalTypeKeyRE})'@'[_a-zA-Z0-9$-]+/c;
type InvokeKey = CString of SMTAssembly::invokeKeyRE;

datatype ResultType using {
    field rtype: TypeKey;
}
of
SafeResult { }
| ErrorResult { }
%% TODO -- later add inf on ref (etc.) stuff
;

entity ErrorInfo {
    field errCtr: Nat;
    field infile: String;
    field sinfo: SourceInfo;
    field ininvoke: Option<InvokeKey>;
}

entity InvokeParameterDecl {
    field pname: CString;
    field ptype: ParamTypeKey;
}

entity NamespacePredicateFunctionDecl {
    field ns: NamespaceKey;
    field name: CString;
    field invokeKey: InvokeKey;

    field params: List<InvokeParameterDecl>;
    %%Always Bool
}

entity NamespaceBuiltinFunctionDecl {
    field ns: NamespaceKey;
    field name: CString;
    field invokeKey: InvokeKey;

    field params: List<InvokeParameterDecl>;
    field resultType: ResultType;

    field specialname: CString;
}

entity NamespaceFunctionDecl {
    field ns: NamespaceKey;
    field name: CString;
    field invokeKey: InvokeKey;

    field params: List<InvokeParameterDecl>;
    field resultType: ResultType;

    field body: Body;
}

entity TypeFunctionDecl {
    field tkey: TypeKey;
    field name: CString;
    field invokeKey: InvokeKey;

    field params: List<InvokeParameterDecl>;
    field resultType: ResultType;

    field body: Body;
}

entity ConstMemberDecl {
    field tkey: TypeKey;
    field cname: CString;

    field vtype: ResultType;
    field value: Body;
}

entity MemberFieldDecl {
    field tkey: TypeKey;
    field fname: CString;

    field declaredType: TypeKey;
}

entity FieldInfo {
    field fname: CString;
    field ftype: TypeKey;
}

entity EnumTypeDecl {
    field tkey: TypeKey;

    field members: List<CString>;
}

%%
%%No need for primitive type decls -- these are hardcoded
%%

entity TypedeclTypeDecl {
    field tkey: TypeKey;
    field termable: Bool;

    field valuetype: TypeKey;
}

datatype ConstructableTypeDecl using {
    field tkey: TypeKey;
}
of
OkTypeDecl { field ttype: TypeKey; field etype: TypeKey; }
| FailTypeDecl { field ttype: TypeKey; field etype: TypeKey; }
| APIRejectedTypeDecl { }
| APIFailedTypeDecl { }
| APIErrorTypeDecl { }
| APISuccessTypeDecl { }
| SomeTypeDecl { field vtype: TypeKey; }
| MapEntryTypeDecl { field ktype: TypeKey; field vtype: TypeKey; }
;

datatype CollectionTypeDecl using {
    field tkey: TypeKey;
    field oftype: TypeKey;
}
of
ListTypeDecl { }
| StackTypeDecl { }
| QueueTypeDecl { }
| SetTypeDecl { }
| MapTypeDecl { }
;

entity EntityTypeDecl {
    field tkey: TypeKey;
    field termable: Bool;

    field allfields: List<FieldInfo>;
}

datatype PrimitiveConceptTypeDecl using {
    field tkey: TypeKey;
}
of
OptionTypeDecl {
    field someType: TypeKey;
 }
| ResultTypeDecl {
    field okType: TypeKey;
    field failType: TypeKey;
}
| APIResultTypeDecl {
    field errorType: TypeKey;
    field failedType: TypeKey;
    field rejectedType: TypeKey;
    field successType: TypeKey;
}
;

entity ConceptTypeDecl {
    field tkey: TypeKey;

    field subtypes: List<TypeKey>;
}

entity DatatypeTypeDecl {
    field tkey: TypeKey;

    field subtypes: List<TypeKey>;
}

entity DatatypeMemberEntityTypeDecl {
    field tkey: TypeKey;

    field allfields: List<FieldInfo>;
}

%%
%% TODO: missing task related stuff
%%

entity NamespaceConstDecl {
    field ns: NamespaceKey;
    field cname: CString;

    field vtype: ResultType;
    field value: Body;
}

entity Assembly {
    field nsconsts: List<NamespaceConstDecl>;
    field typeconsts: List<ConstMemberDecl>;

    field nspreds: List<NamespacePredicateFunctionDecl>;
    field nsbuiltins: List<NamespaceBuiltinFunctionDecl>;
    
    field nsfuncs: Map<InvokeKey, NamespaceFunctionDecl>;
    field typefuncs: Map<InvokeKey, TypeFunctionDecl>;
    
    field enums: List<EnumTypeDecl>;
    field typedecls: List<TypedeclTypeDecl>;
    field constructables: List<ConstructableTypeDecl>;
    field collections: List<CollectionTypeDecl>;

    field entities: List<EntityTypeDecl>;
    field datamembers: List<DatatypeMemberEntityTypeDecl>;

    field pconcepts: List<PrimitiveConceptTypeDecl>;
    field concepts: List<ConceptTypeDecl>;

    field datatypes: List<DatatypeTypeDecl>;

    field allfuncs: List<InvokeKey>;
    
    validate $allfuncs.allOf(pred(tk) => $nsfuncs.has(tk) || $typefuncs.has(tk));
}
