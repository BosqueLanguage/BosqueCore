declare namespace SMTAssembly;

entity SourceInfo {
    field line: Nat;
    field column: Nat;
}

const namespaceComponentRE: CRegex = /[A-Z][_a-zA-Z0-9]+/c;
const namespaceKeyRE: CRegex = /(${SMTAssembly::namespaceComponentRE}'@')*${SMTAssembly::namespaceComponentRE}/c; %%Core is implicit here
type NamespaceKey = CString of SMTAssembly::namespaceKeyRE; 

const basicNominalTypeKeyRE: CRegex = /(${SMTAssembly::namespaceComponentRE}'@')*[A-Z][_a-zA-Z0-9]+('<'.+'>')?/c; %%Core is implicit here
const specialScopedTypeKeyRE: CRegex = /('Result'|'APIResult')'<'.+'>''@'('Ok'|'Fail'|'Rejected'|'Failed'|'Error'|'Success')/c; %%Core is implicit here
const nominalTypeKeyRE: CRegex = /${SMTAssembly::basicNominalTypeKeyRE}|${SMTAssembly::specialScopedTypeKeyRE}/c; %%a bit rough but helps prevent mistakes
const elistTypeKeyRE: CRegex = /'(@EList-'[1-5] ' ' .*')'/c;

const lambdaTypeKeyRE: CRegex = /'(Array' .* ')'/c;
const typeKeyRE: CRegex = /'@Term'|${SMTAssembly::elistTypeKeyRE}|${SMTAssembly::nominalTypeKeyRE}|${SMTAssembly::lambdaTypeKeyRE}/c;
type TypeKey = CString of SMTAssembly::typeKeyRE;

const invokeKeyRE: CRegex = /(${SMTAssembly::namespaceKeyRE}|${SMTAssembly::nominalTypeKeyRE})'@'[_a-zA-Z0-9$-]+('<'.+'>')?/c;
type InvokeKey = CString of SMTAssembly::invokeKeyRE;

const identifierRE: CRegex = /[@a-zA-Z0-9_$-]*/c;
type Identifier = CString of SMTAssembly::identifierRE;

datatype ResultType using {
    field rtype: TypeKey;
}
of
SafeResult { }
| ErrorResult { }
%% TODO -- later add inf on ref (etc.) stuff
;

entity ErrorInfo {
    field errCtr: Nat;
    field infile: String;
    field sinfo: SourceInfo;
    field ininvoke: Option<CString>;
}

entity InvokeParameterDecl {
    field pname: Identifier;
    field ptype: TypeKey;
}

entity PredicateFunctionDecl {
    field invokeKey: InvokeKey;

    field params: List<InvokeParameterDecl>;
    %%Always Bool
}

entity BuiltinFunctionDecl {
    field invokeKey: InvokeKey;

    field params: List<InvokeParameterDecl>;
    field resultType: ResultType;

    field lgen: Option<List<(|Identifier, Bool|)>>;
    field specialname: CString;
    field binds: List<(|CString, TypeKey|)>;
}

entity FunctionDecl {
    field invokeKey: InvokeKey;

    field params: List<InvokeParameterDecl>;
    field resultType: ResultType;

    field body: Body;
}

entity ConstMemberDecl {
    field tkey: TypeKey;
    field cname: CString;

    field vtype: ResultType;
    field value: Body;
}

entity MemberFieldDecl {
    field tkey: TypeKey;
    field fname: CString;

    field declaredType: TypeKey;
}

entity FieldInfo {
    field fname: CString;
    field ftype: TypeKey;
}

entity EnumTypeDecl {
    field tkey: TypeKey;

    field members: List<CString>;
}

%%
%%No need for primitive type decls -- these are hardcoded
%%

entity TypedeclTypeDecl {
    field tkey: TypeKey;
    field termable: Bool;

    field valuetype: TypeKey;
}

datatype ConstructableTypeDecl using {
    field tkey: TypeKey;
}
of
OkTypeDecl { field ttype: TypeKey; field etype: TypeKey; }
| FailTypeDecl { field ttype: TypeKey; field etype: TypeKey; }
| APIRejectedTypeDecl { }
| APIFailedTypeDecl { }
| APIErrorTypeDecl { }
| APISuccessTypeDecl { }
| SomeTypeDecl { field vtype: TypeKey; }
| MapEntryTypeDecl { field ktype: TypeKey; field vtype: TypeKey; }
;

datatype CollectionTypeDecl using {
    field tkey: TypeKey;
    field oftype: TypeKey;
}
of
ListTypeDecl { }
| StackTypeDecl { }
| QueueTypeDecl { }
| SetTypeDecl { }
| MapTypeDecl { field ktype: TypeKey; field vtype: TypeKey; }
;

entity EntityTypeDecl {
    field tkey: TypeKey;
    field termable: Bool;

    field allfields: List<FieldInfo>;
}

datatype PrimitiveConceptTypeDecl using {
    field tkey: TypeKey;
}
of
OptionTypeDecl {
    field someType: TypeKey;
 }
| ResultTypeDecl {
    field okType: TypeKey;
    field failType: TypeKey;
}
| APIResultTypeDecl {
    field errorType: TypeKey;
    field failedType: TypeKey;
    field rejectedType: TypeKey;
    field successType: TypeKey;
}
;

entity ConceptTypeDecl {
    field tkey: TypeKey;

    field subtypes: List<TypeKey>;
}

entity DatatypeTypeDecl {
    field tkey: TypeKey;

    field subtypes: List<TypeKey>;
}

entity DatatypeMemberEntityTypeDecl {
    field tkey: TypeKey;

    field allfields: List<FieldInfo>;
}

%%
%% TODO: missing task related stuff
%%

entity NamespaceConstDecl {
    field ns: NamespaceKey;
    field cname: CString;

    field vtype: ResultType;
    field value: Body;
}

entity Assembly {
    field nsconsts: List<NamespaceConstDecl>;
    field typeconsts: List<ConstMemberDecl>;

    field nspreds: List<PredicateFunctionDecl>;
    field nsbuiltins: Map<InvokeKey, BuiltinFunctionDecl>;
    
    field funcs: Map<InvokeKey, FunctionDecl>;
    
    field enums: List<EnumTypeDecl>;
    field typedecls: List<TypedeclTypeDecl>;
    field constructables: List<ConstructableTypeDecl>;
    field collections: List<CollectionTypeDecl>;

    field entities: List<EntityTypeDecl>;
    field datamembers: List<DatatypeMemberEntityTypeDecl>;

    field pconcepts: List<PrimitiveConceptTypeDecl>;
    field concepts: List<ConceptTypeDecl>;

    field datatypes: List<DatatypeTypeDecl>;

    field orderedfuncs: List<InvokeKey>;
}
