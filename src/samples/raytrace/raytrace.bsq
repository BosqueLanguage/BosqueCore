declare namespace Main;

const checkerBoard: Surface = Surface{Color{0.02f, 0.0f, 0.1f}, Color{1.0f, 1.0f, 1.0f}, 0.5f, 150.0f};

const shiny: Surface = Surface{Color{1.0f, 1.0f, 1.0f}, Color{0.5f, 0.5f, 0.5f}, 0.7f, 250.0f};

const matteShiny: Surface = Surface{Color{1.0f, 1.0f, 1.0f}, Color{0.25f, 0.25f, 0.25f}, 0.7f, 250.0f};

entity RayTracer{
    const maxDepth: Int = 5i;

    function createDefaultScene(): Scene {
        let things = List<SceneObject>{
            Sphere{Main::matteShiny, Vector{-0.5f, 1.0f, 1.5f}, 0.5f},
            Sphere{Main::shiny, Vector{0.0f, 1.0f, -0.25f}, 1.0f},
            Plane{Main::checkerBoard, Vector{0.0f, 1.0f, 0.0f}, 0.0f}
        };

        let lights = List<Light>{
            Light{Vector{-2.0f, 2.5f, 0.0f}, Color{0.5f, 0.45f, 0.41f}},
            Light{Vector{2.0f, 4.5f, 2.0f}, Color{0.99f, 0.95f, 0.8f}}
        };

        let camera = Camera::create(Vector{2.75f, 2.0f, 3.75f}, Vector{-0.6f, 0.5f, 0.0f});

        return Scene{things, lights, camera};
    }

    function createParameterScene(things: List<SceneObject>): Scene {
        let lights = List<Light>{
            Light{Vector{-2.0f, 2.5f, 0.0f}, Color{0.5f, 0.45f, 0.41f}},
            Light{Vector{2.0f, 4.5f, 2.0f}, Color{0.99f, 0.95f, 0.8f}}
        };

        let camera = Camera::create(Vector{2.75f, 2.0f, 3.75f}, Vector{-0.6f, 0.5f, 0.0f});

        return Scene{things, lights, camera};
    }

    method minIntersection(ray: Ray, scene: Scene): Option<ISect> {
        return scene.things.reduce<Option<ISect>>(none, fn(min, obj) => {
            let isect = obj.intersect(ray);
            if(isect)@none {
                return min;
            }
            else {
                if(min)@none {
                    return isect;
                }
                else {
                    if($min.dist > $isect.dist) {
                        return isect;
                    }
                    else {
                        return min;
                    }
                }
            }
        });
    }

    method testRay(ray: Ray, scene: Scene): Float {
        let isect = this.minIntersection(ray, scene);
        if(isect)@none {
            return 0.0f;
        }
        else {
            return $isect.dist;
        }
    }

    method traceRay(ray: Ray, scene: Scene, depth: Int): Color {
        let isect = this.minIntersection(ray, scene);
        if(isect)@none {
            return Color::background;
        }
        else {
            return this.shade($isect, scene, depth);
        }
    }

    method getNaturalColor(thing: SceneObject, pos: Vector, norm: Vector, rd: Vector, scene: Scene): Color {
        return scene.lights.reduce[recursive]<Color>(Color{0.0f, 0.0f, 0.0f}, recursive fn(ret, light) => {
            let ldis = Vector::minus(light.pos, pos);
            let livec = Vector::norm(ldis);
            let neatIsect = this.testRay(Ray{pos, livec}, scene);
            let isInShadow = !((neatIsect > Vector::mag(ldis)) || (neatIsect == 0.0f));
            if(isInShadow) {
                return ret;
            }
            else {
                let illum = Vector::dot(livec, norm);
                let lcolor = if(illum > 0.0f) then Color::times(illum, light.color) else Color{0.0f, 0.0f, 0.0f};
                let specular = Vector::dot(livec, Vector::norm(rd));
                let scolor = if(specular > 0.0f) then Color::times(Float::pow(specular, thing.surface.roughness), light.color) else Color{0.0f, 0.0f, 0.0f};
                return Color::plus(ret, Color::plus(Color::ctimes(thing.surface.diffuse, lcolor), Color::ctimes(thing.surface.specular, scolor)));
            }
        });
    }

    method getReflectionColor(thing: SceneObject, pos: Vector, norm: Vector, rd: Vector, scene: Scene, depth: Int): Color {
        return Color::times(thing.surface.reflect, this.traceRay(Ray{pos, rd}, scene, depth + 1i));
    }

    method shade(isect: ISect, scene: Scene, depth: Int): Color {
        let d = isect.ray.dir;
        let pos = Vector::plus(Vector::times(isect.dist, isect.ray.dir), isect.ray.start);
        let normal = isect.thing.normal(pos);
        let reflectDir = Vector::minus(d, Vector::times(2.0f * Vector::dot(normal, d), normal));
        let ret = Color::plus(Color::defaultColor, this.getNaturalColor(isect.thing, pos, normal, reflectDir, scene));

        if(depth >= RayTracer::maxDepth){
            return Color::plus(ret, Color{0.5f, 0.5f, 0.5f});
        }

        return Color::plus(ret, this.getReflectionColor(isect.thing, Vector::plus(pos, Vector::times(0.001f, reflectDir)), normal, reflectDir, scene, depth));
    }
}

entity Vector {
    field x: Float;
    field y: Float;
    field z: Float;
    
    function times(n: Float, v: Vector): Vector {
        return Vector{v.x * n, v.y * n, v.z * n};
    }
    
    function minus(v1: Vector, v2: Vector): Vector {
        return Vector{v1.x - v2.x, v1.y - v2.y, v1.z - v2.z};
    }
    
    function plus(v1: Vector, v2: Vector): Vector {
        return Vector{v1.x + v2.x, v1.y + v2.y, v1.z + v2.z};
    }
    
    function dot(v1: Vector, v2: Vector): Float {
        return (v1.x * v2.x) + (v1.y * v2.y) + (v1.z * v2.z);
    }
    
    function mag(v: Vector): Float { 
        return Float::sqrt(Vector::dot(v, v)); 
    }
    
    function norm(v: Vector): Vector {
        let mag = Vector::mag(v);
        let div = if(mag == 0.0f) then 1000000000.0f else (1.0f // mag);
        return Vector::times(div, v);
    }

    function cross(v1: Vector, v2: Vector): Vector {
        return Vector{ ((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.y) - (v1.y * v2.x)) };
    }

    function equals(v1: Vector, v2: Vector): Bool {
        return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z);
    }
}

entity Color {
    field r: Float;
    field g: Float;
    field b: Float;

    function times(n: Float, v: Color): Color {
        return Color{n * v.r, n * v.g, n * v.b};
    }

    function ctimes(v1: Color, v2: Color): Color {
        return Color{v1.r * v2.r, v1.g * v2.g, v1.b * v2.b};
    }

    function plus(v1: Color, v2: Color): Color {
        return Color{v1.r + v2.r, v1.g + v2.g, v1.b + v2.b};
    }

    function minus(v1: Color, v2: Color): Color {
        return Color{v1.r - v2.r, v1.g - v2.g, v1.b - v2.b};
    }

    const background: Color = Color{0.0f, 0.0f, 0.0f};
    const defaultColor: Color = Color{0.0f, 0.0f, 0.0f};

    function legalize(d: Float): Float {
        return if(d > 1.0f) then 1.0f else d;
    }
}

entity Ray {
    field start: Vector;
    field dir: Vector;
}

entity ISect {
    field thing: SceneObject;
    field ray: Ray;
    field dist: Float;
}

entity Surface {
    field diffuse: Color;
    field specular: Color;
    field reflect: Float;
    field roughness: Float;
}

entity Camera {
    field pos: Vector;
    field forward: Vector;
    field up: Vector;
    field right: Vector;

    function create(pos: Vector, lookAt: Vector): Camera {
        let forward = Vector::norm(Vector::minus(lookAt, pos));
        let down = Vector{0.0f, -1.0f, 0.0f};
        let right = Vector::times(1.5f, Vector::norm(Vector::cross(forward, down)));
        let up = Vector::times(1.5f, Vector::norm(Vector::cross(forward, right)));

        return Camera{pos, forward, up, right};
    }
}

entity Light {
    field pos: Vector;
    field color: Color;
}

concept SceneObject {
    field surface: Surface;
    
    method intersect(ray: Ray): Option<ISect> {
        if(this)@<Sphere> {
            return $this.intersectSphere(ray);
        }
        else {
            return this@<Plane>.intersectPlane(ray);
        }
    }

    method normal(pos: Vector): Vector {
        if(this)@<Sphere> {
            return Vector::norm(Vector::minus(pos, $this.center));
        }
        else {
            return this@<Plane>.norm;
        }
    }
}

entity Sphere provides SceneObject {
    field center: Vector;
    field radius: Float;

    method intersectSphere(ray: Ray): Option<ISect> {
        let eo = Vector::minus(this.center, ray.start);
        let v = Vector::dot(eo, ray.dir);

        var dist: Float;
        if(v < 0.0f)
        {
            dist = 0.0f;
        }
        else
        {
            let disc = Float::square(this.radius) - (Vector::dot(eo, eo) - Float::square(v));
            dist = if(disc < 0.0f) then 0.0f else (v - Float::sqrt(disc));
        }

        if(dist == 0.0f) {
            return none;
        }
        else {
            return some(ISect{this, ray, dist});
        }
    }
}

entity Plane provides SceneObject {
    field norm: Vector;
    field offset: Float;

    method intersectPlane(ray: Ray): Option<ISect> {
        let denom = Vector::dot(this.norm, ray.dir);

        if(denom > 0.0f) {
            return none;
        }
        else {
            return some(ISect{this, ray, (Vector::dot(this.norm, ray.start) + this.offset) // (-1.0f * denom)});
        }
    }
}

entity Scene {
    field things: List<SceneObject>;
    field lights: List<Light>;
    field camera: Camera;
}

public function render_fixed(): Color {
    let sc = RayTracer::createDefaultScene();

    return RayTracer{}.traceRay(Ray{sc.camera.pos, Vector::norm(Vector::minus(sc.camera.forward, sc.camera.pos))}, sc, 0i);
}

public function render_params(things: List<SceneObject>): Color {
    let sc = RayTracer::createParameterScene(things);

    return RayTracer{}.traceRay(Ray{sc.camera.pos, Vector::norm(Vector::minus(sc.camera.forward, sc.camera.pos))}, sc, 0i);
}
