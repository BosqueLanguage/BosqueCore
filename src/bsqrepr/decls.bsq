declare namespace IRDecl;

const min_safe_int: Int = -4611686018427387903i;
const max_safe_int: Int = 4611686018427387903i;

%%negation and conversion are always safe
const max_safe_nat: Nat = 4611686018427387903n;

const namespaceComponentRE: CRegex = /[A-Z][_a-zA-Z0-9]+/c;
type NamespaceComponent = CString of IRDecl::namespaceComponentRE;
type FullyQualifiedNamespaceKey = CString of /(${IRDecl::namespaceComponentRE}'::')*${IRDecl::namespaceComponentRE}?/c; %%Core is implicit here

entity FullyQualifiedNamespace {
    field key: FullyQualifiedNamespaceKey;
    field scopes: List<NamespaceComponent>; %%Core is explicit here
}

const templateTypeKeyRE: CRegex = /[A-Z]/c;
const nominalTypeKeyBaseRE: CRegex = /(${IRDecl::namespaceComponentRE}'::')*[A-Z][_a-zA-Z0-9]+/c; %%Core is implicit here
const specialScopedTypeRE: CRegex = /('Result'|'APIResult')'<'.+'>''::'('Ok'|'Fail'|'Rejected'|'Failed'|'Error'|'Success')/c; %%Core is implicit here
const nominalTypeKeyRE: CRegex = /(${IRDecl::nominalTypeKeyBaseRE}|${IRDecl::specialScopedTypeBaseRE})('<'.+'>')?/c; %%a bit rough but helps prevent mistakes
const elistTypeKeyRE: CRegex = /'(|'.*'|)'/c;

const baseTypeKeyRE: CRegex = /${IRDecl::templateTypeKeyRE}|${IRDecl::specialScopedTypeRE}|${IRDecl::nominalTypeKeyRE}|${IRDecl::elistTypeKeyRE}/c;
const lambdaTypeKeyRE: CRegex = /('fn'|'pred') '('.*')' '->' ${IRDecl::baseTypeKeyRE}/c;
const typeKeyRE: CRegex = /${IRDecl::baseTypeKeyRE}|${IRDecl::lambdaTypeKeyRE}/c; 

type TemplateName = CString of IRDecl::templateTypeKeyRE;
type TypeKey = CString of IRDecl::typeKeyRE;

entity SourceInfo {
    field line: Nat;
    field column: Nat;
    field pos: Nat;
    field span: Nat;
}

enum BuildLevel {
    BuildSpec,
    BuildDebug,
    BuildTest,
    BuildRrelease,
    BuildSafety
}

enum RecursiveAnnotation {
    RecursiveTag,
    RecursiveNoTag,
    RecursiveCondTag
}
