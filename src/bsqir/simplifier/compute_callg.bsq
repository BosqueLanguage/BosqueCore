namespace BSQAssembly;

entity CallGraph {
    field callgraph: Map<InvokeKey, List<InvokeKey>>;
    field sccs: List<List<InvokeKey>>;
    field topoorder: List<InvokeKey>;

    method isInSCC(inv: InvokeKey): Bool {
        return this.sccs.someOf(pred(scc) => scc.contains(inv));
    }
}

entity CallGraphBuilder {

    %%TODO: implement the walk of the body to find all the calls

    %%TODO: need to have flag that indicates what to do with consts -- eager? lazy? ignored?

    function gatherInvariantFunctions(assembly: Assembly): List<InvokeKey> {
        let cinvs = assembly.allconcretetypes
            .map<AbstractNominalTypeDecl>(fn(tkey) => assembly.lookupNominalTypeDeclaration(tkey))
            .filter(pred(tdecl) => !tdecl.invariants.empty())
            .map<List<InvokeKey>>(fn(tdecl) => tdecl.invariants.map<InvokeKey>(fn(idecl) => idecl.ikey));
            
        let cvalidates = assembly.allconcretetypes
            .map<AbstractNominalTypeDecl>(fn(tkey) => assembly.lookupNominalTypeDeclaration(tkey))
            .filter(pred(tdecl) => !tdecl.validates.empty())
            .map<List<InvokeKey>>(fn(tdecl) => tdecl.validates.map<InvokeKey>(fn(idecl) => idecl.ikey));

        let ainvs = assembly.allabstracttypes
            .map<AbstractNominalTypeDecl>(fn(tkey) => assembly.lookupNominalTypeDeclaration(tkey))
            .filter(pred(tdecl) => !tdecl.invariants.empty())
            .map<List<InvokeKey>>(fn(tdecl) => tdecl.invariants.map<InvokeKey>(fn(idecl) => idecl.ikey));

        let avalidates = assembly.allabstracttypes
            .map<AbstractNominalTypeDecl>(fn(tkey) => assembly.lookupNominalTypeDeclaration(tkey))
            .filter(pred(tdecl) => !tdecl.validates.empty())
            .map<List<InvokeKey>>(fn(tdecl) => tdecl.validates.map<InvokeKey>(fn(idecl) => idecl.ikey));

        return List<InvokeKey>::concat(List<InvokeKey>::concatAll(cinvs), List<InvokeKey>::concatAll(cvalidates), List<InvokeKey>::concatAll(ainvs), List<InvokeKey>::concatAll(avalidates));
    }

    %%TODO gather functions for default fields & default param values

    function buildCallGraph(assembly: Assembly): CallGraph {
        let cgnsfuncs = assembly.nsfuncs.map<List<InvokeKey>>(fn(ikey, nsfunc) => List<InvokeKey>{});
        let cgtypefuncs = assembly.typefuncs.map<List<InvokeKey>>(fn(ikey, typefunc) => List<InvokeKey>{});

        let cinvfuncs = CallGraphBuilder::gatherInvariantFunctions(assembly);
        let cinvmap = Map<InvokeKey, List<InvokeKey>>::unionAll(cinvfuncs.map<Map<InvokeKey, List<InvokeKey>>>(fn(ikey) => Map<InvokeKey, List<InvokeKey>>{ikey => List<InvokeKey>{}}));

        %%TODO: this is not implemented yet -- need to implement the virtual and override method processing
        assert assembly.absmethods.empty();
        assert assembly.virtmethods.empty();
        assert assembly.overmethods.empty();
        assert assembly.staticmethods.empty();

        let callgraph = Map<InvokeKey, List<InvokeKey>>::union(cgnsfuncs, cgtypefuncs, cinvmap);
        let sccs = List<List<InvokeKey>>{};

        %%TODO: implement the SCC and topoorder computation -- right now just put all the keys in the topoorder
        let topoorder = cinvfuncs.append(assembly.allfuncs);

        return CallGraph{ callgraph, sccs, topoorder };
    }
}
