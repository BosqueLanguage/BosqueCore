namespace BSQAssembly;

entity VarMapping {
    field bnmap: Map<VarIdentifier, VarIdentifier>; %%This is the map from binder names to the new name (or the same name if no shadowing)

    function createEmpty(): VarMapping {
        return VarMapping{
            Map<VarIdentifier, VarIdentifier>{}
        };
    }

    method extendMapping(name: VarIdentifier): VarMapping {
        var nbm: Map<VarIdentifier, VarIdentifier>;

        if(!this.bnmap.has(name)) {
            nbm = this.bnmap.insert(name, VarIdentifier::from(name.value.append('_$v_')));
        }
        else {
            let nname = this.bnmap.get(name);
            nbm = this.bnmap.set(name, VarIdentifier::from(nname.value.append('$')));
        }

        return VarMapping{ nbm };
    }

    method resolveVariableAsNeeded(name: VarIdentifier): VarIdentifier {
        let nmapped = this.bnmap.tryGet(name);
        if(nmapped)@none {
            return name;
        }
        else {
            return $nmapped;
        }
    }
}

%*
 * Rewrite the IR to make all type conversions and accesses explicit -- ensure all variable names are unique (no shadowing or duplicates)
 *%
entity ExplicitifyTransform {
    field assembly: Assembly;

    method processCoerceTypeAsNeeded(e: Expression, into: TypeSignature): Expression {
        if(this.assembly.areTypesSame(e.etype, into)) {
            return e;
        }
        else {
            if(this.assembly.isSubtypeOf(e.etype, into)) {
                return CoerceWidenTypeExpression{ e.sinfo, into, e, e.etype@<NominalTypeSignature>, into@<NominalTypeSignature> };
            }
            else {
                return CoerceNarrowTypeExpression{ e.sinfo, into, e, e.etype@<NominalTypeSignature>, into@<NominalTypeSignature> };
            }
        }
    }

    recursive method processArgs(args: List<Expression>, vmap: VarMapping): List<Expression> {
        return args.map<Expression>(recursive fn(arg) => this.processExpression[recursive](arg, vmap));
    }

    recursive method processUnaryArg(arg: Expression, vmap: VarMapping): Expression {
        return this.processExpression[recursive](arg, vmap);
    }

    recursive method processBinaryArgs(lhs: Expression, rhs: Expression, vmap: VarMapping): Expression, Expression {
        return this.processExpression[recursive](lhs, vmap), this.processExpression[recursive](rhs, vmap);
    }

    method processBinaryArithExpression(e: BinaryArithExpression, vmap: VarMapping): Expression {
        var nlhs, nrhs = this.processBinaryArgs[recursive](e.lhs, e.rhs, vmap);

        let lhstype = this.assembly.lookupNominalTypeDeclaration(nlhs.etype.tkeystr);
        if(lhstype)@<TypedeclTypeDecl> {
            nlhs = TypeDeclPrimitiveFieldAccessExpression{ nlhs.sinfo, $lhstype.valuetype, nlhs };
        }

        let rhstype = this.assembly.lookupNominalTypeDeclaration(nrhs.etype.tkeystr);
        if(rhstype)@<TypedeclTypeDecl> {
            nrhs = TypeDeclPrimitiveFieldAccessExpression{ nrhs.sinfo, $rhstype.valuetype, nrhs };
        }

        let restype = this.assembly.lookupNominalTypeDeclaration(e.etype.tkeystr);
        if(restype)@!<TypedeclTypeDecl> {
            return e[lhs=nlhs, rhs=nrhs];            
        }
        else {
            let nbop = e[etype=$restype.valuetype, lhs=nlhs, rhs=nrhs];
            let nbopargs = List<ArgumentValue>{ PositionalArgumentValue{ nbop } };

            return ConstructorTypeDeclExpression{ e.sinfo, e.etype, ArgumentList{ nbopargs }, $restype.hasInvariants() };
        }
    }

    recursive method procssBinKeyEqNoneExpression(e: BinKeyEqNoneExpression, vmap: VarMapping): Expression {
        let nexp = this.processUnaryArg(e.exp, vmap);
        return e[exp=nexp];
    }

    recursive method procssBinKeyNotEqNoneExpression(e: BinKeyNotEqNoneExpression, vmap: VarMapping): Expression {
        let nexp = this.processUnaryArg(e.exp, vmap);
        return e[exp=nexp];
    }

    recursive method procssBinKeySomeEqExpression(e: BinKeySomeEqExpression, vmap: VarMapping): Expression {
        let noption, nval = this.processBinaryArgs[recursive](e.eqoption, e.eqval, vmap);
        return e[eqoption=noption, eqval=nval];
    }

    recursive method procssBinKeyNotSomeEqExpression(e: BinKeyNotSomeEqExpression, vmap: VarMapping): Expression {
        let noption, nval = this.processBinaryArgs[recursive](e.neoption, e.neval, vmap);
        return e[neoption=noption, neval=nval];
    }

    recursive method procssBinKeyEqExpression(e: BinKeyEqExpression, vmap: VarMapping): Expression {
        let nlhs, nrhs = this.processBinaryArgs[recursive](e.lhs, e.rhs, vmap);
        return e[lhs=nlhs, rhs=nrhs];
    }

    recursive method procssBinKeyNotEqExpression(e: BinKeyNotEqExpression, vmap: VarMapping): Expression {
        let nlhs, nrhs = this.processBinaryArgs[recursive](e.lhs, e.rhs, vmap);
        return e[lhs=nlhs, rhs=nrhs];
    }

    recursive method processBinaryKeyEqExpression(e: BinaryKeyEqExpression, vmap: VarMapping): Expression {
        match(e)@ {
            BinKeyEqNoneExpression => { return this.procssBinKeyEqNoneExpression[recursive]($e, vmap); }
            | BinKeyNotEqNoneExpression => { return this.procssBinKeyNotEqNoneExpression[recursive]($e, vmap); }
            | BinKeySomeEqExpression => { return this.procssBinKeySomeEqExpression[recursive]($e, vmap); }
            | BinKeyNotSomeEqExpression => { return this.procssBinKeyNotSomeEqExpression[recursive]($e, vmap); }
            | BinKeyEqExpression => { return this.procssBinKeyEqExpression[recursive]($e, vmap); }
            | BinKeyNotEqExpression => { return this.procssBinKeyNotEqExpression[recursive]($e, vmap); }
        }
    }

    recursive method processExpression(e: Expression, vmap: VarMapping): Expression {
        match(e)@ {
            LiteralNoneExpression => { return e; }
            | LiteralSimpleExpression => { return e; }
            | LiteralCStringExpression => { return e; }
            | LiteralStringExpression => { return e; }
            | LiteralCRegexExpression => { return e; }
            | LiteralRegexExpression => { return e; }
            | LiteralTypeDeclValueExpression => { abort; }
            | AccessNamespaceConstantExpression => { return e; }
            | AccessStaticFieldExpression => { return e; }
            | AccessEnumExpression => { return e; }
            | AccessVariableExpression => { return $e[vname = vmap.resolveVariableAsNeeded($vname)]; }
            | AccessCapturedVariableExpressionSpecial => { abort; }
            | ConstructorExpression => { abort; }
            | ConstructorLambdaExpression => { abort; }
            | LetExpression => { abort; }
            | LambdaInvokeExpression => { abort; }
            | CallNamespaceFunctionExpression => { abort; }
            | CallTypeFunctionExpression => { abort; }
            | CallTypeFunctionSpecialExpression => { abort; }
            | CallRefInvokeStaticResolveExpression => { abort; }
            | CallRefInvokeVirtualExpression => { abort; }
            | LogicActionAndExpression => { abort; }
            | LogicActionOrExpression => { abort; }
            | TypeDeclPrimitiveFieldAccessExpression => { abort; }
            | CoerceNarrowTypeExpression => { abort; }
            | CoerceWidenTypeExpression => { abort; }
            | SafeConvertExpression => { abort; }
            | CreateDirectExpression => { abort; }
            | PostfixOp => { abort; }
            | UnaryExpression => { abort; }
            | BinaryArithExpression => { return this.processBinaryArithExpression[recursive]($e, vmap); }
            | BinaryKeyEqExpression => { return this.processBinaryKeyEqExpression[recursive]($e, vmap); }
            | KeyCmpEqualExpression => { abort; }
            | KeyCmpLessExpression => { abort; }
            | BinaryNumericExpression => { abort; }
            | BinLogicExpression => { abort; }
            | MapEntryConstructorExpression => { abort; }
            | IfExpression => { abort; }
        }
    }

    recursive method processStatement(s: Statement, vmap: VarMapping): Statement {
        match(s)@ {
            VariableDeclarationStatement => {
                return s;
            }
            | VariableMultiDeclarationStatement => {
                return s;
            }
            | VariableInitializationStatement => {
                let nr = this.processExpression($s.exp, vmap);
                let nc = this.processCoerceTypeAsNeeded(nr, $s.vtype);
                
                return VariableInitializationStatement{ $s.sinfo, $s.name, $s.vtype, nc };
            }
            | VariableMultiInitializationExplicitStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | VariableMultiInitializationImplicitStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | VariableAssignmentStatement => {
                let nr = this.processExpression($s.exp, vmap);
                let nc = this.processCoerceTypeAsNeeded(nr, $s.vtype);

                return VariableAssignmentStatement{ $s.sinfo, $s.name, $s.vtype, nc };
            }
            | VariableMultiAssignmentExplicitStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | VariableMultiAssignmentImplicitStatement => {
                abort; %% NOT IMPLEMENTED
            }
            | ReturnVoidStatement => {
                return s;
            }
            | ReturnSingleStatement => {
                let nr = this.processExpression($s.value, vmap);
                let nc = this.processCoerceTypeAsNeeded(nr, $s.rtype);
                return $s[value = nc];
            }
            | ReturnMultiStatement => {
                abort; %% NOT IMPLEMENTED
            }
        }
    }

    method processInvokeParameter(param: InvokeParameterDecl): InvokeParameterDecl {
        if(param.defaultval)@none {
            return param;
        }
        else {
            abort;
        }
    }

    method processPrecondition(precond: PreConditionDecl): PreConditionDecl {
        abort;
    }

    method processPostcondition(postcond: PostConditionDecl): PostConditionDecl {
        abort;
    }

    recursive method processBodyStatementList(stmts: List<Statement>, vmap: VarMapping): List<Statement> {
        return stmts.map<Statement>(fn(stmt) => this.processStatement[recursive](stmt, vmap));
    }

    method processBodyImpl(body: BodyImplementation): BodyImplementation {
        match(body)@ {
            ExpressionBodyImplementation => { return ExpressionBodyImplementation{ this.processExpression($body.exp, VarMapping::createEmpty()) }; }
            | StandardBodyImplementation => { return StandardBodyImplementation{ this.processBodyStatementList($body.statements, VarMapping::createEmpty()) }; }
            | _ => { return body; }
        }
    }

    method processNamespaceConstDecl(nsconst: NamespaceConstDecl): NamespaceConstDecl {
        let evalue = this.processExpression(nsconst.value, VarMapping::createEmpty());
        return nsconst[value=evalue];
    }

    method processConstMemberDecl(typeconst: ConstMemberDecl): ConstMemberDecl {
        let evalue = this.processExpression(typeconst.value, VarMapping::createEmpty());
        return typeconst[value=evalue];
    }

    method processNamespaceFunctionDecl(nsfunc: NamespaceFunctionDecl): NamespaceFunctionDecl {
        return NamespaceFunctionDecl{
            file = nsfunc.file,
            sinfo = nsfunc.sinfo,
            declaredInNS = nsfunc.declaredInNS,

            attributes = nsfunc.attributes,
            name = nsfunc.name,

            ikey = nsfunc.ikey,
            irecursive = nsfunc.irecursive,
            params = nsfunc.params.map<InvokeParameterDecl>(fn(param) => this.processInvokeParameter(param)),
            resultType = nsfunc.resultType,

            body = this.processBodyImpl(nsfunc.body),

            preconditions = nsfunc.preconditions.map<PreConditionDecl>(fn(precond) => this.processPrecondition(precond)),
            postconditions = nsfunc.postconditions.map<PostConditionDecl>(fn(postcond) => this.processPostcondition(postcond)),
            fkind = nsfunc.fkind
        };
    }

    method processTypeFunctionDecl(typefunc: TypeFunctionDecl): TypeFunctionDecl {
        abort;
    }

    method processMethodDeclAbstract(absmethod: MethodDeclAbstract): MethodDeclAbstract {
        abort;
    }

    method processMethodDeclVirtual(virtmethod: MethodDeclVirtual): MethodDeclVirtual {
        abort;
    }

    method processMethodDeclOverride(overmethod: MethodDeclOverride): MethodDeclOverride {
        abort;
    }

    method processMethodDeclStatic(staticmethod: MethodDeclStatic): MethodDeclStatic {
        abort;
    }

    method processEnumTypeDecl(enumdecl: EnumTypeDecl): EnumTypeDecl {
        abort;
    }

    method processTypedeclTypeDecl(typedecl: TypedeclTypeDecl): TypedeclTypeDecl {
        abort;
    }

    method processPrimitiveEntityTypeDecl(primtype: PrimitiveEntityTypeDecl): PrimitiveEntityTypeDecl {
        return primtype;
    }

    method processConstructableTypeDecl(ctype: ConstructableTypeDecl): ConstructableTypeDecl {
        abort;
    }

    method processCollectionTypeDecl(ctype: CollectionTypeDecl): CollectionTypeDecl {
        abort;
    }

    method processEntityTypeDecl(etype: EntityTypeDecl): EntityTypeDecl {
        abort;
    }

    method processDatatypeMemberEntityTypeDecl(dmtype: DatatypeMemberEntityTypeDecl): DatatypeMemberEntityTypeDecl {
        abort;
    }

    method processPrimitiveConceptTypeDecl(pconcept: PrimitiveConceptTypeDecl): PrimitiveConceptTypeDecl {
        abort;
    }

    method processConceptTypeDecl(cconcept: ConceptTypeDecl): ConceptTypeDecl {
        abort;
    }

    method processDatatypeTypeDecl(ddatatype: DatatypeTypeDecl): DatatypeTypeDecl {
        abort;
    }

    function process(assembly: Assembly): Assembly {
        let explicitifier = ExplicitifyTransform{ assembly };

        return Assembly{
            nsconsts = assembly.nsconsts.map<NamespaceConstDecl>(fn(nsconst) => explicitifier.processNamespaceConstDecl(nsconst)),
            typeconsts = assembly.typeconsts.map<ConstMemberDecl>(fn(typeconst) => explicitifier.processConstMemberDecl(typeconst)),

            nsfuncs = assembly.nsfuncs.map<NamespaceFunctionDecl>(fn(ikey, nsfunc) => explicitifier.processNamespaceFunctionDecl(nsfunc)),
            typefuncs = assembly.typefuncs.map<TypeFunctionDecl>(fn(ikey, typefunc) => explicitifier.processTypeFunctionDecl(typefunc)),

            absmethods = assembly.absmethods.map<MethodDeclAbstract>(fn(ikey, absmethod) => explicitifier.processMethodDeclAbstract(absmethod)),
            virtmethods = assembly.virtmethods.map<MethodDeclVirtual>(fn(ikey, virtmethod) => explicitifier.processMethodDeclVirtual(virtmethod)),
            overmethods = assembly.overmethods.map<MethodDeclOverride>(fn(ikey, overmethod) => explicitifier.processMethodDeclOverride(overmethod)),
            staticmethods = assembly.staticmethods.map<MethodDeclStatic>(fn(ikey, staticmethod) => explicitifier.processMethodDeclStatic(staticmethod)),

            enums = assembly.enums.map<EnumTypeDecl>(fn(ikey, enumdecl) => explicitifier.processEnumTypeDecl(enumdecl)),
            typedecls = assembly.typedecls.map<TypedeclTypeDecl>(fn(ikey, typedecl) => explicitifier.processTypedeclTypeDecl(typedecl)),

            primtives = assembly.primtives.map<PrimitiveEntityTypeDecl>(fn(ikey, primtype) => explicitifier.processPrimitiveEntityTypeDecl(primtype)),
            constructables = assembly.constructables.map<ConstructableTypeDecl>(fn(ikey, ctype) => explicitifier.processConstructableTypeDecl(ctype)),
            collections = assembly.collections.map<CollectionTypeDecl>(fn(ikey, ctype) => explicitifier.processCollectionTypeDecl(ctype)),

            entities = assembly.entities.map<EntityTypeDecl>(fn(ikey, etype) => explicitifier.processEntityTypeDecl(etype)),
            datamembers = assembly.datamembers.map<DatatypeMemberEntityTypeDecl>(fn(ikey, dmtype) => explicitifier.processDatatypeMemberEntityTypeDecl(dmtype)),

            pconcepts = assembly.pconcepts.map<PrimitiveConceptTypeDecl>(fn(ikey, pconcept) => explicitifier.processPrimitiveConceptTypeDecl(pconcept)),
            concepts = assembly.concepts.map<ConceptTypeDecl>(fn(ikey, cconcept) => explicitifier.processConceptTypeDecl(cconcept)),

            datatypes = assembly.datatypes.map<DatatypeTypeDecl>(fn(ikey, ddatatype) => explicitifier.processDatatypeTypeDecl(ddatatype)),

            allfuncs = assembly.allfuncs,
            allmethods = assembly.allmethods,
            allvmethods = assembly.allvmethods,

            allconcretetypes = assembly.allconcretetypes,
            allabstracttypes = assembly.allabstracttypes
        };
    }
}
