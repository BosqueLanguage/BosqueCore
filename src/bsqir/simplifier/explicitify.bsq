namespace BSQAssembly;

entity VarMapping {
   field seenmap: Map<VarIdentifier, VarIdentifier>; %%This is the map from the original name to the next var name to use
   field remap: List<Map<VarIdentifier, VarIdentifier>>; %%This is the map from the original name to the new name if required

   function createEmpty(): VarMapping {
      return VarMapping{
         Map<VarIdentifier, VarIdentifier>{},
         List<Map<VarIdentifier, VarIdentifier>>{}
      };
   }

   method pushScope(): VarMapping {
      return VarMapping{
         this.seenmap,
         this.remap.pushBack(Map<VarIdentifier, VarIdentifier>{})
      };
   }

   method mergeSeenMapInto(seenmap: Map<VarIdentifier, VarIdentifier>): VarMapping {
      return VarMapping{
         seenmap,
         this.remap
      };
   }

   method extendMapping(name: VarIdentifier): VarMapping {
      var nseen: Map<VarIdentifier, VarIdentifier>;
      var nrmap: List<Map<VarIdentifier, VarIdentifier>>;

      if(!this.seenmap.has(name)) {
         nseen = this.seenmap.insert(name, VarIdentifier::from(name.value.append('_$frsh')));
         nrmap = this.remap;
      }
      else {
         let nname = this.seenmap.get(name);
         nseen = this.seenmap.set(name, VarIdentifier::from(nname.value.append('$')));
         nrmap = this.remap.setBack(this.remap.back().insert(name, nname));
      }

      return VarMapping{
         nseen,
         nrmap
      };
   }

   method resolveVariableAsNeeded(name: VarIdentifier): VarIdentifier {
      let mmp = this.remap.findLast(pred(m) => m.has(name));
      if(mmp)@none {
         return name;
      }
      else {
         return $mmp.get(name);
      }
   }

   method remapDeclarationAsNeeded(name: VarIdentifier): VarMapping, VarIdentifier {
      let nmapping = this.extendMapping(name);
      let nname = nmapping.resolveVariableAsNeeded(name);
      
      return nmapping, nname;
   }
}

%*
 * Rewrite the IR to make all type conversions and accesses explicit -- ensure all variable names are unique (no shadowing or duplicates)
 *%
entity ExplicitifyTransform {
   field assembly: Assembly;

   method processCoerceTypeAsNeeded(e: Expression, into: TypeSignature): Expression {
      if(this.assembly.areTypesSame(e.etype, into)) {
         return e;
      }
      else {
         if(this.assembly.isSubtypeOf(e.etype, into)) {
            return CoerceWidenTypeExpression{ e.sinfo, into, e, e.etype@<NominalTypeSignature>, into@<NominalTypeSignature> };
         }
         else {
            return CoerceNarrowTypeExpression{ e.sinfo, into, e, e.etype@<NominalTypeSignature>, into@<NominalTypeSignature> };
         }
      }
   }

   method processBinaryArithExpression(e: BinaryArithExpression, vmap: VarMapping): Expression, VarMapping {
      let nlhs, nmaplhs = this.processExpression(e.lhs, vmap);
      let nrhs, nmaprhs = this.processExpression(e.rhs, nmaplhs);

      return e[lhs=nlhs, rhs=nrhs], nmaprhs;
   }

   method processExpression(e: Expression, vmap: VarMapping): Expression, VarMapping {
      match(e)@ {
         LiteralNoneExpression => { return e, vmap; }
         | LiteralSimpleExpression => { return e, vmap; }
         | LiteralCStringExpression => { return e, vmap; }
         | LiteralStringExpression => { return e, vmap; }
         | LiteralCRegexExpression => { return e, vmap; }
         | LiteralRegexExpression => { return e, vmap; }
         | LiteralTypeDeclValueExpression => { abort; }
         | AccessNamespaceConstantExpression => { return e, vmap; }
         | AccessStaticFieldExpression => { return e, vmap; }
         | AccessEnumExpression => { return e, vmap; }
         | AccessVariableExpression => { return $e[vname = vmap.resolveVariableAsNeeded($vname)], vmap; }
         | AccessCapturedVariableExpressionSpecial => { abort; }
         | ConstructorExpression => { abort; }
         | ConstructorLambdaExpression => { abort; }
         | LetExpression => { abort; }
         | LambdaInvokeExpression => { abort; }
         | CallNamespaceFunctionExpression => { abort; }
         | CallTypeFunctionExpression => { abort; }
         | CallTypeFunctionSpecialExpression => { abort; }
         | CallRefInvokeStaticResolveExpression => { abort; }
         | CallRefInvokeVirtualExpression => { abort; }
         | LogicActionAndExpression => { abort; }
         | LogicActionOrExpression => { abort; }
         | TypeDeclPrimitiveFieldAccessExpression => { abort; }
         | CoerceNarrowTypeExpression => { abort; }
         | CoerceWidenTypeExpression => { abort; }
         | SafeConvertExpression => { abort; }
         | CreateDirectExpression => { abort; }
         | PostfixOp => { abort; }
         | UnaryExpression => { abort; }
         | BinaryArithExpression => { return this.processBinaryArithExpression($e, vmap); }
         | BinaryKeyEqExpression => { abort; }
         | KeyCmpEqualExpression => { abort; }
         | KeyCmpLessExpression => { abort; }
         | BinaryNumericExpression => { abort; }
         | BinLogicExpression => { abort; }
         | MapEntryConstructorExpression => { abort; }
         | IfExpression => { abort; }
      }
   }

   method processStatement(s: Statement, vmap: VarMapping): Statement, VarMapping {
      match(s)@ {
         ReturnVoidStatement => {
            return s, vmap;
         }
         | ReturnSingleStatement => {
            let nr, nm = this.processExpression($s.value, vmap);
            let nc = this.processCoerceTypeAsNeeded(nr, $s.rtype);
            return $s[value = nc], nm;
         }
         | ReturnMultiStatement => {
            abort; %% NOT IMPLEMENTED
         }
         | _ => { 
            abort;
         }
      }
   }

   method processInvokeParameter(param: InvokeParameterDecl): InvokeParameterDecl {
      if(param.defaultval)@none {
         return param;
      }
      else {
         abort;
      }
   }

   method processPrecondition(precond: PreConditionDecl): PreConditionDecl {
      abort;
   }

   method processPostcondition(postcond: PostConditionDecl): PostConditionDecl {
      abort;
   }

   method processBodyStatementList(stmts: List<Statement>, vmap: VarMapping): List<Statement>, VarMapping {
        let rr = stmts.transduce<VarMapping, Statement>(vmap, fn(vmap, stmt) => {
            let rs = this.processStatement(stmt, vmap);
            return rs.1, rs.0;
         });

         return rr.1, rr.0; %%TODO: in our language we might also want to have a project elist to allow for quick reshuffles in cases like this
    }

   method processBodyImpl(body: BodyImplementation): BodyImplementation {
      match(body)@ {
         ExpressionBodyImplementation => { return ExpressionBodyImplementation{ this.processExpression($body.exp, VarMapping::createEmpty()).0 }; }
         | StandardBodyImplementation => { return StandardBodyImplementation{ this.processBodyStatementList($body.statements, VarMapping::createEmpty()).0 }; }
         | _ => { return body; }
      }
   }

   method processNamespaceConstDecl(nsconst: NamespaceConstDecl): NamespaceConstDecl {
      let evalue = this.processExpression(nsconst.value, VarMapping::createEmpty()).0;
      return nsconst[value=evalue];
   }

   method processConstMemberDecl(typeconst: ConstMemberDecl): ConstMemberDecl {
      let evalue = this.processExpression(typeconst.value, VarMapping::createEmpty()).0;
      return typeconst[value=evalue];
   }

   method processNamespaceFunctionDecl(nsfunc: NamespaceFunctionDecl): NamespaceFunctionDecl {
      return NamespaceFunctionDecl{
         file = nsfunc.file,
         sinfo = nsfunc.sinfo,
         declaredInNS = nsfunc.declaredInNS,

         attributes = nsfunc.attributes,
         name = nsfunc.name,

         ikey = nsfunc.ikey,
         irecursive = nsfunc.irecursive,
         params = nsfunc.params.map<InvokeParameterDecl>(fn(param) => this.processInvokeParameter(param)),
         resultType = nsfunc.resultType,

         body = this.processBodyImpl(nsfunc.body),

         preconditions = nsfunc.preconditions.map<PreConditionDecl>(fn(precond) => this.processPrecondition(precond)),
         postconditions = nsfunc.postconditions.map<PostConditionDecl>(fn(postcond) => this.processPostcondition(postcond)),
         fkind = nsfunc.fkind
      };
   }

   method processTypeFunctionDecl(typefunc: TypeFunctionDecl): TypeFunctionDecl {
      abort;
   }

   method processMethodDeclAbstract(absmethod: MethodDeclAbstract): MethodDeclAbstract {
      abort;
   }

   method processMethodDeclVirtual(virtmethod: MethodDeclVirtual): MethodDeclVirtual {
      abort;
   }

   method processMethodDeclOverride(overmethod: MethodDeclOverride): MethodDeclOverride {
      abort;
   }

   method processMethodDeclStatic(staticmethod: MethodDeclStatic): MethodDeclStatic {
      abort;
   }

   method processEnumTypeDecl(enumdecl: EnumTypeDecl): EnumTypeDecl {
      abort;
   }

   method processTypedeclTypeDecl(typedecl: TypedeclTypeDecl): TypedeclTypeDecl {
      abort;
   }

   method processPrimitiveEntityTypeDecl(primtype: PrimitiveEntityTypeDecl): PrimitiveEntityTypeDecl {
      return primtype;
   }

   method processConstructableTypeDecl(ctype: ConstructableTypeDecl): ConstructableTypeDecl {
      abort;
   }

   method processCollectionTypeDecl(ctype: CollectionTypeDecl): CollectionTypeDecl {
      abort;
   }

   method processEntityTypeDecl(etype: EntityTypeDecl): EntityTypeDecl {
      abort;
   }

   method processDatatypeMemberEntityTypeDecl(dmtype: DatatypeMemberEntityTypeDecl): DatatypeMemberEntityTypeDecl {
      abort;
   }

   method processPrimitiveConceptTypeDecl(pconcept: PrimitiveConceptTypeDecl): PrimitiveConceptTypeDecl {
      abort;
   }

   method processConceptTypeDecl(cconcept: ConceptTypeDecl): ConceptTypeDecl {
      abort;
   }

   method processDatatypeTypeDecl(ddatatype: DatatypeTypeDecl): DatatypeTypeDecl {
      abort;
   }

   function process(assembly: Assembly): Assembly {
      let explicitifier = ExplicitifyTransform{ assembly };

      return Assembly{
         nsconsts = assembly.nsconsts.map<NamespaceConstDecl>(fn(nsconst) => explicitifier.processNamespaceConstDecl(nsconst)),
         typeconsts = assembly.typeconsts.map<ConstMemberDecl>(fn(typeconst) => explicitifier.processConstMemberDecl(typeconst)),

         nsfuncs = assembly.nsfuncs.map<NamespaceFunctionDecl>(fn(ikey, nsfunc) => explicitifier.processNamespaceFunctionDecl(nsfunc)),
         typefuncs = assembly.typefuncs.map<TypeFunctionDecl>(fn(ikey, typefunc) => explicitifier.processTypeFunctionDecl(typefunc)),

         absmethods = assembly.absmethods.map<MethodDeclAbstract>(fn(ikey, absmethod) => explicitifier.processMethodDeclAbstract(absmethod)),
         virtmethods = assembly.virtmethods.map<MethodDeclVirtual>(fn(ikey, virtmethod) => explicitifier.processMethodDeclVirtual(virtmethod)),
         overmethods = assembly.overmethods.map<MethodDeclOverride>(fn(ikey, overmethod) => explicitifier.processMethodDeclOverride(overmethod)),
         staticmethods = assembly.staticmethods.map<MethodDeclStatic>(fn(ikey, staticmethod) => explicitifier.processMethodDeclStatic(staticmethod)),

         enums = assembly.enums.map<EnumTypeDecl>(fn(ikey, enumdecl) => explicitifier.processEnumTypeDecl(enumdecl)),
         typedecls = assembly.typedecls.map<TypedeclTypeDecl>(fn(ikey, typedecl) => explicitifier.processTypedeclTypeDecl(typedecl)),

         primtives = assembly.primtives.map<PrimitiveEntityTypeDecl>(fn(ikey, primtype) => explicitifier.processPrimitiveEntityTypeDecl(primtype)),
         constructables = assembly.constructables.map<ConstructableTypeDecl>(fn(ikey, ctype) => explicitifier.processConstructableTypeDecl(ctype)),
         collections = assembly.collections.map<CollectionTypeDecl>(fn(ikey, ctype) => explicitifier.processCollectionTypeDecl(ctype)),

         entities = assembly.entities.map<EntityTypeDecl>(fn(ikey, etype) => explicitifier.processEntityTypeDecl(etype)),
         datamembers = assembly.datamembers.map<DatatypeMemberEntityTypeDecl>(fn(ikey, dmtype) => explicitifier.processDatatypeMemberEntityTypeDecl(dmtype)),

         pconcepts = assembly.pconcepts.map<PrimitiveConceptTypeDecl>(fn(ikey, pconcept) => explicitifier.processPrimitiveConceptTypeDecl(pconcept)),
         concepts = assembly.concepts.map<ConceptTypeDecl>(fn(ikey, cconcept) => explicitifier.processConceptTypeDecl(cconcept)),

         datatypes = assembly.datatypes.map<DatatypeTypeDecl>(fn(ikey, ddatatype) => explicitifier.processDatatypeTypeDecl(ddatatype)),

         allfuncs = assembly.allfuncs,
         allmethods = assembly.allmethods,
         allvmethods = assembly.allvmethods,

         allconcretetypes = assembly.allconcretetypes,
         allabstracttypes = assembly.allabstracttypes
      };
   }
}
