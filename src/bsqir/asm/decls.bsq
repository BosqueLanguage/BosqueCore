namespace BSQAssembly;

const min_safe_int: Int = -4611686018427387903i;
const max_safe_int: Int = 4611686018427387903i;

%%negation and conversion are always safe
const max_safe_nat: Nat = 4611686018427387903n;

const namespaceComponentRE: CRegex = /[A-Z][_a-zA-Z0-9]+/c;
const namespaceKeyRE: CRegex = /(${BSQAssembly::namespaceComponentRE}'::')*${BSQAssembly::namespaceComponentRE}/c; %%Core is explicit here
type NamespaceComponentKey = CString of BSQAssembly::namespaceComponentRE;
type NamespaceKey = CString of BSQAssembly::namespaceKeyRE; %%Core is implicit here

const basicNominalTypeKeyRE: CRegex = /(${BSQAssembly::namespaceKeyRE}'::')?[A-Z][_a-zA-Z0-9]+('<'.+'>')?/c; %%Core is implicit here
const specialScopedTypeKeyRE: CRegex = /('Result'|'APIResult')'<'.+'>''::'('Ok'|'Fail'|'Rejected'|'Failed'|'Error'|'Success')/c; %%Core is implicit here
const nominalTypeKeyRE: CRegex = /(${BSQAssembly::basicNominalTypeKeyRE}|${BSQAssembly::specialScopedTypeKeyRE})/c; %%a bit rough but helps prevent mistakes
const elistTypeKeyRE: CRegex = /'(|'.*'|)'/c;

const lambdaTypeKeyRE: CRegex = /('fn'|'pred') '('.*')' '->' (${BSQAssembly::nominalTypeKeyRE}|${BSQAssembly::elistTypeKeyRE})/c;
const typeKeyRE: CRegex = /${BSQAssembly::nominalTypeKeyRE}|${BSQAssembly::elistTypeKeyRE}|${BSQAssembly::lambdaTypeKeyRE}/c; 
type TypeKey = CString of BSQAssembly::typeKeyRE;

const invokeKeyRE: CRegex = /(${BSQAssembly::namespaceKeyRE}|${BSQAssembly::nominalTypeKeyRE})'::'[_a-zA-Z0-9$-]+('<'.+'>')?/c;
type InvokeKey = CString of BSQAssembly::invokeKeyRE;

const identifierRE: CRegex = /[_a-z][_a-zA-Z0-9$]*/c; %%we allow & inside these identifiers so we can make special names
const videntifierRE: CRegex = /'$'?[_a-z][_a-zA-Z0-9$]*/c; %%we allow & inside these identifiers so we can make special names
type Identifier = CString of BSQAssembly::identifierRE;
type VarIdentifier = CString of BSQAssembly::videntifierRE;

entity SourceInfo {
    field line: Nat;
    field column: Nat;
    field pos: Nat;
    field span: Nat;
}

enum RecursiveAnnotation {
    RecursiveTag,
    NonRecursiveTag,
    CondRecursiveTag
}
