namespace IRAssembly;

entity BinderInfo {
    field srcname: VarIdentifier;
    field implicitdef: Bool;
    field refineonfollow: Bool;
}

datatype ITest using {
    field isnot: Bool;
}
of
ITestType { field ttype: TypeSignature; }
| ITestNone { }
| ITestSome { }
| ITestOk { }
| ITestFail { }
;

datatype ArgumentValue using {
    field exp: Expression;
}
of 
RefArgumentValue { }
| PositionalArgumentValue { }
| NamedArgumentValue { field name: VarName; }
| SpreadArgumentValue { }
;

entity ArgumentList {
    field args: List<ArgumentValue>;
}

concept Expression {
    field sinfo: SourceInfo;
    field etype: TypeSignature;
}

entity LiteralNoneExpression provides Expression {
}

entity LiteralSimpleExpression provides Expression {
    field value: CString;
}

entity LiteralCStringExpression provides Expression {
    field value: CString;
}

entity LiteralStringExpression provides Expression {
    field value: String;
}

entity LiteralCRegexExpression provides Expression {
    field value: CString;
}

entity LiteralRegexExpression provides Expression {
    field value: String;
}

entity LiteralTypeDeclValueExpression provides Expression {
    field value: Expression;
    field constype: NominalTypeSignature;
}

entity AccessNamespaceConstantExpression provides Expression {
    field ns: NamespaceKey;
    field name: Identifier;
}

entity AccessStaticFieldExpression provides Expression {
    field stype: NominalTypeSignature;
    field name: Identifier;

    field resolvedDeclType: TypeSignature;
}

entity AccessEnumExpression provides Expression {
    field stype: NominalTypeSignature;
    field name: CString;
}

entity AccessVariableExpression provides Expression {
    field vname: VarIdentifier;
    field layouttype: TypeSignature;
}

entity AccessRetypeStep {
    field ttype: TypeSignature;
    field specialfname: CString
}

entity AccessVariableExpressionSpecial provides Expression {
    field vname: VarIdentifier;
    field layouttype: TypeSignature;
    field isCaptured: Bool;
    
    field steps: List<AccessRetypeStep>;
}

concept ConstructorExpression provides Expression {
    field args: ArgumentList;
}

datatype ConstructorPrimaryExpression provides ConstructorExpression using {
    field ctype: NominalTypeSignature;
}
of 
ConstructorPrimaryCollectionSingletonsExpression {
    field elemtype: TypeSignature;
}
| ConstructorPrimarySpecialConstructableExpression { }
| ConstructorTypeDeclExpression {
    field invchecks: Bool;
}
| ConstructorTypeDeclStringExpression {
    field invchecks: Bool;
    field ofcheck: Expression;
}
| ConstructorStdExpression { 
    field shuffleinfo: List<(|Int, Identifier, TypeSignature|)>;
}
;

entity ConstructorEListExpression provides ConstructorExpression {
}

entity ConstructorLambdaExpression provides Expression {
    %%most of the info is in the etype field (which is a LambdaTypeSignature)

    field body: BodyImplementation;
}

entity LetExpression provides Expression {
    field decls: List<(|VarIdentifier, TypeSignature, Expression|)>;
    field body: Expression;
}

entity LambdaInvokeExpression provides Expression {
    field name: CString;
    field rec: RecursiveAnnotation;
    field args: ArgumentList;

    field isCapturedLambda: Bool;
    field lambda: LambdaTypeSignature;
    field arginfo: List<TypeSignature>;
    field resttype: Option<TypeSignature>;
    field restinfo: List<(|Int, Bool, TypeSignature|)>;
}

entity CallNamespaceFunctionExpression provides Expression {
    field ikey: InvokeKey;
    field ns: NamespaceKey;

    field name: Identifier;
    field rec: RecursiveAnnotation;
    field args: ArgumentList;

    field shuffleinfo: List<(|Int, TypeSignature|)>;
    field resttype: Option<TypeSignature>;
    field restinfo: List<(|Int, Bool, TypeSignature|)>;
}

entity CallTypeFunctionExpression provides Expression {
    field ikey: InvokeKey;

    field ttype: NominalTypeSignature;
    field name: Identifier;
    field rec: RecursiveAnnotation;
    field args: ArgumentList;

    field resolvedDeclType: NominalTypeSignature;
    
    field shuffleinfo: List<(|Int, TypeSignature|)>;
    field resttype: Option<TypeSignature>;
    field restinfo: List<(|Int, Bool, TypeSignature|)>;
}

entity CallRefVariableExpression provides Expression {
    field rcvr: CString;
    field name: CString;
    field rec: RecursiveAnnotation;
    field args: ArgumentList;
}

entity CallRefThisExpression provides Expression {
    field name: CString;
    field rec: RecursiveAnnotation;
    field args: ArgumentList;
}

entity CallRefSelfExpression provides Expression {
    field name: CString;
    field rec: RecursiveAnnotation;
    field args: ArgumentList;
}

entity LogicActionAndExpression provides Expression {
    field args: List<Expression>;
}

entity LogicActionOrExpression provides Expression {
    field args: List<Expression>;
}

entity SafeConvertExpression provides Expression {
    field exp: Expression;
    field srctype: NominalTypeSignature;
    field trgttype: NominalTypeSignature;
}

entity CreateDirectExpression provides Expression {
    field exp: Expression;
    field srctype: NominalTypeSignature;
    field trgttype: NominalTypeSignature;
}

datatype PostfixOperation using {
    field sinfo: IR::SourceInfo;
    field baseType: NominalTypeSignature;
}
of 
PostfixAccessFromName {
    field declaredInType: NominalTypeSignature;
    field name: CString;
}
| PostfixProjectFromNames {
    field declOnType: NominalTypeSignature;
    field names: List<(|CString, NominalTypeSignature|)>;
}
| PostfixAccessFromIndex {
    field idx: Nat;
}
| PostfixIsTest {
    field ttest: ITest;
}
| PostfixAsConvert {
    field ttest: ITest;
}
| PostfixAssignFields {
    field declOnType: NominalTypeSignature;
    field updates: List<(|CString, NominalTypeSignature, Expression|)>;
}
| PostfixInvokeStatic extends PostfixOperation {
    field resolvedTrgt: NominalTypeSignature;
    field name: CString;
    field rec: RecursiveAnnotation;
    field args: ArgumentList;

    field shuffleinfo: List<(|Int, TypeSignature|)>;
    field resttype: Option<TypeSignature>;
    field restinfo: List<(|Int, Bool, TypeSignature|)>;
}
| PostfixInvokeVirtual extends PostfixOperation {
    field resolvedBase: NominalTypeSignature;
    field name: CString;
    field rec: RecursiveAnnotation;
    field args: ArgumentList;

    field shuffleinfo: List<(|Int, TypeSignature|)>;
    field resttype: Option<TypeSignature>;
    field restinfo: List<(|Int, Bool, TypeSignature|)>;
}
| PostfixLiteralKeyAccess {
    field kexp: Expression;
}
;

entity PostfixOp provides Expression {
    field rootExp: Expression;
    field ops: List<PostfixOperation>;
}

datatype UnaryExpression provides Expression using {
    field exp: Expression;
    field opertype: TypeSignature;
}
of
PrefixNotOpExpression { }
| PrefixNegateOpExpression { }
| PrefixPlusOpExpression { }
;

datatype BinaryArithExpression provides Expression using {
    field lhs: Expression;
    field rhs: Expression;
    field opertype: TypeSignature;
}
of
BinAddExpression { }
| BinSubExpression { }
| BinMultExpression { }
| BinDivExpression { }
;

datatype BinaryKeyEqExpression provides Expression using {
    field ktype: TypeSignature;
    field opertype: TypeSignature;
}
of
BinKeyEqNoneExpression { 
    field exp: Expression;
}
| BinKeyNotEqNoneExpression { 
    field exp: Expression;
}
| BinKeySomeEqExpression {
    field eoption: Expression;
    field eval: Expression;
}
| BinKeyNotSomeEqExpression {
    field eoption: Expression;
    field eval: Expression;
}
| BinKeyEqExpression {
    field lhs: Expression;
    field rhs: Expression;
}
| BinKeyNotEqExpression {
    field lhs: Expression;
    field rhs: Expression;
}
;

entity KeyCompareExpression provides Expression {
    field ktype: TypeSignature;
    field opertype: TypeSignature;

    field lhs: Expression;
    field rhs: Expression;
}

datatype BinaryNumericExpression provides Expression using {
    field lhs: Expression;
    field rhs: Expression;

    field etype: TypeSignature;
    field opertype: TypeSignature;
}
of
NumericEqExpression { }
| NumericNeqExpression { }
| NumericLessExpression { }
| NumericLessEqExpression { }
| NumericGreaterExpression { }
| NumericGreaterEqExpression { }
;

datatype BinLogicExpression provides Expression using {
    field lhs: Expression;
    field rhs: Expression;
}
of
BinLogicAndExpression { }
| BinLogicOrExpression { }
| BinLogicImpliesExpression { }
| BinLogicIFFExpression { }
;

entity MapEntryConstructorExpression provides Expression {
    field kexp: Expression;
    field vexp: Expression;
}

entity IfTest {
    field exp: Expression;
    field itestopt: Option<ITest>;
}

entity IfExpression provides Expression {
    field iftest: IfTest;
    field binder: Option<BinderInfo>;
    field trueValue: Expression
    field falseValue: Expression;

    field trueBindType: Option<TypeSignature>;
    field falseBindType: Option<TypeSignature>;
}

concept Statement {
    field sinfo: IR::SourceInfo;
}

entity VariableDeclarationStatement provides Statement {
    field name: CString;
    field vtype: TypeSignature;
}

entity VariableMultiDeclarationStatement provides Statement {
    field decls: List<(|CString, TypeSignature|)>;
}

entity VariableInitializationStatement provides Statement {
    field name: CString;
    field vtype: TypeSignature;
    field exp: Expression;
}

entity VariableMultiInitializationExplicitStatement provides Statement {
    field decls: List<(|CString, TypeSignature|)>;
    field exps: List<Expression>;
}


entity VariableMultiInitializationImplicitStatement provides Statement {
    field decls: List<(|CString, TypeSignature|)>;
    field exp: Expression;
}

class VariableAssignmentStatement extends Statement {
    readonly name: string;
    vtype: TypeSignature | undefined = undefined;
    readonly exp: Expression;

    constructor(sinfo: SourceInfo, name: string, exp: Expression) {
        super(StatementTag.VariableAssignmentStatement, sinfo);
        this.name = name;
        this.exp = exp;
    }

    emit(fmt: CodeFormatter): string {
        return `${this.name} = ${this.exp.emit(true, fmt)};`;
    }
}

class VariableMultiAssignmentStatement extends Statement {
    readonly names: string[];
    vtypes: TypeSignature[] = [];
    readonly exp: Expression | Expression[]; //could be a single expression of type EList or multiple expressions

    constructor(sinfo: SourceInfo, names: string[], exp: Expression | Expression[]) {
        super(StatementTag.VariableMultiAssignmentStatement, sinfo);
        this.names = names;
        this.exp = exp;
    }

    emit(fmt: CodeFormatter): string {
        const ttname = this.names.join(", ");
        const ttexp = Array.isArray(this.exp) ? this.exp.map((ee) => ee.emit(true, fmt)).join(", ") : this.exp.emit(true, fmt);

        return `${ttname} = ${ttexp};`;
    }
}

class VariableRetypeStatement extends Statement {
    readonly name: string;
    vtype: TypeSignature | undefined = undefined;
    newvtype: TypeSignature | undefined = undefined;
    readonly ttest: ITest;

    constructor(sinfo: SourceInfo, name: string, ttest: ITest) {
        super(StatementTag.VariableRetypeStatement, sinfo);
        this.name = name;
        this.ttest = ttest;
    }

    emit(fmt: CodeFormatter): string {
        return `ref ${this.name}@${this.ttest.emit(fmt)};`;
    }
}

class ReturnVoidStatement extends Statement {
    constructor(sinfo: SourceInfo) {
        super(StatementTag.ReturnVoidStatement, sinfo);
    }

    emit(fmt: CodeFormatter): string {
        return `return;`;
    }
}

class ReturnSingleStatement extends Statement {
    readonly value: Expression;
    rtype: TypeSignature | undefined = undefined;

    constructor(sinfo: SourceInfo, value: Expression) {
        super(StatementTag.ReturnSingleStatement, sinfo);
        this.value = value;
    }

    emit(fmt: CodeFormatter): string {
        return `return ${this.value.emit(true, fmt)};`;
    }
}

class ReturnMultiStatement extends Statement {
    readonly value: Expression[]; //array is implicitly converted to EList
    rtypes: TypeSignature[] = [];

    constructor(sinfo: SourceInfo, value: Expression[]) {
        super(StatementTag.ReturnMultiStatement, sinfo);
        this.value = value;
    }

    emit(fmt: CodeFormatter): string {
        return `return ${this.value.map((vv) => vv.emit(true, fmt)).join(", ")};`;
    }
}

class IfStatement extends Statement {
    readonly cond: IfTest;
    readonly binder: BinderInfo | undefined;
    readonly trueBlock: BlockStatement;
    
    trueBindType: TypeSignature | undefined = undefined;

    constructor(sinfo: SourceInfo, cond: IfTest, binder: BinderInfo | undefined, trueBlock: BlockStatement) {
        super(StatementTag.IfStatement, sinfo);
        this.cond = cond;
        this.binder = binder;
        this.trueBlock = trueBlock;
    }

    emit(fmt: CodeFormatter): string {
        let bexps: [string, string] = ["", ""];
        if(this.binder !== undefined) {
            bexps = this.binder.emit();
        }

        const itest = this.cond.itestopt !== undefined ? `${this.cond.itestopt.emit(fmt)}` : "";
        
        const ttest = `(${bexps[0]}${this.cond.exp.emit(true, fmt)})${bexps[1]}${itest}`;
        return `if${ttest} ${this.trueBlock.emit(fmt)}`;
    }
}

class IfElseStatement extends Statement {
    readonly cond: IfTest;
    readonly binder: BinderInfo | undefined;
    readonly trueBlock: BlockStatement;
    readonly falseBlock: BlockStatement;

    trueBindType: TypeSignature | undefined = undefined;
    falseBindType: TypeSignature | undefined = undefined;

    constructor(sinfo: SourceInfo, cond: IfTest, binder: BinderInfo | undefined, trueBlock: BlockStatement,falseBlock: BlockStatement) {
        super(StatementTag.IfElseStatement, sinfo);
        this.cond = cond;
        this.binder = binder;
        this.trueBlock = trueBlock;
        this.falseBlock = falseBlock;
    }

    emit(fmt: CodeFormatter): string {
        let bexps: [string, string] = ["", ""];
        if(this.binder !== undefined) {
            bexps = this.binder.emit();
        }

        const itest = this.cond.itestopt !== undefined ? `${this.cond.itestopt.emit(fmt)}` : "";
        
        const ttest = `(${bexps[0]}${this.cond.exp.emit(true, fmt)})${bexps[1]}${itest}`;
        
        const ttif = this.trueBlock.emit(fmt);
        const ttelse = this.falseBlock.emit(fmt);

        return [`if${ttest} ${ttif}`, `else ${ttelse}`].join("\n");
    }
}

class IfElifElseStatement extends Statement {
    readonly condflow: {cond: Expression, block: BlockStatement}[];
    readonly elseflow: BlockStatement;

    constructor(sinfo: SourceInfo, condflow: {cond: Expression, block: BlockStatement}[], elseflow: BlockStatement) {
        super(StatementTag.IfElifElseStatement, sinfo);
        this.condflow = condflow;
        this.elseflow = elseflow;
    }

    emit(fmt: CodeFormatter): string {
        const ttcond = this.condflow.map((cf) => `$(${cf.cond.emit(true, fmt)}) ${cf.block.emit(fmt)}`);
        const ttelse = this.elseflow.emit(fmt);

        const iif = `if${ttcond[0]}`;
        const ielifs = [...ttcond.slice(1).map((cc) => fmt.indent(`elif${cc}`)), fmt.indent(`else ${ttelse}`)];

        return [iif, ...ielifs].join("\n");
    }
}

class SwitchStatement extends Statement {
    readonly sval: Expression;
    readonly switchflow: {lval: LiteralExpressionValue | undefined, value: BlockStatement}[];

    mustExhaustive: boolean = false;
    optypes: TypeSignature[] = [];

    constructor(sinfo: SourceInfo, sval: Expression, flow: {lval: LiteralExpressionValue | undefined, value: BlockStatement}[]) {
        super(StatementTag.SwitchStatement, sinfo);
        this.sval = sval;
        this.switchflow = flow;
    }

    emit(fmt: CodeFormatter): string {
        const mheader = `switch(${this.sval.emit(true, fmt)})`;
        fmt.indentPush();
        const ttmf = this.switchflow.map((sf) => `${sf.lval ? sf.lval.exp.emit(true, fmt) : "_"} => ${sf.value.emit(fmt)}`);
        fmt.indentPop();

        const iil = fmt.indent(ttmf[0]);
        const iir = ttmf.slice(1).map((cc) => fmt.indent("| " + cc));

        return `${mheader} {\n${[iil, ...iir].join("\n")}\n${fmt.indent("}")}`;
    }
}

class MatchStatement extends Statement {
    readonly sval: [Expression, BinderInfo | undefined];
    readonly matchflow: {mtype: TypeSignature | undefined, value: BlockStatement}[];

    mustExhaustive: boolean = false;
    implicitFinalType: TypeSignature | undefined = undefined;

    constructor(sinfo: SourceInfo, sval: [Expression, BinderInfo | undefined], flow: {mtype: TypeSignature | undefined, value: BlockStatement}[]) {
        super(StatementTag.MatchStatement, sinfo);
        this.sval = sval;
        this.matchflow = flow;
    }

    emit(fmt: CodeFormatter): string {
        let bexps: [string, string] = ["", ""];
        if(this.sval[1] !== undefined) {
            bexps = this.sval[1].emit();
        }

        const mheader = `match(${bexps[0]}${this.sval[0].emit(true, fmt)})${bexps[1]}`;
        fmt.indentPush();
        const ttmf = this.matchflow.map((mf) => `${mf.mtype ? mf.mtype.emit() : "_"} => ${mf.value.emit(fmt)}`);
        fmt.indentPop();

        const iil = fmt.indent(ttmf[0]);
        const iir = ttmf.slice(1).map((cc) => fmt.indent("| " + cc));

        return `${mheader} {\n${[iil, ...iir].join("\n")}\n${fmt.indent("}")}`;
    }
}

class AbortStatement extends Statement {
    constructor(sinfo: SourceInfo) {
        super(StatementTag.AbortStatement, sinfo);
    }

    emit(fmt: CodeFormatter): string {
        return `abort;`;
    }
}

class AssertStatement extends Statement {
    readonly cond: Expression;
    readonly level: BuildLevel;

    constructor(sinfo: SourceInfo, cond: Expression, level: BuildLevel) {
        super(StatementTag.AssertStatement, sinfo);
        this.cond = cond;
        this.level = level;
    }

    emit(fmt: CodeFormatter): string {
        const level = (this.level !== "release") ? (" " + this.level) : "";
        return `assert${level} ${this.cond.emit(true, fmt)};`;
    }
}

class ValidateStatement extends Statement {
    readonly cond: Expression;
    readonly diagnosticTag: string | undefined

    constructor(sinfo: SourceInfo, cond: Expression, diagnosticTag: string | undefined) {
        super(StatementTag.ValidateStatement, sinfo);
        this.cond = cond;
        this.diagnosticTag = diagnosticTag;
    }

    emit(fmt: CodeFormatter): string {
        const ttg = (this.diagnosticTag !== undefined) ? `[${this.diagnosticTag}]` : "";
        return `validate${ttg} ${this.cond.emit(true, fmt)};`;
    }
}

class DebugStatement extends Statement {
    readonly value: Expression;

    constructor(sinfo: SourceInfo, value: Expression) {
        super(StatementTag.DebugStatement, sinfo);
        this.value = value;
    }

    emit(fmt: CodeFormatter): string {
        return `_debug ${this.value.emit(true, fmt)};`;
    }
}

class VoidRefCallStatement extends Statement {
    readonly exp: Expression;

    constructor(sinfo: SourceInfo, exp: Expression) {
        super(StatementTag.VoidRefCallStatement, sinfo);
        this.exp = exp;
    }

    emit(fmt: CodeFormatter): string {
        return `${this.exp.emit(true, fmt)};`;
    }
}

class VarUpdateStatement extends Statement {
    readonly name: string;
    readonly updates: [string, Expression][];

    constructor(sinfo: SourceInfo, name: string, updates: [string, Expression][]) {
        super(StatementTag.VarUpdateStatement, sinfo);
        this.name = name;
        this.updates = updates;
    }

    emit(fmt: CodeFormatter): string {
        const updates = this.updates.map(([name, exp]) => `${name} = ${exp.emit(true, fmt)}`).join(", ");
        return `ref ${this.name}[${updates}];`;
    }
}

class ThisUpdateStatement extends Statement {
    readonly updates: [string, Expression][];

    constructor(sinfo: SourceInfo, updates: [string, Expression][]) {
        super(StatementTag.ThisUpdateStatement, sinfo);
        this.updates = updates;
    }

    emit(fmt: CodeFormatter): string {
        const updates = this.updates.map(([name, exp]) => `${name} = ${exp.emit(true, fmt)}`).join(", ");
        return `ref this[${updates}];`;
    }
}

class SelfUpdateStatement extends Statement {
    readonly updates: [string, Expression][];

    constructor(sinfo: SourceInfo, updates: [string, Expression][]) {
        super(StatementTag.SelfUpdateStatement, sinfo);
        this.updates = updates;
    }

    emit(fmt: CodeFormatter): string {
        const updates = this.updates.map(([name, exp]) => `${name} = ${exp.emit(true, fmt)}`).join(", ");
        return `ref self[${updates}];`;
    }
}

class EnvironmentUpdateStatement extends Statement {
    readonly updates: [LiteralExpressionValue, Expression][];

    constructor(sinfo: SourceInfo, updates: [LiteralExpressionValue, Expression][]) {
        super(StatementTag.EnvironmentUpdateStatement, sinfo);
        this.updates = updates;
    }

    emit(fmt: CodeFormatter): string {
        const updates = this.updates.map(([name, exp]) => `${name.emit(true, fmt)} = ${exp.emit(true, fmt)}`).join(", ");
        return `env[|${updates}|];`;
    }
}

class EnvironmentBracketStatement extends Statement {
    readonly env: EnvironmentGenerationExpression;
    readonly block: BlockStatement;

    constructor(sinfo: SourceInfo, env: EnvironmentGenerationExpression, block: BlockStatement) {
        super(StatementTag.EnvironmentBracketStatement, sinfo);
        this.env = env;
        this.block = block;
    }

    emit(fmt: CodeFormatter): string {
        return `${this.env.emit(fmt)} ${this.block.emit(fmt)}`;
    }
}

class TaskStatusStatement extends Statement {
    readonly exp: Expression;

    constructor(sinfo: SourceInfo, exp: Expression) {
        super(StatementTag.TaskStatusStatement, sinfo);
        this.exp = exp;
    }

    emit(fmt: CodeFormatter): string {
        return `Task::status(${this.exp.emit(true, fmt)});`;
    }
}

class TaskEventEmitStatement extends Statement {
    readonly exp: Expression;

    constructor(sinfo: SourceInfo, exp: Expression) {
        super(StatementTag.TaskEventEmitStatement, sinfo);
        this.exp = exp;
    }

    emit(fmt: CodeFormatter): string {
        return `Task::event(${this.exp.emit(true, fmt)});`;
    }
}

class TaskYieldStatement extends Statement {
    readonly name: string;
    readonly terms: TypeSignature[];
    readonly args: ArgumentList;

    constructor(sinfo: SourceInfo, name: string, terms: TypeSignature[], args: ArgumentList) {
        super(StatementTag.TaskYieldStatement, sinfo);
        this.name = name;
        this.terms = terms;
        this.args = args;
    }

    emit(fmt: CodeFormatter): string {
        let terms = "";
        if(this.terms.length !== 0) {
            terms = "<" + this.terms.map((tt) => tt.emit()).join(", ") + ">";
        }

        return `yield self.${this.name}${terms}${this.args.emit(fmt, "(", ")")};`;
    }
}

class BlockStatement extends Statement {
    readonly statements: Statement[];
    readonly isScoping: boolean;

    constructor(sinfo: SourceInfo, statements: Statement[], isScoping: boolean) {
        super(StatementTag.BlockStatement, sinfo);
        this.statements = statements;
        this.isScoping = isScoping;
    }

    emit(fmt: CodeFormatter): string {
        fmt.indentPush();
        const bb = this.statements.map((stmt) => fmt.indent(stmt.emit(fmt))).join("\n");
        fmt.indentPop();

        return this.isScoping ? `{${bb}${fmt.indent("}")}` : `{|${bb}${fmt.indent("|}")}`;
    }
}

abstract class BodyImplementation {
    readonly sinfo: SourceInfo;
    readonly file: string;

    constructor(sinfo: SourceInfo, file: string) {
        this.sinfo = sinfo;
        this.file = file;
    }

    abstract emit(fmt: CodeFormatter, headerstr: string | undefined): string;
}

class AbstractBodyImplementation extends BodyImplementation {
    constructor(sinfo: SourceInfo, file: string) {
        super(sinfo, file);
    }

    emit(fmt: CodeFormatter, headerstr: string | undefined): string {
        if(headerstr === undefined) {
            return ";";
        }
        else {
            return headerstr + ";";
        }
    }
}

class PredicateUFBodyImplementation extends BodyImplementation {
    constructor(sinfo: SourceInfo, file: string) {
        super(sinfo, file);
    }

    emit(fmt: CodeFormatter, headerstr: string | undefined): string {
        if(headerstr === undefined) {
            return "%* Uninterpreted Function as predicate for checking *%;";
        }
        else {
            return headerstr + "%* Uninterpreted Function as predicate for checking *%;";
        }
    }
}

class BuiltinBodyImplementation extends BodyImplementation {
    readonly builtin: string;

    constructor(sinfo: SourceInfo, file: string, builtin: string) {
        super(sinfo, file);

        this.builtin = builtin;
    }

    emit(fmt: CodeFormatter, headerstr: string | undefined): string {
        if(headerstr === undefined) {
            return ` = ${this.builtin};`;
        }
        else {
            return " = " + headerstr + this.builtin + ";";
        }
    }
}

class SynthesisBodyImplementation extends BodyImplementation {
    constructor(sinfo: SourceInfo, file: string) {
        super(sinfo, file);
    }

    emit(fmt: CodeFormatter, headerstr: string | undefined): string {
        let hstr = "";
        if(headerstr !== undefined) {
            hstr = " " + headerstr;
        }

        if(fmt === undefined) {
            return `{${hstr} $?_; }`;
        }
        else {
            fmt.indentPush();
            const bb = fmt.indent("$?_;");
            fmt.indentPop();

            return `{${hstr}\n${bb}\n${fmt.indent("}")}`;
        }
    }
}

class ExpressionBodyImplementation extends BodyImplementation {
    readonly exp: Expression;

    constructor(sinfo: SourceInfo, file: string, exp: Expression) {
        super(sinfo, file);
        this.exp = exp;
    }

    emit(fmt: CodeFormatter, headerstr: string | undefined): string {
        let hstr = "";
        if(headerstr !== undefined) {
            hstr = " " + headerstr;
        }

        return `${hstr} ${this.exp.emit(true, fmt)}`;
    }
}

class StandardBodyImplementation extends BodyImplementation {
    readonly statements: Statement[];

    constructor(sinfo: SourceInfo, file: string, statements: Statement[]) {
        super(sinfo, file);
        this.statements = statements;
    }

    emit(fmt: CodeFormatter, headerstr: string | undefined): string {
        let hstr = "";
        if(headerstr !== undefined) {
            hstr = headerstr + "\n" + fmt.indent("");
        }

        fmt.indentPush();
        const bb = this.statements.map((stmt, i) => {
            let ss = stmt.emit(fmt);
            if(i !== this.statements.length - 1) {
                return ss;
            }
            else {
                if(stmt.tag === StatementTag.IfElseStatement || stmt.tag === StatementTag.SwitchStatement || stmt.tag === StatementTag.MatchStatement || stmt.tag === StatementTag.BlockStatement) {
                    return ss + "\n";
                }
                else {
                    return ss;
                }
            }
        }).join("\n");
        fmt.indentPop();

        return `${hstr}{\n${bb}\n${fmt.indent("}")}`;
    }
}
