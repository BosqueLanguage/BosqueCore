declare namespace BSQAssembly;

concept AbstractDecl {
    field file: String;
    field sinfo: SourceInfo;

    field fullns: List<CString>; %% Useful for namespace resolution in our cppemitter
    field declaredInNS: NamespaceKey;
}

datatype ConditionDecl provides AbstractDecl using {
    field diagnosticTag: Option<CString>;
    field ikey: InvokeKey;
    field exp: Expression;
}
of
PreConditionDecl {
    field issoft: Bool;
}
| PostConditionDecl {
    field issoft: Bool;
}
| InvariantDecl {
}
| ValidateDecl {
}
;

entity DeclarationAttibute {
    field name: Identifier;
    field tags: List<(|TypeSignature, CString|)>; %%tags are enum names
    field text: Option<CString>;
}

concept AbstractCoreDecl provides AbstractDecl {
    field attributes: List<DeclarationAttibute>;
    field name: Identifier;
}

entity InvokeParameterDecl {
    field pname: Identifier;
    field ptype: TypeSignature;
    field defaultval: Option<Expression>;
    field isRefParam: Bool;
    field isRestParam: Bool;
}

concept AbstractInvokeDecl provides AbstractCoreDecl {
    field ikey: InvokeKey;
    field irecursive: RecursiveAnnotation;

    field params: List<InvokeParameterDecl>;
    field resultType: TypeSignature;

    field body: BodyImplementation;
}

concept ExplicitInvokeDecl provides AbstractInvokeDecl {
    field preconditions: List<PreConditionDecl>;
    field postconditions: List<PostConditionDecl>;
}

concept FunctionInvokeDecl provides ExplicitInvokeDecl {
}

enum FunctionDeclKindTag {
    Function,
    Predicate,
    ErrTest,
    ChkTest,
    Example
}

entity NamespaceFunctionDecl provides FunctionInvokeDecl {
    field fkind: FunctionDeclKindTag;
}

entity TypeFunctionDecl provides FunctionInvokeDecl {
    field completens: List<CString>; %% For ns resolution, the fullns field is generally lacking 'Core'
    field completeikey: InvokeKey; %% For easily grabbing name
}

datatype MethodDecl provides ExplicitInvokeDecl using {
    field isThisRef: Bool;
    field ofrcvrtype: NominalTypeSignature; %%Type type that this method is defined in (as opposed to the declaration type which differs for overrides)
}
of
MethodDeclStatic { }
| MethodDeclAbstract {}
| MethodDeclVirtual {}
| MethodDeclOverride { 
    field overrideintype: NominalTypeSignature; %%The type that declares this override method
}
;

entity TaskMethodDecl provides ExplicitInvokeDecl {
    field isSelfRef: Bool;
}

entity TaskActionDecl provides ExplicitInvokeDecl {
}

entity ConstMemberDecl provides AbstractCoreDecl {
    field declaredInType: NominalTypeSignature;

    field declaredType: TypeSignature;
    field value: Expression;
}

entity MemberFieldDecl provides AbstractCoreDecl {
    field declaredInType: NominalTypeSignature;

    field declaredType: TypeSignature;
    field defaultValue: Option<Expression>;
    field isSpecialAccess: Bool;
}

entity SaturatedFieldInfo {
    field declaredInType: NominalTypeSignature;
    field fname: Identifier;
    field ftype: TypeSignature;
    field hasdefault: Bool;
}

entity SaturatedInvariantInfo {
    field ikey: InvokeKey;
    field declaredInType: NominalTypeSignature;
    field file: String;
    field sinfo: SourceInfo;
    field tag: Option<CString>;
}

concept AbstractNominalTypeDecl provides AbstractDecl {
    field tkey: TypeKey;

    field invariants: List<InvariantDecl>;
    field validates: List<ValidateDecl>;

    field absmethods: List<InvokeKey>;
    field virtmethods: List<InvokeKey>;
    field overmethods: List<InvokeKey>;
    field staticmethods: List<InvokeKey>;

    field saturatedProvides: List<NominalTypeSignature>;
    field saturatedBFieldInfo: List<SaturatedFieldInfo>;

    field allInvariants: List<SaturatedInvariantInfo>;
    field allValidates: List<SaturatedInvariantInfo>;

    method hasValidates(): Bool {
        return \/(!this.allInvariants.empty(), !this.allValidates.empty());
    }

    method hasInvariants(): Bool {
        return !this.allInvariants.empty();
    }
}

concept AbstractEntityTypeDecl provides AbstractNominalTypeDecl {
}

entity EnumTypeDecl provides AbstractEntityTypeDecl {
    field members: List<CString>;
}

entity TypedeclTypeDecl provides AbstractEntityTypeDecl {
    field valuetype: NominalTypeSignature;
}

entity TypedeclStringOfTypeDecl provides AbstractEntityTypeDecl {
    field valuetype: NominalTypeSignature;
    field ofexp: Expression;
}

concept InternalEntityTypeDecl provides AbstractEntityTypeDecl {
}

entity PrimitiveEntityTypeDecl provides InternalEntityTypeDecl {
}

datatype ConstructableTypeDecl provides InternalEntityTypeDecl 
of
OkTypeDecl { field oktype: TypeSignature; field failtype: TypeSignature; }
| FailTypeDecl { field oktype: TypeSignature; field failtype: TypeSignature; }
| APIRejectedTypeDecl { }
| APIFailedTypeDecl { }
| APIErrorTypeDecl { }
| APISuccessTypeDecl { }
| SomeTypeDecl { field oftype: TypeSignature; }
| MapEntryTypeDecl { field ktype: NominalTypeSignature; field vtype: TypeSignature; }
;

datatype CollectionTypeDecl provides InternalEntityTypeDecl 
of
ListTypeDecl { field oftype: TypeSignature; }
| StackTypeDecl { }
| QueueTypeDecl { }
| SetTypeDecl { }
| MapTypeDecl { field oftype: NominalTypeSignature; field ktype: NominalTypeSignature; field vtype: TypeSignature; }
;

entity EventListTypeDecl provides InternalEntityTypeDecl {
    field ttype: TypeSignature;
}

entity EntityTypeDecl provides AbstractEntityTypeDecl {
    field fields: List<MemberFieldDecl>;
}

concept AbstractConceptTypeDecl provides AbstractNominalTypeDecl {
    field subtypes: List<TypeKey>;
}

datatype PrimitiveConceptTypeDecl provides AbstractConceptTypeDecl 
of
OptionTypeDecl { 
    field oftype: TypeSignature; 
    field someType: TypeSignature;
}
| ResultTypeDecl {
    field ttype: TypeSignature; 
    field etype: TypeSignature;

    field okType: TypeSignature;
    field failType: TypeSignature;
}
| APIResultTypeDecl {
    field ttype: TypeSignature;

    field errorType: TypeSignature;
    field failedType: TypeSignature;
    field rejectedType: TypeSignature;
    field successType: TypeSignature;
}
;

entity ConceptTypeDecl provides AbstractConceptTypeDecl {
    field fields: List<MemberFieldDecl>;
}

entity DatatypeMemberEntityTypeDecl provides AbstractEntityTypeDecl {
    field fields: List<MemberFieldDecl>;
    field parentTypeDecl: NominalTypeSignature;
}

entity DatatypeTypeDecl provides AbstractConceptTypeDecl {
    field fields: List<MemberFieldDecl>;
    field associatedMemberEntityDecls: List<NominalTypeSignature>;
}

%%
%% TODO: missing task related stuff
%%

entity NamespaceConstDecl provides AbstractCoreDecl {
    field declaredType: TypeSignature;
    field value: Expression;
}

entity Assembly {
    field nsconsts: List<NamespaceConstDecl>;
    field typeconsts: List<ConstMemberDecl>;
    
    field nsfuncs: Map<InvokeKey, NamespaceFunctionDecl>;
    field typefuncs: Map<InvokeKey, TypeFunctionDecl>;
    
    field absmethods: Map<InvokeKey, MethodDeclAbstract>;
    field virtmethods: Map<InvokeKey, MethodDeclVirtual>;
    field overmethods: Map<InvokeKey, MethodDeclOverride>;
    field staticmethods: Map<InvokeKey, MethodDeclStatic>;

    field enums: Map<TypeKey, EnumTypeDecl>;
    field typedecls: Map<TypeKey, TypedeclTypeDecl>;

    field primtives: Map<TypeKey, PrimitiveEntityTypeDecl>;
    field constructables: Map<TypeKey, ConstructableTypeDecl>;
    field collections: Map<TypeKey, CollectionTypeDecl>;

    field entities: Map<TypeKey, EntityTypeDecl>;
    field datamembers: Map<TypeKey, DatatypeMemberEntityTypeDecl>;

    field pconcepts: Map<TypeKey, PrimitiveConceptTypeDecl>;
    field concepts: Map<TypeKey, ConceptTypeDecl>;

    field datatypes: Map<TypeKey, DatatypeTypeDecl>;

    field allfuncs: List<InvokeKey>;
    field allmethods: List<InvokeKey>;
    field allvmethods: List<InvokeKey>;

    field allconcretetypes: List<TypeKey>;
    field allabstracttypes: List<TypeKey>;

    method lookupNominalTypeDeclaration(tkey: TypeKey): AbstractNominalTypeDecl {
        if(this.enums.has(tkey)) {
            return this.enums.get(tkey);
        }
        elif(this.typedecls.has(tkey)) {
            return this.typedecls.get(tkey);
        }
        elif(this.primtives.has(tkey)) {
            return this.primtives.get(tkey);
        }
        elif(this.constructables.has(tkey)) {
            return this.constructables.get(tkey);
        }
        elif(this.collections.has(tkey)) {
            return this.collections.get(tkey);
        }
        elif(this.entities.has(tkey)) {
            return this.entities.get(tkey);
        }
        elif(this.datamembers.has(tkey)) {
            return this.datamembers.get(tkey);
        }
        elif(this.pconcepts.has(tkey)) {
            return this.pconcepts.get(tkey);
        }
        elif(this.concepts.has(tkey)) {
            return this.concepts.get(tkey);
        }
        elif(this.datatypes.has(tkey)) {
            return this.datatypes.get(tkey);
        }
        else {
            %% Unknown type key
            abort;
        }
    }

    method tryLookupInvokeImplDeclaration(ikey: InvokeKey): Option<ExplicitInvokeDecl> {
        if(this.nsfuncs.has(ikey)) {
            return some(this.nsfuncs.get(ikey));
        }
        elif(this.typefuncs.has(ikey)) {
            return some(this.typefuncs.get(ikey));
        }
        elif(this.virtmethods.has(ikey)) {
            return some(this.virtmethods.get(ikey));
        }
        elif(this.overmethods.has(ikey)) {
            return some(this.overmethods.get(ikey));
        }
        elif(this.staticmethods.has(ikey)) {
            return some(this.staticmethods.get(ikey));
        }
        else {
            return none;
        }
    }

    method tryGetImplicitInvariantInfo(ikey: InvokeKey): Option<(|ConditionDecl, AbstractNominalTypeDecl|)> {
        %%TODO: we may want to move this into a setup where we have a map of ikey to invariant 

        let cc = this.allconcretetypes.tryFind(pred(tkey) => {
            let tt = this.lookupNominalTypeDeclaration(tkey);
            return tt.invariants.someOf(pred(ii) => ii.ikey === ikey) || tt.validates.someOf(pred(ii) => ii.ikey === ikey);
        });

        if(cc)@some {
            let tt = this.lookupNominalTypeDeclaration($cc);

            let ii = tt.invariants.tryFind(pred(ii) => ii.ikey === ikey);
            if(ii)@some {
                return some((|$ii, tt|));
            }
            else {
                return some((|tt.validates.find(pred(ii) => ii.ikey === ikey), tt|));
            }
        }

        let ac = this.allconcretetypes.tryFind(pred(tkey) => {
            let tt = this.lookupNominalTypeDeclaration(tkey);
            return tt.invariants.someOf(pred(ii) => ii.ikey === ikey) || tt.validates.someOf(pred(ii) => ii.ikey === ikey);
        });

        if(ac)@some {
            let tt = this.lookupNominalTypeDeclaration($ac);

            let ii = tt.invariants.tryFind(pred(ii) => ii.ikey === ikey);
            if(ii)@some {
                return some((|$ii, tt|));
            }
            else {
                return some((|tt.validates.find(pred(ii) => ii.ikey === ikey), tt|));
            }
        }

        return none;
    }

    method tryGetImplicitPrePostConditionInfo(ikey: InvokeKey): Option<(|ConditionDecl, ExplicitInvokeDecl|)> {
        %%TODO: we may want to move this into a setup where we have a map of ikey to invariant

        let ffopt = this.allfuncs.tryFind(pred(fkey) => {
            let fdecl = this.tryLookupInvokeImplDeclaration(fkey)@some;
            return fdecl.preconditions.someOf(pred(pdecl) => pdecl.ikey === ikey) || fdecl.postconditions.someOf(pred(pdecl) => pdecl.ikey === ikey);
        });

        if(ffopt)@some {
            let fdecl = this.tryLookupInvokeImplDeclaration($ffopt)@some;

            let ii = fdecl.preconditions.tryFind(pred(ii) => ii.ikey === ikey);
            if(ii)@some {
                return some((|$ii, fdecl|));
            }
            else {
                return some((|fdecl.postconditions.find(pred(ii) => ii.ikey === ikey), fdecl|));
            }
        }

        let mmopt = this.allmethods.tryFind(pred(mkey) => {
            let mdecl = this.tryLookupInvokeImplDeclaration(mkey)@some;
            return mdecl.preconditions.someOf(pred(pdecl) => pdecl.ikey === ikey) || mdecl.postconditions.someOf(pred(pdecl) => pdecl.ikey === ikey);
        });

        if(mmopt)@some {
            let mdecl = this.tryLookupInvokeImplDeclaration($mmopt)@some;

            let ii = mdecl.preconditions.tryFind(pred(ii) => ii.ikey === ikey);
            if(ii)@some {
                return some((|$ii, mdecl|));
            }
            else {
                return some((|mdecl.postconditions.find(pred(ii) => ii.ikey === ikey), mdecl|));
            }
        }

        let vmopt = this.allvmethods.tryFind(pred(mkey) => {
            let mdecl = this.tryLookupInvokeImplDeclaration(mkey)@some;
            return mdecl.preconditions.someOf(pred(pdecl) => pdecl.ikey === ikey) || mdecl.postconditions.someOf(pred(pdecl) => pdecl.ikey === ikey);
        });
    
        if(vmopt)@some {
            let mdecl = this.tryLookupInvokeImplDeclaration($vmopt)@some;

            let ii = mdecl.preconditions.tryFind(pred(ii) => ii.ikey === ikey);
            if(ii)@some {
                return some((|$ii, mdecl|));
            }
            else {
                return some((|mdecl.postconditions.find(pred(ii) => ii.ikey === ikey), mdecl|));
            }
        }

        return none;
    }

    method gatherInvariantAndValidateFunctions(): List<InvokeKey> {
        let cinvs = this.allconcretetypes
            .map<AbstractNominalTypeDecl>(fn(tkey) => this.lookupNominalTypeDeclaration(tkey))
            .filter(pred(tdecl) => !tdecl.invariants.empty())
            .map<List<InvokeKey>>(fn(tdecl) => tdecl.invariants.map<InvokeKey>(fn(idecl) => idecl.ikey));
            
        let cvalidates = this.allconcretetypes
            .map<AbstractNominalTypeDecl>(fn(tkey) => this.lookupNominalTypeDeclaration(tkey))
            .filter(pred(tdecl) => !tdecl.validates.empty())
            .map<List<InvokeKey>>(fn(tdecl) => tdecl.validates.map<InvokeKey>(fn(idecl) => idecl.ikey));

        let ainvs = this.allabstracttypes
            .map<AbstractNominalTypeDecl>(fn(tkey) => this.lookupNominalTypeDeclaration(tkey))
            .filter(pred(tdecl) => !tdecl.invariants.empty())
            .map<List<InvokeKey>>(fn(tdecl) => tdecl.invariants.map<InvokeKey>(fn(idecl) => idecl.ikey));

        let avalidates = this.allabstracttypes
            .map<AbstractNominalTypeDecl>(fn(tkey) => this.lookupNominalTypeDeclaration(tkey))
            .filter(pred(tdecl) => !tdecl.validates.empty())
            .map<List<InvokeKey>>(fn(tdecl) => tdecl.validates.map<InvokeKey>(fn(idecl) => idecl.ikey));

        return List<InvokeKey>::concat(List<InvokeKey>::concatAll(cinvs), List<InvokeKey>::concatAll(cvalidates), List<InvokeKey>::concatAll(ainvs), List<InvokeKey>::concatAll(avalidates));
    }

    method gatherPreAndPostConditions(): List<InvokeKey> {
        let nsfpre = this.allfuncs
            .map<ExplicitInvokeDecl>(fn(ikey) => this.tryLookupInvokeImplDeclaration(ikey)@some)
            .filter(pred(fdecl) => !fdecl.preconditions.empty())
            .map<List<InvokeKey>>(fn(fdecl) => fdecl.preconditions.map<InvokeKey>(fn(pdecl) => pdecl.ikey));
        let nsfpost = this.allfuncs
            .map<ExplicitInvokeDecl>(fn(ikey) => this.tryLookupInvokeImplDeclaration(ikey)@some)
            .filter(pred(fdecl) => !fdecl.postconditions.empty())
            .map<List<InvokeKey>>(fn(fdecl) => fdecl.postconditions.map<InvokeKey>(fn(pdecl) => pdecl.ikey));
    
xxxxxxx;

        let fpp = List<InvokeKey>::concat(List<InvokeKey>::concatAll(nsfpre), List<InvokeKey>::concatAll(nsfpost), List<InvokeKey>::concatAll(tfpre), List<InvokeKey>::concatAll(tfpost));
    
        let ampre = this.absmethods
            .filter(pred(mdecl) => !mdecl.preconditions.empty())
            .map<List<InvokeKey>>(fn(mdecl) => mdecl.preconditions.map<InvokeKey>(fn(pdecl) => pdecl.ikey));
        let ampost = this.absmethods
            .filter(pred(mdecl) => !mdecl.postconditions.empty())
            .map<List<InvokeKey>>(fn(mdecl) => mdecl.postconditions.map<InvokeKey>(fn(pdecl) => pdecl.ikey));

        let vmpre = this.virtmethods
            .filter(pred(mdecl) => !mdecl.preconditions.empty())
            .map<List<InvokeKey>>(fn(mdecl) => mdecl.preconditions.map<InvokeKey>(fn(pdecl) => pdecl.ikey));
        let vmpost = this.virtmethods
            .filter(pred(mdecl) => !mdecl.postconditions.empty())
            .map<List<InvokeKey>>(fn(mdecl) => mdecl.postconditions.map<InvokeKey>(fn(pdecl) => pdecl.ikey));
        
    

        return List<InvokeKey>::concat(fpp, mpp, smpp);
    }

    method isNominalTypeConcrete(tkey: TypeKey): Bool {
        return this.lookupNominalTypeDeclaration(tkey)?<AbstractEntityTypeDecl>;
    }

    method isPrimtitiveType(tkey: TypeKey): Bool {
        return this.lookupNominalTypeDeclaration(tkey)?<PrimitiveEntityTypeDecl>;
    }

    method isNominalTypeConcept(tkey: TypeKey): Bool {
        return this.lookupNominalTypeDeclaration(tkey)?<AbstractConceptTypeDecl>;
    }

    method isBoolType(t: TypeSignature): Bool {
        return t.tkeystr === 'Bool'<TypeKey>;
    }

    method areTypesSame(t1: TypeSignature, t2: TypeSignature): Bool {
        return t1.tkeystr === t2.tkeystr;
    }

    method isSubtypeOf(t1: TypeSignature, t2: TypeSignature): Bool {
        if(t1.tkeystr === t2.tkeystr) {
            return true;
        }
        else {
            if(t1.tkeystr === 'None'<TypeKey>) {
                let tt2 = this.lookupNominalTypeDeclaration(t2.tkeystr);
                return tt2?<OptionTypeDecl>;
            }
            else {
                let tt1 = this.lookupNominalTypeDeclaration(t1.tkeystr);
                return tt1.saturatedProvides.someOf(pred(st) => st.tkeystr === t2.tkeystr);
            }
        }
    }
}
