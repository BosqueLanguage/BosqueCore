%%The core namespace implements the primitive types used in the Bosque language
namespace Core;

%** Special type which all values are instances of. **%
__internal __universal concept Any {
}

%** Special type for representing all non-none values. **%
__internal __universal concept Some provides Any {
}

%** Special type for indicating a value can be used as a key in a collection. **%
__internal __universal concept KeyType provides Any {
    function equal<T KeyType>(a: T, b: T): Bool = special_method;
    function less<T KeyType>(a: T, b: T): Bool = special_method;
}

%** Type for indicating that a datatype is a Validator. **%
__internal __universal concept RegexValidator provides Any {
    function accepts<T: RegexValidator>(s: String): Bool = special_method;
}

%** Type for indicating that a datatype is a Validator. **%
__internal __universal concept ExRegexValidator provides Any {
    function accepts<T: ExRegexValidator>(s: ExString): Bool = special_method;
}

%** Type for indicating that a datatype is a Validator. **%
__internal __universal concept PathValidator provides Any {
}

%** Type for representing the none value. **%
__internal entity None provides KeyType {
}

%** Primitive boolean value. **%
__internal __typedeclable __typebase entity Bool provides Some, KeyType {
}

%** Primitive natural number value. **%
__internal __typedeclable __typebase __numeric entity Nat provides Some, KeyType {
}

%** Primitive integer value. **%
__internal __typedeclable __typebase __numeric entity Int provides Some, KeyType {
}

%** Primitive big-integer value. **%
__internal __typedeclable __typebase __numeric entity BigNat provides Some, KeyType {
}

%** Primitive big-integer value. **%
__internal __typedeclable __typebase __numeric entity BigInt provides Some, KeyType {
}

%** Primitive rational value. **%
__internal __typedeclable __typebase __numeric entity Rational provides Some {
}

%** Primitive float value. **%
__internal __typedeclable __typebase __numeric entity Float provides Some {
}

%** Primitive float decimal value. **%
__internal __typedeclable __typebase __numeric entity Decimal provides Some {
}

%** Primitive decimal degree value. **%
__internal __typedeclable __typebase __numeric entity DecimalDegree provides Some {
}

%** Primitive latitude/longitude value. **%
__internal __typedeclable __typebase entity LatLongCoordinate provides Some {
}

%** Primitive complex number value. **%
__internal __typedeclable __typebase __numeric entity Complex provides Some {
}

%** Primitive string value. **%
__internal __typedeclable __typebase entity String provides Some, KeyType {
}

%** Primitive safe string value. **%
__internal __constructable __typedeclable entity StringOf<T: RegexValidator> provides Some, KeyType {
    private function s_into(s: String): StringOf<T> = special_inject;
    method value(): String = special_extract;

    function coerce(s: String): StringOf<T> {
        assert RegexValidator::accepts<T>(s);
        return StringOf<T>::s_into(s);
    }
}

%** Primitive string value. **%
__internal __typedeclable __typebase entity ExString provides Some, KeyType {
}

%** Primitive safe string value. **%
__internal __constructable __typedeclable entity ExStringOf<T: ExRegexValidator> provides Some, KeyType {
    private function s_into(s: ExString): ExStringOf<T> = special_inject;
    method value(): ExString = special_extract;

    function coerce(s: ExString): ExStringOf<T> {
        assert ExRegexValidator::accepts<T>(s);
        return ExStringOf<T>::s_into(s);
    } 
}

%** Primitive unicode regex value. **%
__internal entity UnicodeRegex provides Some {
    __safe internal function s_accepts(re: UnicodeRegex, s: String): Bool = regex_accepts;

    method accepts(s: String): Bool {
        return UnicodeRegex::s_accepts(this, s);
    }
}

%** Primitive unicode regex value. **%
__internal entity ExRegex provides Some {
    __safe internal function s_accepts(re: ExRegex, s: ExString): Bool = regex_accepts;

    method accepts(s: ExString): Bool {
        return Regex::s_accepts(this, s);
    }
}

%** Primitive unicode regex value. **%
__internal entity PathRegex provides Some {
}

%** Primitive template string value. **%
__internal __typedeclable __typebase entity TemplateString provides Some {
}


%** Primitive string value. **%
__internal __typedeclable __typebase entity ExTemplateString provides Some {
}

namespace Interpolate {
    %** Special declaration of string interpolation function. **%
    function string(): String = special_method;

    %** Special declaration of string interpolation function. **%
    function stringOf<T: RegexValidator>(): StringOf<T> = special_method;

    %** Special declaration of string interpolation function. **%
    function Ex(): ExString = special_method;

    %** Special declaration of string interpolation function. **%
    function ExOf<T: RegexValidator>(): ExStringOf<T> = special_method;
}

%** All actual entities/concepts implicitly provide this concept. **%
__internal __universal concept Object provides Some {
}

#if CHECK_LIBS
internal function s_blockingfailure<T>(): T = s_blockingfailure;

internal function s_reshavoc<T>(): T = s_reshavoc;
#endif

%** All collections provide this concept so we can expand them with spread operators. **%
__internal __universal concept Expandoable<T> provides Some {
}

__assume_safe internal function s_safeAs<T, U>(v: T): U = special_function;

