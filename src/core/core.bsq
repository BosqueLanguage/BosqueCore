%%The core namespace implements the primitive types used in the Bosque language
declare namespace Core;

%** Special type for indicating a value can be used as a key in a collection. **%
namespace KeyComparator {
    function equal<T: keytype>(a: T, b: T): Bool = special_method;
    function less<T: keytype>(a: T, b: T): Bool = special_method;
}

%** Type for representing the option value. **%
__internal concept Option<T> {
}

%** Type for representing the none option value. **%
__internal entity None {
}

%** Type for representing the some option value. **%
__internal entity Some<T> provides Option<T> {
}

%** Primitive boolean value. **%
__internal __typedeclable __keycomparable entity Bool {
}

%** Primitive natural number value. **%
__internal __typedeclable __keycomparable __numeric entity Nat {
#if STRIPPED_CORE
#else
    const zero: Nat = 0n;
    const one: Nat = 1n;
#endif %% STRIPPED_CORE
}

%** Primitive integer value. **%
__internal __typedeclable __keycomparable __numeric entity Int {
#if STRIPPED_CORE
#else
    const zero: Int = 0i;
    const one: Int = 1i;
#endif %% STRIPPED_CORE
}

%** Primitive big-integer value. **%
__internal __typedeclable __keycomparable __numeric entity BigNat {
}

%** Primitive big-integer value. **%
__internal __typedeclable __keycomparable __numeric entity BigInt {
}

%** Primitive rational value. **%
__internal __typedeclable __numeric entity Rational {
}

%** Primitive float value. **%
__internal __typedeclable __numeric entity Float {
#if STRIPPED_CORE
#else
    const zero: Float = 0.0f;
    const one: Float = 1.0f;

    const pi: Float = 3.1415926535897931f;
    const e: Float = 2.7182818284590451f;

    function min(a: Float, b: Float): Float { return if(a < b) then a else b; }
    function max(a: Float, b: Float): Float { return if(a > b) then a else b; }

    function pow(x: Float, y: Float): Float {
        return NumericOps::s_floatPower(x, y);
    }

    function square(x: Float): Float {
        return x * x;
    }

    function cube(x: Float): Float {
        return x * x * x;
    }

    function sqrt(x: Float): Float
        requires x >= 0.0f;
    {
        return NumericOps::s_floatSqrt(x);
    }
#endif %% STRIPPED_CORE
}

%** Primitive float decimal value. **%
__internal __typedeclable __numeric entity Decimal {
}

%** Primitive decimal degree value. **%
__internal __typedeclable __numeric entity DecimalDegree {
}

%** Primitive latitude/longitude value. **%
__internal __typedeclable entity LatLongCoordinate {
}

%** Primitive complex number value. **%
__internal __typedeclable __numeric entity Complex {
}

%** Primitive string value. **%
__internal __typedeclable __keycomparable entity String {
}

%** Primitive string value. **%
__internal __typedeclable __keycomparable entity CString {
#if STRIPPED_CORE
#else
    %** Check if the string is empty **%
    method empty(): Bool {
        return CStringOps::s_empty(this);
    }

    %** Check if the string starts with the given prefix **%
    method startsWithString(prefix: CString): Bool {
        return CStringOps::s_startsWithString(this, prefix);
    }

    %** Check if the string ends with the given suffix **%
    method endsWithString(suffix: CString): Bool {
        return CStringOps::s_endsWithString(this, suffix);
    }

    %** Append CString s to back of this **%
    method append(s: CString): CString {
        return CStringOps::s_concat2(this, s);
    }

    %** Prepend CString s to the front of this **%
    method prepend(s: CString): CString {
        return CStringOps::s_concat2(s, this);
    }

    %** Concatenate all of the strings **%
    function concat(...strs: List<CString>): CString {
        if(strs.empty()) {
            return '';
        }
        else {
            return strs.reduce<CString>('', fn(acc, s) => CStringOps::s_concat2(acc, s));
        }
    }

    %** Concatenate all of the strings in the list **%
    function concatAll(strs: List<CString>): CString {
        if(strs.empty()) {
            return '';
        }
        else {
            return strs.reduce<CString>('', fn(acc, s) => CStringOps::s_concat2(acc, s));
        }
    }

    %** Join all of the strings with the given separator **%
    function join(sep: CString, ...strs: List<CString>): CString {
        if(strs.empty()) {
            return '';
        }
        else {
            return strs.reduce<CString>('', fn(acc, s) => {
                if(acc.empty()) {
                    return s;
                }
                else {
                    return CStringOps::s_concat2(CStringOps::s_concat2(acc, sep), s);
                }
            });
        }
    }

    %** Concatenate all of the strings in the list (using the given separator) **%
    function joinAll(sep: CString, strs: List<CString>): CString {
        if(strs.empty()) {
            return '';
        }
        else {
            return strs.reduce<CString>('', fn(acc, s) => {
                if(acc.empty()) {
                    return s;
                }
                else {
                    return CStringOps::s_concat2(CStringOps::s_concat2(acc, sep), s);
                }
            });
        }
    }

    %%%%
    %%TODO: we want to support regex versions of these operations too

    %** Remove a given prefix string **%
    method removePrefixString(prefix: CString): CString 
        requires this.startsWithString(prefix);
    {
        return CStringOps::s_removePrefixString(this, prefix);
    }
    
    %** Remove a given suffix string **%
    method removeSuffixString(suffix: CString): CString 
        requires this.endsWithString(suffix);
    {
        return CStringOps::s_removeSuffixString(this, suffix);
    }
#endif %% STRIPPED_CORE
}

%** Primitive unicode regex value. **%
__internal entity Regex {
    __safe internal function s_accepts(re: Regex, s: String): Bool = regex_accepts;
    %*
    method accepts(s: String): Bool {
        return Regex::s_accepts(this, s);
    }
    *%
}

%** Primitive unicode regex value. **%
__internal entity CRegex {
    __safe internal function s_accepts(re: CRegex, s: CString): Bool = cregex_accepts;
    %*
    method accepts(s: CString): Bool {
        return CRegex::s_accepts(this, s);
    }
    *%
}

%** Primitive unicode regex value. **%
__internal entity PathRegex {
}

%** Primitive path value. **%
__internal __typedeclable __keycomparable entity Path {
}

%** Primitive path item value. **%
__internal __typedeclable __keycomparable entity PathItem {
}

%** Primitive path glob value. **%
__internal __typedeclable __keycomparable entity Glob {
}

%** Result type. **%
__internal concept Result<T, E> {
    __internal entity Ok provides Result<T, E> {
    }

    __internal entity Fail provides Result<T, E> {
    }
}

namespace Interpolate {
    %** Special declaration of string interpolation function. **%
    function string(): String = special_method;

    %** Special declaration of string interpolation function. **%
    function cstring(): CString = special_method;
}

namespace XCore {
#if CHECK_LIBS
    internal function s_blockingfailure<T>(): T = s_blockingfailure;

    internal function s_reshavoc<T>(): T = s_reshavoc;
#endif

    __assume_safe internal function s_safeas<T, U>(v: T): U = special_function;
    __assume_safe internal function s_createDirect<T, U>(t: T): U = special_function;
}


