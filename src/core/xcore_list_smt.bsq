namespace Core;

#if STRIPPED_CORE
#else
#if SMT_LIBS
namespace ListOps {
    datatype Vector<T>
    of
    Vector0 { }
    | Vector1 { field i0: T; }
    | Vector2 { field i0: T; field i1: T; }
    | Vector3 { field i0: T; field i1: T; field i2: T; }
    ;

    function s_list_empty<T>(l: List<T>): Bool {
        return l.value?<Vector0<T>>;
    }

    function s_list_size<T>(l: List<T>): Nat {
        let ll = l.value;
        match(ll) {
            Vector0<T> => { return 0n; }
            | Vector1<T> => { return 1n; }
            | Vector2<T> => { return 2n; }
            | Vector3<T> => { return 3n; }
        }
    }

    function s_list_front<T>(l: List<T>): T {
        let ll = l.value;
        match(ll)@ {
            Vector1<T> => { return $ll.i0; }
            | Vector2<T> => { return $ll.i0; }
            | _ => { return XCore::s_safeas<Vector<T>, Vector3<T>>($ll).i0; }
        }
    }

    function s_list_back<T>(l: List<T>): T {
        let ll = l.value;
        match(ll)@ {
            Vector1<T> => { return $ll.i0; }
            | Vector2<T> => { return $ll.i1; }
            | _ => { return XCore::s_safeas<Vector<T>, Vector3<T>>($ll).i2; }
        }
    }

    function s_list_get<T>(l: List<T>, idx: Nat): T {
        let ll = l.value;
        match(ll)@ {
            Vector1<T> => { 
                return $ll.i0; 
            }
            | Vector2<T> => {
                if(idx == 0n) {
                    return $ll.i0;
                } 
                else {
                    return $ll.i1;
                } 
            }
            | _ => {
                let ll3 = XCore::s_safeas<Vector<T>, Vector3<T>>($ll);
                if(idx == 0n) {
                    return ll3.i0;
                } 
                elif(idx == 1n) {
                    return ll3.i1;
                } 
                else {
                    return ll3.i2;
                }
            }
        }
    }

    function s_list_set_front<T>(l: List<T>, v: T): List<T> {
        let ll = l.value;
        match(ll)@ {
            Vector1<T> => { return XCore::s_createDirect<Vector<T>, List<T>>(Vector1<T>{v}); }
            | Vector2<T> => { return XCore::s_createDirect<Vector<T>, List<T>>(Vector2<T>{v, $ll.i1}); }
            | _ => {
                let ll3 = XCore::s_safeas<Vector<T>, Vector3<T>>($ll);
                return XCore::s_createDirect<Vector<T>, List<T>>(Vector3<T>{v, ll3.i1, ll3.i2});
            }
        }
    }

    function s_list_set_back<T>(l: List<T>, v: T): List<T> {
        let ll = l.value;
        match(ll)@ {
            Vector1<T> => { return XCore::s_createDirect<Vector<T>, List<T>>(Vector1<T>{v}); }
            | Vector2<T> => { return XCore::s_createDirect<Vector<T>, List<T>>(Vector2<T>{$ll.i0, v}); }
            | _ => {
                let ll3 = XCore::s_safeas<Vector<T>, Vector3<T>>($ll);
                return XCore::s_createDirect<Vector<T>, List<T>>(Vector3<T>{ll3.i0, ll3.i1, v});
            }
        }
    }

    function s_list_set<T>(l: List<T>, idx: Nat, v: T): List<T> {
        let ll = l.value;
        match(ll)@ {
            Vector1<T> => { 
                return XCore::s_createDirect<Vector<T>, List<T>>(Vector1<T>{v});
            }
            | Vector2<T> => {
                if(idx == 0n) {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector2<T>{v, $ll.i1});
                } 
                else {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector2<T>{$ll.i0, v});
                } 
            }
            | _ => {
                let ll3 = XCore::s_safeas<Vector<T>, Vector3<T>>($ll);
                if(idx == 0n) {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector3<T>{v, ll3.i1, ll3.i2});
                } 
                elif(idx == 1n) {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector3<T>{ll3.i0, v, ll3.i2});
                } 
                else {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector3<T>{ll3.i0, ll3.i1, v});
                }
            }
        }
    }

    function s_list_push_front<T>(l: List<T>, v: T): List<T>  {
        let ll = l.value;
        match(ll)@ {
            Vector0<T> => { return XCore::s_createDirect<Vector<T>, List<T>>(Vector1<T>{v}); }
            | Vector1<T> => { return XCore::s_createDirect<Vector<T>, List<T>>(Vector2<T>{v, $ll.i0}); }
            | Vector2<T> => { return XCore::s_createDirect<Vector<T>, List<T>>(Vector3<T>{v, $ll.i0, $ll.i1}); }
            | Vector3<T> => { return XCore::s_blockingfailure<List<T>>(); }
        }
    }

    function s_list_push_back<T>(l: List<T>, v: T): List<T> {
        let ll = l.value;
        match(ll)@ {
            Vector0<T> => { return XCore::s_createDirect<Vector<T>, List<T>>(Vector1<T>{v}); }
            | Vector1<T> => { return XCore::s_createDirect<Vector<T>, List<T>>(Vector2<T>{$ll.i0, v}); }
            | Vector2<T> => { return XCore::s_createDirect<Vector<T>, List<T>>(Vector3<T>{$ll.i0, $ll.i1, v}); }
            | Vector3<T> => { return XCore::s_blockingfailure<List<T>>(); }
        }
    }

    function s_list_insert<T>(l: List<T>, idx: Nat, v: T): List<T> = s_list_insert;

    function s_list_pop_front<T>(l: List<T>): T, List<T> = s_list_pop_front;
    function s_list_pop_back<T>(l: List<T>): T, List<T> = s_list_pop_back;
    function s_list_delete_front<T>(l: List<T>): List<T> = s_list_delete_front;
    function s_list_delete_back<T>(l: List<T>): List<T> = s_list_delete_back;
    function s_list_delete<T>(l: List<T>, idx: Nat): List<T> = s_list_delete;

    function s_list_create_empty<T>(): List<T> {
        return XCore::s_createDirect<Vector<T>, List<T>>(Vector0<T>{});
    }

    function s_list_create_1<T>(v1: T): List<T> {
        return XCore::s_createDirect<Vector<T>, List<T>>(Vector1<T>{v1});
    }

    function s_list_create_2<T>(v1: T, v2: T): List<T> {
        return XCore::s_createDirect<Vector<T>, List<T>>(Vector2<T>{v1, v2});
    }

    function s_list_create_3<T>(v1: T, v2: T, v3: T): List<T> {
        return XCore::s_createDirect<Vector<T>, List<T>>(Vector3<T>{v1, v2, v3});
    }

    function s_concat2<T>(l1: List<T>, l2: List<T>): List<T> {
        let ll1 = l1.value;
        match(ll1)@ {
            Vector0<T> => { 
                return l2; 
            }
            | Vector1<T> => { 
                let ll2 = l2.value;
                match(ll2)@ {
                    Vector0<T> => { return l1; }
                    | Vector1<T> => { return XCore::s_createDirect<Vector<T>, List<T>>(Vector2<T>{$ll1.i0, $ll2.i0}); }
                    | Vector2<T> => { return XCore::s_createDirect<Vector<T>, List<T>>(Vector3<T>{$ll1.i0, $ll2.i0, $ll2.i1}); }
                    | Vector3<T> => { return XCore::s_blockingfailure<List<T>>(); }
                }
            }
            | Vector2<T> => {
                let ll2 = l2.value;
                match(ll2)@ {
                    Vector0<T> => { return l1; }
                    | Vector1<T> => { return XCore::s_createDirect<Vector<T>, List<T>>(Vector3<T>{$ll1.i0, $ll1.i1, $ll2.i0}); }
                    | _ => { return XCore::s_blockingfailure<List<T>>(); }
                }
            }
            | Vector3<T> => {
                let ll2 = l2.value;
                match(ll2)@ {
                    Vector0<T> => { return l1; }
                    | _ => { return XCore::s_blockingfailure<List<T>>(); }
                }
            }
        }
    }

    function s_list_reverse<T>(l: List<T>): List<T> = s_list_reverse;

    function s_list_firstk<T>(l: List<T>, k: Nat): List<T> {
        let ll = l.value;
        match(ll)@ {
            Vector0<T> => { 
                return XCore::s_createDirect<Vector<T>, List<T>>(Vector0<T>{});
            }
            | Vector1<T> => { 
                if(k == 0n) {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector0<T>{});
                } 
                else {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector1<T>{$ll.i0});
                }
            }
            | Vector2<T> => { 
                if(k == 0n) {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector0<T>{});
                }
                elif(k == 1n) {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector1<T>{$ll.i0});
                } 
                else {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector2<T>{$ll.i0, $ll.i1});
                }
            }
            | Vector3<T> => { 
                if(k == 0n) {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector0<T>{});
                }
                elif(k == 1n) {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector1<T>{$ll.i0});
                } 
                elif(k == 2n) {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector2<T>{$ll.i0, $ll.i1});
                } 
                else {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector3<T>{$ll.i0, $ll.i1, $ll.i2});
                }
            }
        }
    }

    function s_list_lastk<T>(l: List<T>, k: Nat): List<T> = s_list_lastk;

    function s_list_shiftk<T>(l: List<T>, k: Nat): List<T> {
        let ll = l.value;
        match(ll)@ {
            Vector0<T> => { 
                return XCore::s_createDirect<Vector<T>, List<T>>(Vector0<T>{});
            }
            | Vector1<T> => { 
                if(k == 0n) {
                    return l;
                } 
                else {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector0<T>{});
                }
            }
            | Vector2<T> => { 
                if(k == 0n) {
                    return l;
                }
                elif(k == 1n) {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector1<T>{$ll.i1});
                } 
                else {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector0<T>{});
                }
            }
            | Vector3<T> => { 
                if(k == 0n) {
                    return l;
                }
                elif(k == 1n) {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector2<T>{$ll.i1, $ll.i2});
                } 
                elif(k == 2n) {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector1<T>{$ll.i2});
                } 
                else {
                    return XCore::s_createDirect<Vector<T>, List<T>>(Vector0<T>{});
                }
            }
        }
    }

    function s_list_popk<T>(l: List<T>, k: Nat): List<T> = s_list_takek;

    recursive? function s_list_allof<T>(l: List<T>, p: recursive? pred(T) -> Bool): Bool {
        let ll = l.value;
        match(ll)@ {
            Vector0<T> => { return true; }
            | Vector1<T> => { let p0 = p[recursive?]($ll.i0); return p0; }
            | Vector2<T> => { let p0 = p[recursive?]($ll.i0); if(!p0) { return false; } else { let p1 = p[recursive?]($ll.i1); return p1; } }
            | Vector3<T> => { let p0 = p[recursive?]($ll.i0); if(!p0) { return false; } else { let p1 = p[recursive?]($ll.i1); if(!p1) { return false; } else { let p2 = p[recursive?]($ll.i2); return p2; } } }
        }
    }

    recursive? function s_list_noneof<T>(l: List<T>, p: recursive? pred(T) -> Bool): Bool {
        let ll = l.value;
        match(ll)@ {
            Vector0<T> => { return true; }
            | Vector1<T> => { let p0 = p[recursive?]($ll.i0); return !p0; }
            | Vector2<T> => { let p0 = p[recursive?]($ll.i0); if(p0) { return false; } else { let p1 = p[recursive?]($ll.i1); return !p1; } }
            | Vector3<T> => { let p0 = p[recursive?]($ll.i0); if(p0) { return false; } else { let p1 = p[recursive?]($ll.i1); if(p1) { return false; } else { let p2 = p[recursive?]($ll.i2); return !p2; } } }
        }
    }

    recursive? function s_list_someof<T>(l: List<T>, p: recursive? pred(T) -> Bool): Bool {
        let ll = l.value;
        match(ll)@ {
            Vector0<T> => { return false; }
            | Vector1<T> => { let p0 = p[recursive?]($ll.i0); return p0; }
            | Vector2<T> => { let p0 = p[recursive?]($ll.i0); if(p0) { return true; } else { let p1 = p[recursive?]($ll.i1); return p1; } }
            | Vector3<T> => { let p0 = p[recursive?]($ll.i0); if(p0) { return true; } else { let p1 = p[recursive?]($ll.i1); if(p1) { return true; } else { let p2 = p[recursive?]($ll.i2); return p2; } } }
        }
    }

    recursive? function s_list_map<T, U>(l: List<T>, f: recursive? fn(T) -> U): List<U> {
        let ll = l.value;
        match(ll)@ {
            Vector0<T> => { return XCore::s_createDirect<Vector<U>, List<U>>(Vector0<U>{}); }
            | Vector1<T> => { let v0 = f[recursive?]($ll.i0); return XCore::s_createDirect<Vector<U>, List<U>>(Vector1<U>{v0}); }
            | Vector2<T> => { let v0 = f[recursive?]($ll.i0); let v1 = f[recursive?]($ll.i1); return XCore::s_createDirect<Vector<U>, List<U>>(Vector2<U>{v0, v1}); }
            | Vector3<T> => { let v0 = f[recursive?]($ll.i0); let v1 = f[recursive?]($ll.i1); let v2 = f[recursive?]($ll.i2); return XCore::s_createDirect<Vector<U>, List<U>>(Vector3<U>{v0, v1, v2}); }
        }
    }

    recursive? function s_list_mapidx<T, U>(l: List<T>, f: recursive? fn(T, Nat) -> U): List<U>  {
        let ll = l.value;
        match(ll)@ {
            Vector0<T> => { return XCore::s_createDirect<Vector<U>, List<U>>(Vector0<U>{}); }
            | Vector1<T> => { let v0 = f[recursive?]($ll.i0, 0n); return XCore::s_createDirect<Vector<U>, List<U>>(Vector1<U>{v0}); }
            | Vector2<T> => { let v0 = f[recursive?]($ll.i0, 0n); let v1 = f[recursive?]($ll.i1, 1n); return XCore::s_createDirect<Vector<U>, List<U>>(Vector2<U>{v0, v1}); }
            | Vector3<T> => { let v0 = f[recursive?]($ll.i0, 0n); let v1 = f[recursive?]($ll.i1, 1n); let v2 = f[recursive?]($ll.i2, 2n); return XCore::s_createDirect<Vector<U>, List<U>>(Vector3<U>{v0, v1, v2}); }
        }
    }

    recursive? function s_list_find<T>(l: List<T>, p: recursive? pred(T) -> Bool): Option<T> = s_list_find;
    recursive? function s_list_find_last<T>(l: List<T>, p: recursive? pred(T) -> Bool): Option<T> = s_list_find_last;

    function s_list_contains<T: keytype>(l: List<T>, v: T): Bool = s_list_contains;

    recursive? function s_list_filter<T>(l: List<T>, p: recursive? pred(T) -> Bool): List<T> = s_list_filter;
    recursive? function s_list_filteridx<T>(l: List<T>, p: recursive? pred(T, Nat) -> Bool): List<T> = s_list_filteridx;

    recursive? function s_list_reduce<T, U>(l: List<T>, init: U, f: recursive? fn(U, T) -> U): U {
        let ll = l.value;
        match(ll)@ {
            Vector0<T> => { return init; }
            | Vector1<T> => { let r0 = f[recursive?](init, $ll.i0); return r0; }
            | Vector2<T> => { let r0 = f[recursive?](init, $ll.i0); let r1 = f[recursive?](r0, $ll.i1); return r1; }
            | Vector3<T> => { let r0 = f[recursive?](init, $ll.i0); let r1 = f[recursive?](r0, $ll.i1); let r2 = f[recursive?](r1, $ll.i2); return r2; }
        }
    }

    recursive? function s_list_lreduce<T, U>(l: List<T>, init: U, f: recursive? fn(U, T) -> U): U = s_list_lreduce;
    recursive? function s_list_transduce<T, E, U>(l: List<T>, environment: E, f: recursive? fn(E, T) -> (|E, U|)): E, List<U> = s_list_transduce;
    recursive? function s_list_ltransduce<T, E, U>(l: List<T>, environment: E, f: recursive? fn(E, T) -> (|E, U|)): E, List<U> = s_list_ltransduce;

    function s_list_sum<T: numeric>(l: List<T>, zero: T): T {
        let ll = l.value;
        match(ll)@ {
            Vector0<T> => { return zero; }
            | Vector1<T> => { return $ll.i0; }
            | Vector2<T> => { return $ll.i0 + $ll.i1; }
            | Vector3<T> => { return $ll.i0 + $ll.i1 + $ll.i2; }
        }
    }

    function s_sorted_key_merge<T: keytype>(l1: List<T>, l2: List<T>): List<T> = s_sorted_key_merge;
    function s_sort_key<T: keytype>(l: List<T>): List<T> = s_sort_key_uniqueify;
    function s_sorted_key_merge_unique<T: keytype>(l1: List<T>, l2: List<T>): List<T> = s_sorted_key_merge;
    function s_sort_key_uniqueify<T: keytype>(l: List<T>): List<T> = s_sort_key_uniqueify;
}
#else
#endif %% SMT_LIBS
#endif %% STRIPPED_CORE
