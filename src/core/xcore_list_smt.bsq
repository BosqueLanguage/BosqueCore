namespace Core;

#if STRIPPED_CORE
#else
#if SMT_LIBS
namespace ListOps {
    function s_list_empty<T>(l: List<T>): Bool = s_list_empty;
    function s_list_size<T>(l: List<T>): Nat = s_list_size;

    function s_list_front<T>(l: List<T>): T = s_list_front;
    function s_list_back<T>(l: List<T>): T = s_list_back;
    function s_list_get<T>(l: List<T>, idx: Nat): T = s_list_get;

    function s_list_set_front<T>(l: List<T>, v: T): List<T> = s_list_set_front;
    function s_list_set_back<T>(l: List<T>, v: T): List<T> = s_list_set_back;
    function s_list_set<T>(l: List<T>, idx: Nat, v: T): List<T> = s_list_set;

    function s_list_push_front<T>(l: List<T>, v: T): List<T> = s_list_push_front;
    function s_list_push_back<T>(l: List<T>, v: T): List<T> = s_list_push_back;
    function s_list_insert<T>(l: List<T>, idx: Nat, v: T): List<T> = s_list_insert;

    function s_list_create_empty<T>(): List<T> = s_list_create_empty;

    function s_concat2<T>(l1: List<T>, l2: List<T>): List<T> = s_list_concat2;

    recursive? function s_list_allof<T>(l: List<T>, p: recursive? pred(T) -> Bool): Bool = s_list_allof;
    recursive? function s_list_noneof<T>(l: List<T>, p: recursive? pred(T) -> Bool): Bool = s_list_noneof;
    recursive? function s_list_someof<T>(l: List<T>, p: recursive? pred(T) -> Bool): Bool = s_list_someof;

    recursive? function s_list_map<T, U>(l: List<T>, f: recursive? fn(T) -> U): List<U> = s_list_map;
    recursive? function s_list_mapidx<T, U>(l: List<T>, f: recursive? fn(T, Nat) -> U): List<U> = s_list_mapidx;

    recursive? function s_list_find<T>(l: List<T>, p: recursive? pred(T) -> Bool): Option<T> = s_list_find;
    recursive? function s_list_find_last<T>(l: List<T>, p: recursive? pred(T) -> Bool): Option<T> = s_list_find_last;

    function s_list_contains<T: keytype>(l: List<T>, v: T): Bool = s_list_contains;

    recursive? function s_list_filter<T>(l: List<T>, p: recursive? pred(T) -> Bool): List<T> = s_list_filter;
    recursive? function s_list_filteridx<T>(l: List<T>, p: recursive? pred(T, Nat) -> Bool): List<T> = s_list_filteridx;

    recursive? function s_list_reduce<T, U>(l: List<T>, init: U, f: recursive? fn(U, T) -> U): U = s_list_reduce;
    recursive? function s_list_transduce<T, E, U>(l: List<T>, environment: E, f: recursive? fn(E, T) -> (|E, U|)): E, List<U> = s_list_transduce;

    function s_list_sum<T: numeric>(l: List<T>, zero: T): T = s_list_sum;
}
#else
#endif %% SMT_LIBS
#endif %% STRIPPED_CORE
