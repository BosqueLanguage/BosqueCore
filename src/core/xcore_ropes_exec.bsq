namespace Core;

namespace CCharBufferOps {
    function s_create_empty(): CCharBuffer = ccharbuffer_create_empty;
    function s_create_1(c1: CChar): CCharBuffer = ccharbuffer_create_1;
    function s_create_2(c1: CChar, c2: CChar): CCharBuffer = ccharbuffer_create_2;
    function s_create_3(c1: CChar, c2: CChar, c3: CChar): CCharBuffer = ccharbuffer_create_3;
    function s_create_4(c1: CChar, c2: CChar, c3: CChar, c4: CChar): CCharBuffer = ccharbuffer_create_4;
    function s_create_5(c1: CChar, c2: CChar, c3: CChar, c4: CChar, c5: CChar): CCharBuffer = ccharbuffer_create_5;
    function s_create_6(c1: CChar, c2: CChar, c3: CChar, c4: CChar, c5: CChar, c6: CChar): CCharBuffer = ccharbuffer_create_6;
    function s_create_7(c1: CChar, c2: CChar, c3: CChar, c4: CChar, c5: CChar, c6: CChar, c7: CChar): CCharBuffer = ccharbuffer_create_7;
    function s_create_8(c1: CChar, c2: CChar, c3: CChar, c4: CChar, c5: CChar, c6: CChar, c7: CChar, c8: CChar): CCharBuffer = ccharbuffer_create_8;

    function s_create_from_cstring(s: CString): CCharBuffer = ccharbuffer_create_from_cstring;
}

__internal entity CCharBuffer {
    function fromCString(s: CString): CCharBuffer {
        return CCharBufferOps::s_create_from_cstring(s);
    }
}

#if STRIPPED_CORE
#else
#if EXEC_LIBS
namespace CRopeOps {
    function s_create_from_cstring(s: CString): CRope {
        %% Temporary to ensure the compiler is setup right
        if(s.size() > 8n) {
            abort;
        }

        let buf: CCharBuffer = CCharBuffer::fromCString(s);
        return XCore::s_createDirect<Rope, CRope>(Rope::createLeaf(s.size(), buf));
    }
    
    datatype Rope of 
        Leaf{ len: Nat, buffer: CCharBuffer }
        | Node { weight: Nat, l: Rope, r: Rope }
    & {
        function createLeaf(len: Nat, buf: CCharBuffer): Leaf {
            return Leaf{ len, buf };
        }

        function createNode(w: Nat, l: Rope, r: Rope): Node {
            return Node{ w, l, r };
        }
    }
} %% namespace CRopeOps

namespace UnicodeRopeOps {

} %% namespace RopeOps
#else
#endif %% EXEC_LIBS
#endif %% STRIPPED_CORE