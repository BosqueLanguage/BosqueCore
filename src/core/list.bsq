namespace Core;

namespace List {
}

__internal entity List<T> {
#if STRIPPED_CORE
#else
    method empty(): Bool {
        return ListOps::s_list_empty<T>(this);
    }

    method size(): Nat {
        return ListOps::s_list_size<T>(this);
    }

    method lastIndex(): Nat 
        requires !ListOps::s_list_empty<T>(this);
    {
        return ListOps::s_list_size<T>(this) - 1n;
    }

    method front(): T 
        requires !ListOps::s_list_empty<T>(this);
    {
        return ListOps::s_list_front<T>(this);
    }

    method back(): T 
        requires !ListOps::s_list_empty<T>(this);
    {
        return ListOps::s_list_back<T>(this);
    }

    method get(i: Nat): T 
        requires i < ListOps::s_list_size<T>(this);
    {
        return ListOps::s_list_get<T>(this, i);
    }

    method pushBack(v: T): List<T> {
        return ListOps::s_list_push_back<T>(this, v);
    }

    recursive? method map<U>(f: recursive? fn(T) -> U): List<U> {
        if(ListOps::s_list_empty<T>(this)) {
            return List<U>{};
        }
        else {
            return ListOps::s_list_map[recursive?]<T, U>(this, f);
        }
    }
#endif %% STRIPPED_CORE 
}
