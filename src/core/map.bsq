namespace Core;

namespace Map {
}

__internal entity MapEntry<K: keytype, V> {
}

__internal entity Map<K: keytype, V> {
#if STRIPPED_CORE
#else
    method empty(): Bool {
        return MapOps::s_map_empty<K, V>(this);
    }

    method size(): Nat {
        return MapOps::s_map_size<K, V>(this);
    }

    method isSingleElement(): Bool {
        return MapOps::s_map_size<K, V>(this) == 1n;
    }

    method single(): MapEntry<K, V>
        requires this.isSingleElement();
    {
        return MapOps::s_map_min<K, V>(this);
    }

    method kmin(): MapEntry<K, V>
        requires !this.empty();
    {
        return MapOps::s_map_min<K, V>(this);
    }

    method kmax(): MapEntry<K, V>
        requires !this.empty();
    {
        return MapOps::s_map_max<K, V>(this);
    }

    method has(k: K): Bool {
        return MapOps::s_map_has<K, V>(this, k);
    }

    method get(k: K): V 
        requires this.has(k);
    {
        return MapOps::s_map_get_direct<K, V>(this, k);
    }

    method tryGet(k: K): Option<V> {
        if(MapOps::s_map_empty<K, V>(this)) {
            return none;
        }
        else {
            return MapOps::s_map_get_option<K, V>(this, k);
        }
    }

    method insert(k: K, v: V): Map<K, V> 
        requires !this.has(k);
    {
        return MapOps::s_map_insert<K, V>(this, k, v);
    }

    method delete(k: K): Map<K, V>
        requires this.has(k);
    {
        return MapOps::s_map_delete<K, V>(this, k);
    }

    method set(k: K, v: V): Map<K, V> 
        requires this.has(k);
    {
        return MapOps::s_map_set<K, V>(this, k, v);
    }

    function union(...maps: List<Map<K, V>>): Map<K, V> {
        if(maps.empty()) {
            return Map<K, V>{};
        }
        else {
            if(maps.isSingleElement()) {
                return maps.single();
            }
            else {
                return maps.reduce<Map<K, V>>(Map<K, V>{}, fn(acc, m) => MapOps::s_map_union2<K, V>(acc, m));
            }
        }
    }

    function unionAll(maps: List<Map<K, V>>): Map<K, V> {
        if(maps.empty()) {
            return Map<K, V>{};
        }
        else {
            if(maps.isSingleElement()) {
                return maps.single();
            }
            else {
                return maps.reduce<Map<K, V>>(Map<K, V>{}, fn(acc, m) => MapOps::s_map_union2<K, V>(acc, m));
            }
        }
    }

    recursive? method map<U>(f: recursive? fn(K, V) -> U): Map<K, U> {
        if(MapOps::s_map_empty<K, V>(this)) {
            return Map<K, U>{};
        }
        else {
            return MapOps::s_map_map<K, V, U>(this, f);
        }
    }

    recursive? method reduce<U>(init: U, f: recursive? fn(U, K, V) -> U): U {
        if(MapOps::s_map_empty<K, V>(this)) {
            return init;
        }
        else {
            return MapOps::s_map_reduce<K, V, U>(this, init, f);
        }
    }

#endif %% STRIPPED_CORE
}
