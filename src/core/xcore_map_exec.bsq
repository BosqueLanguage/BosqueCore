namespace Core;

#if STRIPPED_CORE
#else
#if EXEC_LIBS
namespace MapOps {
    function s_map_empty<K: keytype, V>(m: Map<K, V>): Bool {
        return m.value?<BBLeaf<K, V>>;
    }

    function s_map_size<K: keytype, V>(m: Map<K, V>): Nat {
        return size<K, V>(m.value);
    }

    function s_map_min<K: keytype, V>(m: Map<K, V>): MapEntry<K, V> {
        return min<K, V>(m.value);
    }

    function s_map_max<K: keytype, V>(m: Map<K, V>): MapEntry<K, V> {
        return max<K, V>(m.value);
    }

    function s_map_has<K: keytype, V>(m: Map<K, V>, k: K): Bool {
        if(m.value?<BBLeaf<K, V>>) {
            return false;
        }
        else {
            return has<K, V>(m.value, k);
        }
    }

    function s_map_get_direct<K: keytype, V>(m: Map<K, V>, k: K): V {
        return get_direct<K, V>(m.value, k);
    }

    function s_map_get_option<K: keytype, V>(m: Map<K, V>, k: K): Option<V> {
        return get_option<K, V>(m.value, k);
    }

    function s_map_insert<K: keytype, V>(m: Map<K, V>, k: K, v: V): Map<K, V> {
        return XCore::s_createDirect<Tree<K, V>, Map<K, V>>(insert<K, V>(m.value, k, v));
    }

    function s_map_delete<K: keytype, V>(m: Map<K, V>, k: K): Map<K, V> {
        return XCore::s_createDirect<Tree<K, V>, Map<K, V>>(delete<K, V>(m.value, k));
    }

    function s_map_set<K: keytype, V>(m: Map<K, V>, k: K, v: V): Map<K, V> {
        if(m.value?<BBLeaf<K, V>>) {
            return XCore::s_createDirect<Tree<K, V>, Map<K, V>>(Tree<K, V>::createLeaf(MapEntry<K, V>{k, v}));
        }
        else {
            return XCore::s_createDirect<Tree<K, V>, Map<K, V>>(set<K, V>(m.value, k, v));
        }
    }

    function s_map_union2<K: keytype, V>(m1: Map<K, V>, m2: Map<K, V>): Map<K, V> {
        if(s_map_empty<K, V>(m1)) {
            return m2;
        }
        elif(s_map_empty<K, V>(m2)) {
            return m1;
        }
        else {
            return MapOps::s_map_reduce<K, V, Map<K, V>>(m1, m2, fn(mm: Map<K, V>, k: K, v: V): Map<K, V> => MapOps::s_map_insert<K, V>(mm, k, v));
        }
    }

    recursive? function s_map_map<K: keytype, V, U>(m: Map<K, V>, f: recursive? fn(K, V) -> U): Map<K, U> {
        return XCore::s_createDirect<Tree<K, U>, Map<K, U>>(Tree<K, V>::map[recursive]<U>(m.value, f));
    }

    recursive? function s_map_reduce<K: keytype, V, U>(m: Map<K, V>, init: U, f: recursive? fn(U, K, V) -> U): U {
        return Tree<K, V>::reduce[recursive?]<U>(m.value, init, f);
    }

    function s_map_mergei2<K: keytype, V>(m1: Map<K, V>, m2: Map<K, V>): Map<K, V> {
        if(s_map_empty<K, V>(m1)) {
            return m2;
        }
        elif(s_map_empty<K, V>(m2)) {
            return m1;
        }
        else {
            return MapOps::s_map_reduce<K, V, Map<K, V>>(m1, m2, fn(mm: Map<K, V>, k: K, v: V): Map<K, V> => {
                if(mm.has(k)) {
                    return mm;
                } 
                else {
                    return MapOps::s_map_insert<K, V>(mm, k, v);
                }
            });
        }
    }

    function s_map_mergec2<K: keytype, V>(m1: Map<K, V>, m2: Map<K, V>, f: recursive? fn(V, V) -> V): Map<K, V> {
        if(s_map_empty<K, V>(m1)) {
            return m2;
        }
        elif(s_map_empty<K, V>(m2)) {
            return m1;
        }
        else {
            return MapOps::s_map_reduce[recursive?]<K, V, Map<K, V>>(m1, m2, recursive? fn(mm: Map<K, V>, k: K, v: V): Map<K, V> => {
                if(!mm.has(k)) {
                    return MapOps::s_map_insert<K, V>(mm, k, v);
                } 
                else {
                    return MapOps::s_map_set<K, V>(mm, k, f[recursive](MapOps::s_map_get_direct<K, V>(mm, k), v));
                }
            });
        }
    }

    function s_map_create_empty<K: keytype, V>(): Map<K, V> {
        return XCore::s_createDirect<Tree<K, V>, Map<K, V>>(Tree<K, V>::emptyTree);
    }

    function s_map_create_1<K: keytype, V>(v1: MapEntry<K, V>): Map<K, V> {
        return XCore::s_createDirect<Tree<K, V>, Map<K, V>>(Tree<K, V>::createLeaf(v1));
    }

    function s_map_create_2<K: keytype, V>(v1: MapEntry<K, V>, v2: MapEntry<K, V>): Map<K, V> {
        assert !KeyComparator::equal<K>(v1.key, v2.key);

        if(KeyComparator::less<K>(v1.key, v2.key)) {
            return XCore::s_createDirect<Tree<K, V>, Map<K, V>>(
                Tree<K, V>::createNode(Color#Black, 
                    Tree<K, V>::createLeaf(v1), 
                    Tree<K, V>::createLeaf(v2)
                )
            );
        } else {
            return XCore::s_createDirect<Tree<K, V>, Map<K, V>>(
                Tree<K, V>::createNode(Color#Black,
                    Tree<K, V>::createLeaf(v2), 
                    Tree<K, V>::createLeaf(v1)
                )
            );
        }
    }

    enum Color {
        Red,
        Black,
        BB,
        NB
    }

    function computeColor<K: keytype, V>(t: Tree<K, V>): Color {
        match(t)@ {
            BBLeaf<K, V> => { return Color#Black; }
            | Leaf<K, V> => { return Color#Black; }
            | Node<K, V> => { return $t.c; }
        }
    }

    recursive function checkRBChildColorInvariant<K: keytype, V>(t: Tree<K, V>): Bool {
        if(t)@@!<Node<K, V>> {
            return true;
        }

        if(t.c === Color#Red) {
            let islred = if(t.l)@<Node<K, V>> then $_.c === Color#Red  else false;
            let isrred = if(t.r)@<Node<K, V>> then $_.c === Color#Red  else false;

            %% We want to return true if neither child is red
            return !\/(islred, isrred);
        }
        
        return checkRBChildColorInvariant[recursive]<K, V>(t.l) && checkRBChildColorInvariant[recursive]<K, V>(t.r);
    }

    recursive function checkRBPathLengthInvariant<K: keytype, V>(t: Tree<K, V>): Int {
        if(t)@@!<Node<K, V>> {
            return 0i;
        }

        let lc = checkRBPathLengthInvariant[recursive]<K, V>(t.l);
        if(lc == -1i) {
            return -1i;
        }

        let rc = checkRBPathLengthInvariant[recursive]<K, V>(t.r);
        if(rc == -1i) {
            return -1i;
        }

        if(lc != rc) {
            return -1i; %% we have a black height mismatch return sentinel value
        }

        return if(t.c === Color#Black) then lc + 1i else lc;
    }

    function checkRBInvariants<K: keytype, V>(t: Tree<K, V>): Bool {
       return checkRBChildColorInvariant<K, V>(t) && checkRBPathLengthInvariant<K, V>(t) >= 0i;
    }

    function blacken(c: Color): Color {
        assert c !== Color#BB;

        switch(c) {
            Color#Black => { return Color#BB; }
            | Color#Red => { return Color#Black; }
            | _         => { return Color#Red; }
        }
    }

    function redden(c: Color): Color {
        assert c !== Color#NB;

        switch(c) {
            Color#BB      => { return Color#Black; }
            | Color#Black => { return Color#Red; }
            | _           => { return Color#NB; }
        }
    }

    %% Case where we have a double red violation on LL side -- tleft = Node{Red, _, Node{Red, _ a, b}, c}
    function balanceHelper_RR_LL<K: keytype, V>(c: Color, tleft: Tree<K, V>, tright: Tree<K, V>): Option<Node<K, V>> {
        if(/\(c !== Color#Black, c !== Color#BB)) {
            return none;
        }

        if (tleft)@@!<Node<K, V>> {
            return none;
        }

        let lleft = tleft.l;
        if(lleft)@@!<Node<K, V>> {
            return none;
        }
            
        if(\/(tleft.c !== Color#Red, lleft.c !== Color#Red)) {
            return none;
        }

        let nl = Tree<K, V>::createNode(Color#Black, lleft.l, lleft.r);
        let nr = Tree<K, V>::createNode(Color#Black, tleft.r, tright);
        return some(Tree<K, V>::createNode(redden(c), nl, nr));
    }

    %% Case where we have a double red violation on LR side -- tleft = Node{Red, _, a, Node{Red, _, b, c}}
    function balanceHelper_RR_LR<K: keytype, V>(c: Color, tleft: Tree<K, V>, tright: Tree<K, V>): Option<Node<K, V>> {
        if(/\(c !== Color#Black, c !== Color#BB)) {
            return none;
        }

        if (tleft)@@!<Node<K, V>> {
            return none;
        }

        let lright = tleft.r;
        if(lright)@@!<Node<K, V>> {
            return none;
        }
            
        if(\/(tleft.c !== Color#Red, lright.c !== Color#Red)) {
            return none;
        }

        let nl = Tree<K, V>::createNode(Color#Black, tleft.l, lright.l);
        let nr = Tree<K, V>::createNode(Color#Black, lright.r, tright);
        return some(Tree<K, V>::createNode(redden(c), nl, nr));
    }

    %% Case where we have a double red violation on RL side -- tright = Node{Red, _, Node{Red, _, b, c}, d}
    function balanceHelper_RR_RL<K: keytype, V>(c: Color, tleft: Tree<K, V>, tright: Tree<K, V>): Option<Node<K, V>> {
        if(/\(c !== Color#Black, c !== Color#BB)) {
            return none;
        }

        if (tright)@@!<Node<K, V>> {
            return none;
        }

        let rleft = tright.l;
        if(rleft)@@!<Node<K, V>> {
            return none;
        }
            
        if(\/(tright.c !== Color#Red, rleft.c !== Color#Red)) {
            return none;
        }

        let nl = Tree<K, V>::createNode(Color#Black, tleft, rleft.l);
        let nr = Tree<K, V>::createNode(Color#Black, rleft.r, tright.r);
        return some(Tree<K, V>::createNode(redden(c), nl, nr));
    }

    %% Case where we have a double red violation on RR side -- tright = Node{Red, _, b, Node{Red, _, c, d}}
    function balanceHelper_RR_RR<K: keytype, V>(c: Color, tleft: Tree<K, V>, tright: Tree<K, V>): Option<Node<K, V>> {
        if(/\(c !== Color#Black, c !== Color#BB)) {
            return none;
        }

        if (tright)@@!<Node<K, V>> {
            return none;
        }

        let rright = tright.r;
        if(rright)@@!<Node<K, V>> {
            return none;
        }
            
        if(\/(tright.c !== Color#Red, rright.c !== Color#Red)) {
            return none;
        }

        let nl = Tree<K, V>::createNode(Color#Black, tleft, tright.l);
        let nr = Tree<K, V>::createNode(Color#Black, rright.l, rright.r);
        return some(Tree<K, V>::createNode(redden(c), nl, nr));
    }
    
    %% Case where we have negative blacks on L side -- tleft = Node{NB, _, Node{Black, _, a, b}, Node{Black, _, c, d}}
    recursive function balanceHelper_DB_L<K: keytype, V>(c: Color, tleft: Tree<K, V>, tright: Tree<K, V>): Option<Node<K, V>> {
        if(c !== Color#BB) {
            return none;
        }

        if (tleft)@@!<Node<K, V>> {
            return none;
        }

        if(tleft.c !== Color#NB) {
            return none;
        }

        let lleft = tleft.l;
        if(lleft)@@!<Node<K, V>> {
            return none;
        }

        let lright = tleft.r;
        if(lright)@@!<Node<K, V>> {
            return none;
        }

        if(\/(lleft.c !== Color#Black, lright.c !== Color#Black)) {
            return none;
        }

        let nl = balance[recursive]<K, V>(Color#Black, Tree<K, V>::createNode(Color#Red, lleft.l, lleft.r), lright.l);
        let nr = Tree<K, V>::createNode(Color#Black, lright.r, tright);
        return some(Tree<K, V>::createNode(Color#Black, nl, nr));
    }

    %% Case where we have negative blacks on R side -- tright = Node{NB, _, Node{Black, _, b, c}, Node{Black, _, d, e}}}
    recursive function balanceHelper_DB_R<K: keytype, V>(c: Color, tleft: Tree<K, V>, tright: Tree<K, V>): Option<Node<K, V>> {
        if(c !== Color#BB) {
            return none;
        }

        if (tright)@@!<Node<K, V>> {
            return none;
        }

        if(tright.c !== Color#NB) {
            return none;
        }

        let rleft = tright.l;
        if(rleft)@@!<Node<K, V>> {
            return none;
        }

        let rright = tright.r;
        if(rright)@@!<Node<K, V>> {
            return none;
        }

        if(\/(rleft.c !== Color#Black, rright.c !== Color#Black)) {
            return none;
        }

        let nl = Tree<K, V>::createNode(Color#Black, tleft, rleft.l);
        let nr = balance[recursive]<K, V>(Color#Black, rleft.r, Tree<K, V>::createNode(Color#Red, rright.l, rright.r));
        return some(Tree<K, V>::createNode(Color#Black, nl, nr));
    }

    recursive function balance<K: keytype, V>(c: Color, tleft: Tree<K, V>, tright: Tree<K, V>): Tree<K, V> {
        let doubleRedLL = balanceHelper_RR_LL<K, V>(c, tleft, tright);
        if(doubleRedLL)@!none {
            return $doubleRedLL;
        }

        let doubleRedLR = balanceHelper_RR_LR<K, V>(c, tleft, tright);
        if(doubleRedLR)@!none {
            return $doubleRedLR;
        }

        let doubleRedRL = balanceHelper_RR_RL<K, V>(c, tleft, tright);
        if(doubleRedRL)@!none {
            return $doubleRedRL;
        }

        let doubleRedRR = balanceHelper_RR_RR<K, V>(c, tleft, tright);
        if(doubleRedRR)@!none {
            return $doubleRedRR;
        }

        let negBlackL = balanceHelper_DB_L<K, V>(c, tleft, tright);
        if(negBlackL)@!none {
            return $negBlackL;
        }

        let negBlackR = balanceHelper_DB_R<K, V>(c, tleft, tright);
        if(negBlackR)@!none {
            return $negBlackR;
        }

        return Tree<K, V>::createNode(c, tleft, tright);
    }

    function bubble<K: keytype, V>(c: Color, tleft: Tree<K, V>, tright: Tree<K, V>): Tree<K, V> {
        %% Propagate up live subtree
        if(tleft)<BBLeaf<K, V>> {
            return tright;
        }
        if(tright)<BBLeaf<K, V>> {
            return tleft;
        }

        return balance<K, V>(c, tleft, tright);
    }

    function size<K: keytype, V>(t: Tree<K, V>): Nat {
        match(t)@ {
            BBLeaf<K, V> => { return 0n; }
            | Leaf<K, V> => { return 1n; }
            | Node<K, V> => { return $t.count; }
        }
    }

    function mink<K: keytype, V>(t: Tree<K, V>): K {
        if(t)@<Leaf<K, V>> {
            return $t.v.key;
        }

        return t@<Node<K, V>>.mink;
    }

    function maxk<K: keytype, V>(t: Tree<K, V>): K {
        if(t)@<Leaf<K, V>> {
            return $t.v.key;
        }

        return t@<Node<K, V>>.maxk;
    }

    recursive function min<K: keytype, V>(t: Tree<K, V>): MapEntry<K, V> {
        if(t)@<Leaf<K, V>> {
            return $t.v;
        }
        else {
            let nn = XCore::s_safeas<Tree<K, V>, Node<K, V>>(t);
            return min[recursive]<K, V>(nn.l);
        }
    }

    recursive function max<K: keytype, V>(t: Tree<K, V>): MapEntry<K, V> {
        if(t)@<Leaf<K, V>> {
            return $t.v;
        }
        else {
            let nn = XCore::s_safeas<Tree<K, V>, Node<K, V>>(t);
            return max[recursive]<K, V>(nn.r);
        }
    }

    recursive function has<K: keytype, V>(t: Tree<K, V>, k: K): Bool {
        match(t)@ {
            Leaf<K, V> => { return KeyComparator::equal<K>($t.v.key, k); }
            | BBLeaf<K, V> => { return false; }
            | Node<K, V> => {
                let nn = XCore::s_safeas<Tree<K, V>, Node<K, V>>(t);
                if(nn.r?<BBLeaf<K, V>>) {
                    return has[recursive]<K, V>(nn.l, k);
                }

                let rmin = mink<K, V>(nn.r);

                if(KeyComparator::less<K>(k, rmin)) {
                    return has[recursive]<K, V>(nn.l, k);
                } 
                else {
                    return has[recursive]<K, V>(nn.r, k);
                }
            }
        }
    }

    recursive function get_direct<K: keytype, V>(t: Tree<K, V>, k: K): V {
        match(t)@ {
            BBLeaf<K, V> => { abort; } %% No value
            | Leaf<K, V> => {
                assert KeyComparator::equal<K>($t.v.key, k);
            
                return $t.v.value;
            }
            | Node<K, V> => {
                let nn = XCore::s_safeas<Tree<K, V>, Node<K, V>>(t);
                if(nn.r?<BBLeaf<K, V>>) { %% Handle right tree being empty
                    return get_direct[recursive]<K, V>(nn.l, k);
                }

                let rmin = mink<K, V>(nn.r);

                if(KeyComparator::less<K>(k, rmin)) {
                    return get_direct[recursive]<K, V>(nn.l, k);
                } 
                else {
                    return get_direct[recursive]<K, V>(nn.r, k);
                }
            }
        }
    }

    recursive function get_option<K: keytype, V>(t: Tree<K, V>, k: K): Option<V> {
        match(t)@ {
            BBLeaf<K, V> => { return none; }
            | Leaf<K, V> => {
                if(!KeyComparator::equal<K>($t.v.key, k)) {
                    return none;
                }
                else {
                    return some($t.v.value);
                }
            }
            | Node<K, V> => {
                let nn = XCore::s_safeas<Tree<K, V>, Node<K, V>>(t);
                if(nn.r?<BBLeaf<K, V>>) { %% Handle right tree being empty
                    return get_option[recursive]<K, V>(nn.l, k);
                }

                let rmin = mink<K, V>(nn.r);

                if(KeyComparator::less<K>(k, rmin)) {
                    return get_option[recursive]<K, V>(nn.l, k);
                } 
                else {
                    return get_option[recursive]<K, V>(nn.r, k);
                }
            }
        }
    }

    recursive function insert_helper<K: keytype, V>(t: Tree<K, V>, k: K, v: V): Tree<K, V> {
        match(t)@ {
            BBLeaf<K, V> => {
                return Tree<K, V>::createLeaf(MapEntry<K, V>{k, v});               
            }
            | Leaf<K, V> => {
                assert !KeyComparator::equal<K>(k, $t.v.key);

                if(KeyComparator::less<K>(k, $t.v.key)) {
                    return Tree<K, V>::createNode(Color#Red, Tree<K, V>::createLeaf(MapEntry<K, V>{k, v}), $t);
                }
                else {
                    return Tree<K, V>::createNode(Color#Red, $t, Tree<K, V>::createLeaf(MapEntry<K, V>{k, v}));
                }
            }
            | Node<K, V> => { 
                let nn = XCore::s_safeas<Tree<K, V>, Node<K, V>>(t);
                let rmin = mink<K, V>(nn.r);

                if(KeyComparator::less<K>(k, rmin)) {
                    let nr = insert_helper[recursive]<K, V>($t.l, k, v);
                    return balance<K, V>($t.c, nr, $t.r); 
                }
                else {
                    let nr = insert_helper[recursive]<K, V>($t.r, k, v);
                    return balance<K, V>($t.c, $t.l, nr); 
                }
            }
        }
    }

    function insert<K: keytype, V>(t: Tree<K, V>, k: K, v: V): Tree<K, V> {
        if(t)<BBLeaf<K, V>> { 
            return Tree<K, V>::createLeaf(MapEntry<K, V>{k, v}); 
        }

        let tt = insert_helper<K, V>(t, k, v); 
        if (tt)@!<Node<K, V>> {
            return tt;
        }
        else {
            let nt = tt@<Node<K, V>>;
            let ntt = if(nt.c === Color#Red) then Tree<K, V>::createNode(Color#Black, nt.l, nt.r) else nt;
            
            return ntt;
        }
    }

    function set<K: keytype, V>(t: Tree<K, V>, k: K, v: V): Tree<K, V> {
        if(t)@<Leaf<K, V>> {
            assert KeyComparator::equal<K>($t.v.key, k);
            return Tree<K, V>::createLeaf(MapEntry<K, V>{k, v});
        }
        else {
            let nn = XCore::s_safeas<Tree<K, V>, Node<K, V>>(t);
            let rmin = mink<K, V>(nn.r);

            if(KeyComparator::less<K>(k, rmin)) {
                let nl = set<K, V>(nn.l, k, v);
                return balance<K, V>(nn.c, nl, nn.r);
            }
            else {
                let nr = set<K, V>(nn.r, k, v);
                return balance<K, V>(nn.c, nn.l, nr);
            }
        }
    }

    %% Replace target node with empty tree
    recursive function delete_helper<K: keytype, V>(t: Tree<K, V>, k: K): Tree<K, V> {
        match(t)@ {
            Leaf<K, V> => {             
                return Tree<K, V>::emptyTree;
            }
            | Node<K, V> => {
                let rmin = mink<K, V>($t.r);
                if(KeyComparator::less<K>(k, rmin)) {
                    let nl = delete_helper[recursive]<K, V>($t.l, k);
                    return bubble<K, V>($t.c, nl, $t.r);
                }
                else {
                    let nr = delete_helper[recursive]<K, V>($t.r, k);
                    return bubble<K, V>($t.c, $t.l, nr);
                }
            }
        }
    }

    function delete<K: keytype, V>(t: Tree<K, V>, k: K): Tree<K, V> {
        let nt = delete_helper[recursive]<K, V>(t, k);
        match(nt)@ {
            Node<K, V> => {
                let ntt = if($nt.c === Color#Red) 
                    then Tree<K, V>::createNode(Color#Black, $nt.l, $nt.r) 
                    else nt;

                return ntt;
            }
            | _ => { 
                return nt; 
            }
        }
    }

    datatype Tree<K: keytype, V> of 
        BBLeaf {}
        | Leaf { v: MapEntry<K, V> }
        | Node { c: Color, count: Nat, mink: K, maxk: K, l: Tree<K, V>, r: Tree<K, V> }
    & {
        const emptyTree: Tree<K, V> = BBLeaf<K, V>{};

        function createLeaf(v: MapEntry<K, V>): Leaf<K, V> {
            return Leaf<K, V>{v};
        }

        function createNode(c: Color, l: Tree<K, V>, r: Tree<K, V>): Node<K, V> {
            let nsize = size<K, V>(l) + size<K, V>(r);
            let nmink = if(l)@<BBLeaf<K, V>> then mink<K, V>(r) else mink<K, V>(l);
            let nmaxk = if(r)@<BBLeaf<K, V>> then maxk<K, V>(l) else maxk<K, V>(r);

            return Node<K, V>{c, nsize, nmink, nmaxk, l, r};
        }

        recursive? function map<U>(t: Tree<K, V>, f: recursive? fn(K, V) -> U): Tree<K, U> {
            match(t)@ {
                Leaf<K, V> => { 
                    let u = f[recursive?]($t.v.key, $t.v.value); 
                    return Tree<K, U>::createLeaf(MapEntry<K, U>{$t.v.key, u}); 
                }
                | Node<K, V> => { 
                    let nl = Tree<K, V>::map[recursive?]<U>($t.l, f);
                    let nr = Tree<K, V>::map[recursive?]<U>($t.r, f);
                    return Tree<K, U>::createNode($t.c, nl, nr);
                }
            }
        }

        recursive function reduce<U>(t: Tree<K, V>, acc: U, f: recursive? fn(U, K, V) -> U): U {
            match(t)@ {
                Leaf<K, V> => { 
                    return f[recursive?](acc, $t.v.key, $t.v.value);
                }
                | Node<K, V> => {
                    return Tree<K, V>::reduce[recursive]<U>($t.r, Tree<K, V>::reduce[recursive]<U>($t.l, acc, f), f);
                }
            }
        }
    }
}
#else
#endif %% EXEC_LIBS
#endif %% STRIPPED_CORE