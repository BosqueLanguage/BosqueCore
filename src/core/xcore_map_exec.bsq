amespace Core;

#if STRIPPED_CORE
#else
#if EXEC_LIBS
namespace ListOps {
    function s_map_empty<K: keytype, V>(m: Map<K, V>): Bool {
        return m.value?<BBLeaf<K, V>>;
    }

    function s_map_size<K: keytype, V>(m: Map<K, V>): Nat {
        return size<K, V>(m.value);
    }

    function s_map_min<K: keytype, V>(m: Map<K, V>): MapEntry<K, V> {
        return min<K, V>(m.value);
    }

    function s_map_max<K: keytype, V>(m: Map<K, V>): MapEntry<K, V> {
        return max<K, V>(m.value);
    }

    function s_map_has<K: keytype, V>(m: Map<K, V>, k: K): Bool {
        return has<K, V>(m.value, k);
    }

    function s_map_get<K: keytype, V>(m: Map<K, V>, k: K): V {
        return get<K, V>(m.value, k);
    }

    function s_map_insert<K: keytype, V>(m: Map<K, V>, k: K, v: V): Map<K, V> {
        return insert<K, V>(m.value, k, v);
    }

    function s_map_create_empty<K: keytype, V>(): Map<K, V> {
        return XCore::s_createDirect<Tree<K, V>, Map<K, V>>(Tree<K, V>::emptyTree);
    }

    function s_map_create_1<K: keytype, V>(v1: MapEntry<K, V>): Map<K, V> {
        return XCore::s_createDirect<Tree<T>, List<T>>(Tree<T>::createLeaf(v1));
    }

    function s_map_create_2<K: keytype, V>(v1: MapEntry<K, V>, v2: MapEntry<K, V>): Map<K, V> {
        assert !KeyComparator::equal<T>(v1.key, v2.key);

        if(KeyComparator::less<T>(v1.key, v2.key)) {
            return XCore::s_createDirect<Tree<T>, List<T>>(
                Tree<T>::createNode(Color#Black, 
                    Tree<T>::createLeaf(v1), 
                    Tree<T>::createLeaf(v2)
                )
            );
        } else {
            return XCore::s_createDirect<Tree<T>, List<T>>(
                Tree<T>::createNode(Color#Black, 
                    Tree<T>::createLeaf(v2), 
                    Tree<T>::createLeaf(v1)
                )
            );
        }
    }

    enum Color {
        Red,
        Black,
        BB,
        NB
    }

    function computeColor<T>(t: Tree<T>): Color {
        match(t)@ {
            BBLeaf<T> => { return Color#Black; }
            | Leaf<T> => { return Color#Black; }
            | Node<T> => { return $t.c; }
        }
    }

    recursive function checkRBChildColorInvariant<T>(t: Tree<T>): Bool {
        if(t)@@!<Node<T>> {
            return true;
        }

        if(t.c === Color#Red) {
            let islred = if(t.l)@<Node<T>> then $_.c === Color#Red  else false;
            let isrred = if(t.r)@<Node<T>> then $_.c === Color#Red  else false;

            return \/(islred, isrred);
        }
        
        return checkRBChildColorInvariant[recursive]<T>(t.l) && checkRBChildColorInvariant[recursive]<T>(t.r);
    }

    recursive function checkRBPathLengthInvariant<T>(t: Tree<T>): Int {
        if(t)@@!<Node<T>> {
            return 0i;
        }

        let lc = checkRBPathLengthInvariant[recursive]<T>(t.l);
        if(lc == -1i) {
            return -1i;
        }

        let rc = checkRBPathLengthInvariant[recursive]<T>(t.r);
        if(rc == -1i) {
            return -1i;
        }

        if(lc != rc) {
            return -1i; %% we have a black height mismatch return sentinel value
        }

        return if(t.c === Color#Black) then lc + 1i else lc;
    }

    function checkRBInvariants<T>(t: Tree<T>): Bool {
       return checkRBChildColorInvariant<T>(t) && checkRBPathLengthInvariant<T>(t) >= 0i;
    }

    function blacken(c: Color): Color {
        assert c !== Color#BB;

        switch(c) {
            Color#Black => { return Color#BB; }
            | Color#Red => { return Color#Black; }
            | _         => { return Color#Red; }
        }
    }

    function redden(c: Color): Color {
        assert c !== Color#NB;

        switch(c) {
            Color#BB      => { return Color#Black; }
            | Color#Black => { return Color#Red; }
            | _           => { return Color#NB; }
        }
    }

    %% Case where we have a double red violation on LL side -- tleft = Node{Red, _, Node{Red, _ a, b}, c}
    function balanceHelper_RR_LL<T>(c: Color, tleft: Tree<T>, tright: Tree<T>): Option<Node<T>> {
        if(/\(c !== Color#Black, c !== Color#BB)) {
            return none;
        }

        if (tleft)@@!<Node<T>> {
            return none;
        }

        let lleft = tleft.l;
        if(lleft)@@!<Node<T>> {
            return none;
        }
            
        if(\/(tleft.c !== Color#Red, lleft.c !== Color#Red)) {
            return none;
        }

        let nl = Tree<T>::createNode(Color#Black, lleft.l, lleft.r);
        let nr = Tree<T>::createNode(Color#Black, tleft.r, tright);
        return some(Tree<T>::createNode(redden(c), nl, nr));
    }

    %% Case where we have a double red violation on LR side -- tleft = Node{Red, _, a, Node{Red, _, b, c}}
    function balanceHelper_RR_LR<T>(c: Color, tleft: Tree<T>, tright: Tree<T>): Option<Node<T>> {
        if(/\(c !== Color#Black, c !== Color#BB)) {
            return none;
        }

        if (tleft)@@!<Node<T>> {
            return none;
        }

        let lright = tleft.r;
        if(lright)@@!<Node<T>> {
            return none;
        }
            
        if(\/(tleft.c !== Color#Red, lright.c !== Color#Red)) {
            return none;
        }

        let nl = Tree<T>::createNode(Color#Black, tleft.l, lright.l);
        let nr = Tree<T>::createNode(Color#Black, lright.r, tright);
        return some(Tree<T>::createNode(redden(c), nl, nr));
    }

    %% Case where we have a double red violation on RL side -- tright = Node{Red, _, Node{Red, _, b, c}, d}
    function balanceHelper_RR_RL<T>(c: Color, tleft: Tree<T>, tright: Tree<T>): Option<Node<T>> {
        if(/\(c !== Color#Black, c !== Color#BB)) {
            return none;
        }

        if (tright)@@!<Node<T>> {
            return none;
        }

        let rleft = tright.l;
        if(rleft)@@!<Node<T>> {
            return none;
        }
            
        if(\/(tright.c !== Color#Red, rleft.c !== Color#Red)) {
            return none;
        }

        let nl = Tree<T>::createNode(Color#Black, tleft, rleft.l);
        let nr = Tree<T>::createNode(Color#Black, rleft.r, tright.r);
        return some(Tree<T>::createNode(redden(c), nl, nr));
    }

    %% Case where we have a double red violation on RR side -- tright = Node{Red, _, b, Node{Red, _, c, d}}
    function balanceHelper_RR_RR<T>(c: Color, tleft: Tree<T>, tright: Tree<T>): Option<Node<T>> {
        if(/\(c !== Color#Black, c !== Color#BB)) {
            return none;
        }

        if (tright)@@!<Node<T>> {
            return none;
        }

        let rright = tright.r;
        if(rright)@@!<Node<T>> {
            return none;
        }
            
        if(\/(tright.c !== Color#Red, rright.c !== Color#Red)) {
            return none;
        }

        let nl = Tree<T>::createNode(Color#Black, tleft, tright.l);
        let nr = Tree<T>::createNode(Color#Black, rright.l, rright.r);
        return some(Tree<T>::createNode(redden(c), nl, nr));
    }
    
    %% Case where we have negative blacks on L side -- tleft = Node{NB, _, Node{Black, _, a, b}, Node{Black, _, c, d}}
    recursive function balanceHelper_DB_L<T>(c: Color, tleft: Tree<T>, tright: Tree<T>): Option<Node<T>> {
        if(c !== Color#BB) {
            return none;
        }

        if (tleft)@@!<Node<T>> {
            return none;
        }

        if(tleft.c !== Color#NB) {
            return none;
        }

        let lleft = tleft.l;
        if(lleft)@@!<Node<T>> {
            return none;
        }

        let lright = tleft.r;
        if(lright)@@!<Node<T>> {
            return none;
        }

        if(\/(lleft.c !== Color#Black, lright.c !== Color#Black)) {
            return none;
        }

        let nl = balance[recursive]<T>(Color#Black, Tree<T>::createNode(Color#Red, lleft.l, lleft.r), lright.l);
        let nr = Tree<T>::createNode(Color#Black, lright.r, tright);
        return some(Tree<T>::createNode(Color#Black, nl, nr));
    }

    %% Case where we have negative blacks on R side -- tright = Node{NB, _, Node{Black, _, b, c}, Node{Black, _, d, e}}}
    recursive function balanceHelper_DB_R<T>(c: Color, tleft: Tree<T>, tright: Tree<T>): Option<Node<T>> {
        if(c !== Color#BB) {
            return none;
        }

        if (tright)@@!<Node<T>> {
            return none;
        }

        if(tright.c !== Color#NB) {
            return none;
        }

        let rleft = tright.l;
        if(rleft)@@!<Node<T>> {
            return none;
        }

        let rright = tright.r;
        if(rright)@@!<Node<T>> {
            return none;
        }

        if(\/(rleft.c !== Color#Black, rright.c !== Color#Black)) {
            return none;
        }

        let nl = Tree<T>::createNode(Color#Black, tleft, rleft.l);
        let nr = balance[recursive]<T>(Color#Black, rleft.r, Tree<T>::createNode(Color#Red, rright.l, rright.r));
        return some(Tree<T>::createNode(Color#Black, nl, nr));
    }

    recursive function balance<T>(c: Color, tleft: Tree<T>, tright: Tree<T>): Tree<T> {
        let doubleRedLL = balanceHelper_RR_LL<T>(c, tleft, tright);
        if(doubleRedLL)@!none {
            return $doubleRedLL;
        }

        let doubleRedLR = balanceHelper_RR_LR<T>(c, tleft, tright);
        if(doubleRedLR)@!none {
            return $doubleRedLR;
        }

        let doubleRedRL = balanceHelper_RR_RL<T>(c, tleft, tright);
        if(doubleRedRL)@!none {
            return $doubleRedRL;
        }

        let doubleRedRR = balanceHelper_RR_RR<T>(c, tleft, tright);
        if(doubleRedRR)@!none {
            return $doubleRedRR;
        }

        let negBlackL = balanceHelper_DB_L<T>(c, tleft, tright);
        if(negBlackL)@!none {
            return $negBlackL;
        }

        let negBlackR = balanceHelper_DB_R<T>(c, tleft, tright);
        if(negBlackR)@!none {
            return $negBlackR;
        }

        return Tree<T>::createNode(c, tleft, tright);
    }

    function bubble<T>(c: Color, tleft: Tree<T>, tright: Tree<T>): Tree<T> {
        if(/\(tleft?<Node<T>>, tright?<Node<T>>)) {
            let tl = tleft@<Node<T>>;
            let tr = tright@<Node<T>>;

            if(tl.c === Color#BB || tr.c === Color#BB) {
                let nl = Tree<T>::createNode(redden(tl.c), tl.l, tl.r);
                let nr = Tree<T>::createNode(redden(tr.c), tr.l, tr.r);
                return balance<T>(blacken(tl.c), nl, nr);
            }
        }
        
        return Tree<T>::createNode(c, tleft, tright);
    }

    %%
    %% IMPLEMENtATIONS HERE!!!
    %% 

    datatype Tree<K: keytype, V> of 
        BBLeaf {}
        | Leaf { v: MapEntry<K, V> }
        | Node { c: Color, v: MapEntry<K, V>, l: Tree<K, V>, r: Tree<K, V> }
    & {
        const emptyTree: Tree<K, V> = BBLeaf<K, V>{};

        function createLeaf(MapEntry<K, V>): Leaf<K, V> {
            return Leaf<K, V>{MapEntry<K, V>};
        }

        function createNode(c: Color, v: MapEntry<K, V>, l: Tree<T>, r: Tree<T>): Node<K, V> {
            return Node<K, V>{c, v, l, r};
        }
    }
}
#else
#endif %% EXEC_LIBS
#endif %% STRIPPED_CORE
