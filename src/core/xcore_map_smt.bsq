namespace Core;

#if STRIPPED_CORE
#else
#if SMT_LIBS
namespace MapOps {
    function s_map_empty<K: keytype, V>(m: Map<K, V>): Bool = s_map_empty;
    function s_map_size<K: keytype, V>(m: Map<K, V>): Nat = s_map_size;

    function s_map_min<K: keytype, V>(m: Map<K, V>): MapEntry<K, V> = s_map_min;
    function s_map_max<K: keytype, V>(m: Map<K, V>): MapEntry<K, V> = s_map_max;

    function s_map_has<K: keytype, V>(m: Map<K, V>, k: K): Bool = s_map_has;

    function s_map_get_direct<K: keytype, V>(m: Map<K, V>, k: K): V = s_map_get_direct;
    function s_map_get_option<K: keytype, V>(m: Map<K, V>, k: K): Option<V> = s_map_get_option;

    function s_map_insert<K: keytype, V>(m: Map<K, V>, k: K, v: V): Map<K, V> = s_map_insert;
    function s_map_set<K: keytype, V>(m: Map<K, V>, k: K, v: V): Map<K, V> = s_map_set;

    function s_map_delete<K: keytype, V>(m: Map<K, V>, k: K): Map<K, V> = s_map_delete;

    function s_map_union2<K: keytype, V>(m1: Map<K, V>, m2: Map<K, V>): Map<K, V> = s_map_concat2;

    recursive? function s_map_map<K: keytype, V, U>(m: Map<K, V>, f: recursive? fn(K, V) -> U): Map<K, U> = s_map_map;
    recursive? function s_map_reduce<K: keytype, V, U>(m: Map<K, V>, init: U, f: recursive? fn(U, K, V) -> U): U = s_map_reduce;

    function s_map_create_empty<K: keytype, V>(): Map<K, V> = s_map_create_empty;
}
#else
#endif %% SMT_LIBS
#endif %% STRIPPED_CORE
