namespace Core;

#if STRIPPED_CORE
#else
namespace Algorithm {
    recursive? function while<T>(s: T, guard: recursive? pred(T) -> Bool, op: recursive? fn(T) -> T): T = s_algo_while;

    recursive? function worklist<S, T>(s: S, init: List<T>, proc: recursive? fn(S, T) -> (|S, List<T>|)): S {
        let wl = init;

        let sfinal, _ = Algorithm::while[recursive?]<(|S, List<T>|)>((|s, wl|), 
            pred(state) => !state.1.empty(), 
            recursive? fn(state) => {
                let vp, nwl = state.1.popFront();
                let ns, nelems = proc(state.0, vp);

                let fwl = nwl.append(nelems);
                return (|ns, fwl|);
            });

        return sfinal;
    }
}
#endif // STRIPPED_CORE

