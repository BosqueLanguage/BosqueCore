namespace Core;

#if STRIPPED_CORE
#else
#if EXEC_LIBS
%% Eventually we will need to add functions here for manipulating our ropes
namespace CCharBufferOps {
    %% Our creation methods call cpp code for handling bit ops
    %% Once a nice interface with the cpp emitter exists these creation functions would return CCharBuffer
    function s_ccharbuffer_create_empty() {
        ;
    }
    function s_ccharbuffer_create_1(c1: CChar) {
        ;
    }
    function s_ccharbuffer_create_2(c1: CChar, c2: CChar) {
        ;
    }
    function s_ccharbuffer_create_3(c1: CChar, c2: CChar, c3: CChar) {
        ;
    }
    function s_ccharbuffer_create_4(c1: CChar, c2: CChar, c3: CChar, c4: CChar) {
        ;
    }
    function s_ccharbuffer_create_5(c1: CChar, c2: CChar, c3: CChar, c4: CChar, c5: CChar) {
        ;
    }
    function s_ccharbuffer_create_6(c1: CChar, c2: CChar, c3: CChar, c4: CChar, c5: CChar, c6: CChar) {
        ;
    }
    function s_ccharbuffer_create_7(c1: CChar, c2: CChar, c3: CChar, c4: CChar, c5: CChar, c6: CChar, c7: CChar) {
        ;
    }
    function s_ccharbuffer_create_8(c1: CChar, c2: CChar, c3: CChar, c4: CChar, c5: CChar, c6: CChar, c7: CChar, c8: CChar) {
        ;
    }
}

namespace CStringOps {
    function s_empty(s: CString): Bool = cstring_empty;
    function s_size(s: CString): Nat = cstring_size;

    function s_startsWithString(s: CString, prefix: CString): Bool = cstring_starts_with_string;
    function s_endsWithString(s: CString, suffix: CString): Bool = cstring_ends_with_string;

    function s_containsString(s: CString, target: CString): Bool = cstring_contains_string;
    function s_containsStringUnique(s: CString, target: CString): Bool = cstring_contains_string_unique;

    function s_concat2(s1: CString, s2: CString): CString = cstring_concat2;

    function s_removePrefixString(s: CString, prefix: CString): CString = cstring_remove_prefix_string;
    function s_removeSuffixString(s: CString, suffix: CString): CString = cstring_remove_suffix_string;

    function s_replaceUniqueStringOccurrence(s: CString, target: CString, replacement: CString): CString = cstring_replace_unique_string_occurrence;
    function s_replaceAllStringOccurrences(s: CString, target: CString, replacement: CString): CString = cstring_replace_all_string_occurrences;
}

%% Note: CCharBuffer does not emit any js currently
__internal entity CCharBuffer {
    %% Actual buffer is represented in cpp
    %% Will probably need to store size field
}
#else
#endif %% EXEC_LIBS
#endif %% STRIPPED_CORE