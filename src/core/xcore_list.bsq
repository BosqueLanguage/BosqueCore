namespace Core;

#if STRIPPED_CORE
#else
#if EXEC_LIBS
namespace ListOps {
    function s_list_empty<T>(l: List<T>): Bool {
        return l.data?BBLeaf;
    } 

    function s_list_size<T>(l: List<T>): Nat {
        return l.data.size[recursive]();
    }

    enum Color {
        Red,
        Black,
        BB,
        NB
    }

    function blacken(c: Color): Color {
        assert c !== Color#BB;

        if(c === Color#Black) {
            return Color#BB;
        }
        else if(c === Color#Red) {
            return Color#Black;
        }
        else {
            return Color#Red;
        }
    }

    function redden(c: Color): Color {
        assert c !== Color#NB;

        if(c === Color#Black) {
            return Color#BB;
        }
        else if(c === Color#Red) {
            return Color#Black;
        }
        else {
            return Color#Red;
        }
    }

    datatype Tree<T> of 
        BBLeaf {}
        | Leaf { v: T; }
        | Node { c: Color; count: Nat; l: Tree<T>; r: Tree<T>; }
    & {
        recursive method size(): Nat {
            match(this) {
                BBLeaf => { return 0n; }
                | Leaf => { return 1n; }
                | Node => { return l.size() + r.size(); }
            }
        }
    }
}
#else
namespace ListOps {
    __safe function s_list_empty<T>(l: List<T>): Bool = s_list_empty; 
    __safe function s_list_size<T>(l: List<T>): Nat = s_list_size; 

    __assume_safe function s_list_get<T>(l: List<T>, i: Nat): T = s_list_get;
    __assume_safe function s_list_back<T>(l: List<T>): T = s_list_back;
    __assume_safe function s_list_front<T>(l: List<T>): T = s_list_front;
}
#endif %% EXEC_LIBS

#endif %% STRIPPED_CORE
