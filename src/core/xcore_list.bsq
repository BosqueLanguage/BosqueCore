%%The core namespace implements the primitive concepts used in the bosque core language
namespace Core;
%*
#if EXEC_LIBS
namespace ListOps {
    __safe function s_list_value<T>(l: List<T>): ListRepr<T>? = s_list_value;
    __safe function s_list_create<T>(lr: ListRepr<T>?): List<T> = s_list_create;

    __safe function s_list_empty<T>(l: List<T>): Bool {
        return ListOps::s_list_value<T>(l)?none;
    } 

    __safe function s_list_size<T>(l: List<T>): Nat {
        return ListRepr<T>::csize(ListOps::s_list_value<T>(l));
    } 

    function s_list_get<T>(l: List<T>, i: Nat): T {
        return ListOps::s_list_value<T>(l)@!none.get(i);
    }

    function s_list_back<T>(l: List<T>): T {
        let ll = ListOps::s_list_value<T>(l);
        return ll!none::get(ListRepr<T>::csize(ll) - 1n);
    }

    function s_list_front<T>(l: List<T>): T {
        let ll = ListOps::s_list_value<T>(l);
        return ll!none.get(0n);
    }
}

protected datatype ListRepr<T> provides Any 
of
ListReprLeaf { 
    field value: T; 
}
| ListReprNode { 
    field count: Nat = ListRepr<T>::csize($l) + ListRepr<T>::csize($r);
    field l: ListRepr<T>?;
    field r: ListRepr<T>?;
}
& {
    function csize(l: ListRepr<T>?): Nat {
        if (l)none {
            return 0n;
        }
        else {
            match (l)@ {
                ListReprLeaf<T>   => return 1n;
                | ListReprNode<T> => return $l.count;
            }
        }
    }

    method get(i: Nat): T {
        match (this)@ {
            ListReprLeaf<T> => {
                assert i == 0n;
                return $this.value;
            }
            | ListReprNode<T> => {
                if ($l = $this.l)@none {
                    return $this.r@!none.get(i);
                }
                else {
                    let lcount = ListRepr<T>::csize($l);
                    if (i < lcount) {
                        return $l.get(i);
                    }
                    else {
                        return $this.r@!none.get(i - lcount);
                    }
                }
            }
        }
    }
}

#else
namespace ListOps {
    __safe function s_list_empty<T>(l: List<T>): Bool = s_list_empty; 
    __safe function s_list_size<T>(l: List<T>): Nat = s_list_size; 

    __assume_safe function s_list_get<T>(l: List<T>, i: Nat): T = s_list_get;
    __assume_safe function s_list_back<T>(l: List<T>): T = s_list_back;
    __assume_safe function s_list_front<T>(l: List<T>): T = s_list_front;
}
#endif
*%
