//The core namespace implements the primitive concepts used in the bosque core language
namespace Core;

#if EXEC_LIBS
internal entity StringOps provides Some {
    __safe function s_empty(s: String): Bool = s_string_empty;
    __safe function s_concat2(s1: String, s2: String): String = s_string_append;

    __safe function s_startsWith(s: String, prefix: String): Bool = s_string_startswith;
    __safe function s_extractFront(s: String, prefix: String): String = s_string_extractfront;
    __safe function s_removeFront(s: String, prefix: String): String = s_string_removefront;

    __safe function s_endsWith(s: String, suffix: String): Bool = s_string_endswith;
    __safe function s_extractEnd(s: String, suffix: String): String = s_string_extractend;
    __safe function s_removeEnd(s: String, suffix: String): String = s_string_removeend;


    __safe function s_contains(s: String, substr: String): Bool = s_string_contains;
    __safe function s_replaceUnique(s: String, str: String, withstr: String): String = s_string_replaceunique;
    __safe function s_replaceAll(s: String, str: String, withstr: String): String = s_string_replaceall;

    function s_strconcat(l: List<String>): String {
        if(ListOps::s_list_empty<String>(l)) {
            return "";
        }
        else {
            let istr = ListOps::s_list_front<String>(l);
            let tl = ListOps::s_list_pop_front<String>(l);
            if(ListOps::s_list_empty<String>(tl)) {
                return istr;
            }
            else {
                return ListOps::s_list_reduce<String, String>(tl, istr, fn(acc: String, s: String): String => StringOps::s_concat2(acc, s));
            }
        }
    }

    function s_strjoin(l: List<String>, sep: String): String {
        if(ListOps::s_list_empty<String>(l)) {
            return "";
        }
        else {
            let istr = ListOps::s_list_front<String>(l);
            let tl = ListOps::s_list_pop_front<String>(l);
            if(ListOps::s_list_empty<String>(tl)) {
                return istr;
            }
            else {
                return ListOps::s_list_reduce<String, String>(tl, istr, fn(acc: String, s: String): String => StringOps::s_concat2(StringOps::s_concat2(acc, sep), s));
            }
        }
    }
}
#endif
