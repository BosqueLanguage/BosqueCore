namespace Main;

enum PlayerMark {
    empty,
    x,
    o
}

entity Board provides APIType {
    //Board is a map from cells to marks (or not in map if cell is unoccupied)
    field cells: List<List<PlayerMark>>;

    invariant test $cells.size() == 3n;
    invariant test $cells.allOf(pred(row) => row.size() == 3n);

    function createEmpty(): Board {
        let emptyrow = List<PlayerMark>{PlayerMark::empty, PlayerMark::empty, PlayerMark::empty};
        let emptycells = List<List<PlayerMark>>{emptyrow, emptyrow, emptyrow};

        return Board{emptycells};
    }

    method isCellEmpty(r: Nat, c: Nat): Bool {
        return this.cells.get(r).get(c) === PlayerMark::empty;
    }

    method getCellMark(r: Nat, c: Nat): PlayerMark {
        return this.cells.get(r).get(c);
    }

    method setCellMark(r: Nat, c: Nat, mark: PlayerMark): Board
        requires this.isCellEmpty(r, c);
    {
        let newrow = this.cells.get(r).set(c, mark);
        let newcells = this.cells.set(r, newrow);
        return Board{newcells};
    }

    private method check3(r1: Nat, c1: Nat, r2: Nat, c2: Nat, r3: Nat, c3: Nat, player: PlayerMark): Bool {
        return this.getCellMark(r1, c1) === player && this.getCellMark(r2, c2) === player && this.getCellMark(r3, c3) === player;
    }

    method checkWinner(player: PlayerMark): Bool {
        //check rows across
        if(\/(this.check3(0n, 0n, 0n, 1n, 0n, 2n, player), this.check3(1n, 0n, 1n, 1n, 1n, 2n, player), this.check3(2n, 0n, 2n, 1n, 2n, 2n, player))) {
            return true;
        }

        //check columns down
        if(\/(this.check3(0n, 0n, 1n, 0n, 2n, 0n, player), this.check3(0n, 1n, 1n, 1n, 2n, 1n, player), this.check3(0n, 2n, 1n, 2n, 2n, 2n, player))) {
            return true;
        }

        //check diagonals
        if(\/(this.check3(0n, 0n, 1n, 1n, 2n, 2n, player), this.check3(0n, 2n, 1n, 1n, 2n, 0n, player))) {
            return true;
        }

        return false;
    }

    method checkDraw(): Bool {
        return !this.cells.someOf(pred(cc: List<PlayerMark>) => cc.contains(PlayerMark::empty));
    }

    method checkAnyWinner(): PlayerMark? {
        if(this.checkWinner(PlayerMark::x)) {
            return PlayerMark::x;
        }
        elif(this.checkWinner(PlayerMark::o)) {
            return PlayerMark::o;
        }
        elif(this.checkDraw()) {
            return PlayerMark::empty;
        }
        else {
            return none;
        }
    }

    method hasWinner(): Bool {
        let winner = this.checkAnyWinner();
        return winner === PlayerMark::x || winner === PlayerMark::o;
    }
}

export function main(moves: List<[Nat, Nat, PlayerMark]>): Result<[Board, PlayerMark?], String> {
    let res = moves.reduce<Result<Board, String>>(Result<Board, String>::Ok{Board::createEmpty()}, fn(state: Result<Board, String>, move: [Nat, Nat, PlayerMark]): Result<Board, String> => {
            if err (state) {
                return state;
            }
            else {
                let bb = $@ok;
                if(bb.hasWinner()) {
                    return state;
                }
                elif(!bb.isCellEmpty(move.0, move.1)) {
                    return err("Cell is already occupied");
                }
                else {
                    return ok(bb.setCellMark(move.0, move.1, move.2));
                }
            }
        });

    if err (res) {
        return err($);
    }
    else {
        let bb = $@ok;
        return ok([bb, bb.checkAnyWinner()]);
    }
}
