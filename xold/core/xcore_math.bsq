//The core namespace implements the primitive types used in the Bosque language
namespace Core;

internal entity NumericOps provides Some {
    __assume_safe function s_natToInt(n: Nat): Int = number_nattoint;
    __safe function s_natToBigNat(n: Nat): BigNat = number_nattobignat;
    __safe function s_natToBigInt(n: Nat): BigInt = number_nattobigint;

    __assume_safe function s_intToNat(i: Int): Nat = number_inttonat;
    __assume_safe function s_intToBigNat(i: Int): BigNat = number_inttobignat;
    __safe function s_intToBigInt(i: Int): BigInt = number_inttobigint;

/*
    __safe function s_floatFloor(f: Float): Float = float_floor;
    __safe function s_floatCeil(f: Float): Float = float_ceil;
    __safe function s_floatTruncate(f: Float): Float = float_truncate;

    __safe function s_decimalFloor(d: Decimal): Decimal = decimal_floor;
    __safe function s_decimalCeil(d: Decimal): Decimal = decimal_ceil;
    __safe function s_decimalTruncate(f: Decimal): Decimal = decimal_truncate;
*/

    //
    //TODO: there are some failure cases here we may want to include checks for (like x = 0, y = -2)
    //
    function s_floatPower(x: Float, y: Float): Float = float_power;
    function s_decimalPower(x: Decimal, y: Decimal): Decimal = decimal_power;

    __assume_safe function s_floatSqrt(x: Float): Float = float_sqrt;
    __assume_safe function s_decimalSqrt(x: Decimal): Decimal = decimal_sqrt;
}
