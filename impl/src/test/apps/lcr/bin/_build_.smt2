(set-logic ALL)

;;
;; Type Tags
;;

(declare-datatypes (
      (TypeTag 0)
    ) (
    ( 
      (TypeTag_$Invalid)
      (TypeTag_BigInt)
      (TypeTag_BigNat)
      (TypeTag_Bool)
      (TypeTag_BufferCompression)
      (TypeTag_BufferFormat)
      (TypeTag_ByteBuffer)
      (TypeTag_ContentHash)
      (TypeTag_DateTime)
      (TypeTag_Decimal)
      (TypeTag_Float)
      (TypeTag_HavocSequence)
      (TypeTag_Int)
      (TypeTag_ListOps)
      (TypeTag_List_Bool_)
      (TypeTag_List_DateTime_)
      (TypeTag_List_Float_)
      (TypeTag_List_Int_)
      (TypeTag_List_List_NSFlows..Flow__)
      (TypeTag_List_NSCounterParty..CounterpartyType_)
      (TypeTag_List_NSFlows..Flow_)
      (TypeTag_List_NSRules..Rule_)
      (TypeTag_List_String_)
      (TypeTag_List__DateTime__NSFlows..Flow__)
      (TypeTag_List__Float__Float__)
      (TypeTag_LogicalTime)
      (TypeTag_MapOps)
      (TypeTag_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)
      (TypeTag_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)
      (TypeTag_NSBasics..AssetCategoryCodes)
      (TypeTag_NSBasics..InsuranceType)
      (TypeTag_NSCounterParty..Counterparty)
      (TypeTag_NSCounterParty..CounterpartyType)
      (TypeTag_NSCounterParty..ValidCounterpartyName)
      (TypeTag_NSCurrency..Currency)
      (TypeTag_NSFlows..Flow)
      (TypeTag_NSInflows..Rule20a1)
      (TypeTag_NSInflows..Rule20a3dash6)
      (TypeTag_NSInflows..Rule20b)
      (TypeTag_NSInflows..Rule20c)
      (TypeTag_NSInflows..Rule22b3L2a)
      (TypeTag_NSInflows..Rule22b3L2b)
      (TypeTag_NSInflows..Rule33b)
      (TypeTag_NSInflows..Rule33c)
      (TypeTag_NSInflows..Rule33d1)
      (TypeTag_NSInflows..Rule33d2)
      (TypeTag_NSInflows..Rule33e)
      (TypeTag_NSOutflows..Rule32a1)
      (TypeTag_NSOutflows..Rule32a2)
      (TypeTag_NSOutflows..Rule32a3)
      (TypeTag_NSOutflows..Rule32a4)
      (TypeTag_NSOutflows..Rule32a5)
      (TypeTag_NSOutflows..Rule32b)
      (TypeTag_NSOutflows..Rule32c)
      (TypeTag_NSOutflows..Rule32d)
      (TypeTag_NSOutflows..Rule32e)
      (TypeTag_NSOutflows..Rule32f)
      (TypeTag_NSOutflows..Rule32g1)
      (TypeTag_NSOutflows..Rule32g2)
      (TypeTag_NSOutflows..Rule32g3)
      (TypeTag_NSOutflows..Rule32g4)
      (TypeTag_NSOutflows..Rule32g5)
      (TypeTag_NSOutflows..Rule32g6)
      (TypeTag_NSOutflows..Rule32g7)
      (TypeTag_NSOutflows..Rule32g8)
      (TypeTag_NSOutflows..Rule32g9)
      (TypeTag_NSOutflows..Rule32h3)
      (TypeTag_NSOutflows..Rule32h4)
      (TypeTag_NSOutflows..Rule32l)
      (TypeTag_NSOutflows..Rule33f1iii)
      (TypeTag_NSOutflows..Rule33f1iv)
      (TypeTag_NSProduct..Product)
      (TypeTag_NSProduct..ProductType)
      (TypeTag_NSProduct..ValidProductName)
      (TypeTag_Nat)
      (TypeTag_None)
      (TypeTag_Nothing)
      (TypeTag_Rational)
      (TypeTag_Regex)
      (TypeTag_String)
      (TypeTag_StringOf_NSCounterParty..ValidCounterpartyName_)
      (TypeTag_StringOf_NSProduct..ValidProductName_)
      (TypeTag_TickTime)
      (TypeTag_UUID)
      (TypeTag__DateTime__NSFlows..Flow_)
      (TypeTag__Float__Float_)
      (TypeTag__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)
      (TypeTag__StringOf_NSProduct..ValidProductName___NSProduct..Product_)
    )
))

(declare-fun TypeTag_OrdinalOf (TypeTag) Int)
(assert (= (TypeTag_OrdinalOf TypeTag_BigInt) 0))
(assert (= (TypeTag_OrdinalOf TypeTag_BigNat) 1))
(assert (= (TypeTag_OrdinalOf TypeTag_Bool) 2))
(assert (= (TypeTag_OrdinalOf TypeTag_BufferCompression) 3))
(assert (= (TypeTag_OrdinalOf TypeTag_BufferFormat) 4))
(assert (= (TypeTag_OrdinalOf TypeTag_ContentHash) 5))
(assert (= (TypeTag_OrdinalOf TypeTag_DateTime) 6))
(assert (= (TypeTag_OrdinalOf TypeTag_Int) 7))
(assert (= (TypeTag_OrdinalOf TypeTag_LogicalTime) 8))
(assert (= (TypeTag_OrdinalOf TypeTag_NSBasics..AssetCategoryCodes) 9))
(assert (= (TypeTag_OrdinalOf TypeTag_NSBasics..InsuranceType) 10))
(assert (= (TypeTag_OrdinalOf TypeTag_NSCounterParty..CounterpartyType) 11))
(assert (= (TypeTag_OrdinalOf TypeTag_NSCurrency..Currency) 12))
(assert (= (TypeTag_OrdinalOf TypeTag_NSProduct..ProductType) 13))
(assert (= (TypeTag_OrdinalOf TypeTag_Nat) 14))
(assert (= (TypeTag_OrdinalOf TypeTag_None) 15))
(assert (= (TypeTag_OrdinalOf TypeTag_String) 16))
(assert (= (TypeTag_OrdinalOf TypeTag_StringOf_NSCounterParty..ValidCounterpartyName_) 17))
(assert (= (TypeTag_OrdinalOf TypeTag_StringOf_NSProduct..ValidProductName_) 18))
(assert (= (TypeTag_OrdinalOf TypeTag_UUID) 19))

(declare-datatypes (
      (AbstractTypeTag 0)
    ) (
    ( 
      (AbstractTypeTag_$Invalid)
      ;;NO DATA;;
    )
))

(declare-datatypes (
      (TupleIndexTag 0)
    ) (
    ( 
      (TupleIndexTag_$Invalid)
      ;;NO DATA;;
    )
))

(declare-datatypes (
      (RecordPropertyTag 0)
    ) (
    ( 
      (RecordPropertyTag_$Invalid)
      ;;RecordPropertyTag;;
    )
))

(declare-fun SubtypeOf@ (TypeTag AbstractTypeTag) Bool)
;;NO DATA;;

(declare-fun HasIndex@ (TypeTag TupleIndexTag) Bool)
;;NO DATA;;

(declare-fun HasProperty@ (TypeTag RecordPropertyTag) Bool)
;;NO DATA;;

(declare-const Real@zero Real)
(assert (= Real@zero 0.0))

(declare-const Real@one Real)
(assert (= Real@one 1.0))

(define-sort BInt () Int)
(define-sort BNat () Int)
(define-sort BBigInt () Int)
(define-sort BBigNat () Int)
(define-sort BFloat () Real)
(define-sort BDecimal () Real)
(define-sort BRational () Real)
(define-sort BString () String)
(define-sort BTickTime () Int)
(define-sort BLogicalTime () Int)
(define-sort BUUID () (Seq (_ BitVec 8)))
(define-sort BContentHash () (_ BitVec 16))

;;TODO BHashable and Hash + HashInvert and axioms

(declare-datatype BByteBuffer 
  (
    (BByteBuffer@cons (BByteBuffer@bytes (Seq (_ BitVec 8))) (BByteBuffer@format BNat) (BByteBuffer@compress BNat))
  )
)

(declare-datatype BDateTime 
  (
    (BDateTime@cons (BDateTime@year BNat) (BDateTime@month BNat) (BDateTime@day BNat) (BDateTime@hour BNat) (BDateTime@min BNat) (BDateTime@tzdata BString))
  )
)

(declare-const BInt@zero BInt) (assert (= BInt@zero 0))
(declare-const BInt@one BInt) (assert (= BInt@one 1))

(declare-const BNat@zero BNat) (assert (= BNat@zero 0))
(declare-const BNat@one BNat) (assert (= BNat@one 1))

(declare-const BBigInt@zero BBigInt) (assert (= BBigInt@zero 0))
(declare-const BBigInt@one BBigInt) (assert (= BBigInt@one 1))

(declare-const BBigNat@zero BBigNat) (assert (= BBigNat@zero 0))
(declare-const BBigNat@one BBigNat) (assert (= BBigNat@one 1))

(declare-const BFloat@zero BFloat) (assert (= BFloat@zero Real@zero))
(declare-const BFloat@one BFloat) (assert (= BFloat@one Real@one))

(declare-const BDecimal@zero BDecimal) (assert (= BDecimal@zero Real@zero))
(declare-const BDecimal@one BDecimal) (assert (= BDecimal@one Real@one))

(declare-const BRational@zero BRational) (assert (= BRational@zero Real@zero))
(declare-const BRational@one BRational) (assert (= BRational@one Real@one))

(define-sort HavocSequence () (Seq Int))

;;
;; Primitive datatypes 
;;
(declare-datatypes (
      (bsq_none 0)
      (bsq_nothing 0)
      ; Bool -> Bool
      ; Int -> Int
      ; Nat -> Int
      ; BigInt -> Int
      ; BigNat -> Int
      ; Float -> Real 
      ; Decimal -> Real
      ; Rational -> Real
      ; String -> String | (Seq (_ BitVec 8))
      ; ByteBuffer -> BByteBuffer
      ; DateTime -> BDateTime
      ; TickTime -> Int
      ; LogicalTime -> Int
      ; UUID -> BUUID
      ; ContentHash -> (_ BitVec 16)
    ) (
      ( (bsq_none@literal) ) 
      ( (bsq_nothing@literal) )
))

(define-sort BufferCompression () BNat)
(define-sort BufferFormat () BNat)
(define-sort NSBasics..AssetCategoryCodes () BNat)
(define-sort NSBasics..InsuranceType () BNat)
(define-sort NSCounterParty..CounterpartyType () BNat)
(define-sort NSCurrency..Currency () BNat)
(define-sort NSProduct..ProductType () BNat)
(define-sort StringOf_NSCounterParty..ValidCounterpartyName_ () BString)
(define-sort StringOf_NSProduct..ValidProductName_ () BString)

;;
;; KeyType Concept datatypes
;;
(declare-datatypes (
      (bsq_keyobject 0)
      (BKey 0)
    ) (
    (
      (bsqkey_none@literal)
      (bsqkey_bool@box (bsqkey_bool_value Bool))
      (bsqkey_int@box (bsqkey_int_value BInt))
      (bsqkey_nat@box (bsqkey_nat_value BNat))
      (bsqkey_bigint@box (bsqkey_bigint_value BBigInt))
      (bsqkey_bignat@box (bsqkey_bignat_value BBigNat))
      (bsqkey_string@box (bsqkey_string_value BString))
      (bsqkey_logicaltime@box (bsqkey_logicaltime_value BLogicalTime))
      (bsqkey_uuid@box (bsqkey_uuid_value BUUID))
      (bsqkey_contenthash@box (bsqkey_contenthash_value BContentHash))
      (BufferCompression@box (bsqkey_BufferCompression_value BufferCompression))
      (BufferFormat@box (bsqkey_BufferFormat_value BufferFormat))
      (NSBasics..AssetCategoryCodes@box (bsqkey_NSBasics..AssetCategoryCodes_value NSBasics..AssetCategoryCodes))
      (NSBasics..InsuranceType@box (bsqkey_NSBasics..InsuranceType_value NSBasics..InsuranceType))
      (NSCounterParty..CounterpartyType@box (bsqkey_NSCounterParty..CounterpartyType_value NSCounterParty..CounterpartyType))
      (NSCurrency..Currency@box (bsqkey_NSCurrency..Currency_value NSCurrency..Currency))
      (NSProduct..ProductType@box (bsqkey_NSProduct..ProductType_value NSProduct..ProductType))
      (StringOf_NSCounterParty..ValidCounterpartyName_@box (bsqkey_StringOf_NSCounterParty..ValidCounterpartyName__value StringOf_NSCounterParty..ValidCounterpartyName_))
      (StringOf_NSProduct..ValidProductName_@box (bsqkey_StringOf_NSProduct..ValidProductName__value StringOf_NSProduct..ValidProductName_))
    )
    ( (BKey@box (BKey_type TypeTag) (BKey_oftype TypeTag) (BKey_value bsq_keyobject)) )
))

(declare-const BKey@none BKey)
(assert (= BKey@none (BKey@box TypeTag_None TypeTag_None bsqkey_none@literal)))

(define-fun bsq_none@less ((k1 bsq_none) (k2 bsq_none)) Bool
  false
)

(define-fun Bool@less ((k1 Bool) (k2 Bool)) Bool
  (and (not k1) k2)
)

(define-fun BInt@less ((k1 BInt) (k2 BInt)) Bool
  (< k1 k2)
)

(define-fun BNat@less ((k1 BNat) (k2 BNat)) Bool
  (< k1 k2)
)

(define-fun BBigInt@less ((k1 BBigInt) (k2 BBigInt)) Bool
  (< k1 k2)
)

(define-fun BBigNat@less ((k1 BBigNat) (k2 BBigNat)) Bool
  (< k1 k2)
)

(define-fun BString@less ((k1 BString) (k2 BString)) Bool
  (str.< k1 k2)
)

(define-fun BLogicalTime@less ((k1 BLogicalTime) (k2 BLogicalTime)) Bool
  (< k1 k2)
)

(define-fun BUUID@less ((k1 BUUID) (k2 BUUID)) Bool
  ;;TODO: fix this
  true
)

(define-fun BContentHash@less ((k1 BContentHash) (k2 BContentHash)) Bool
  (bvult k1 k2)
)

(define-fun BKey@less ((k1 BKey) (k2 BKey)) Bool
  (let ((tt (BKey_oftype k1)) (ttv1 (TypeTag_OrdinalOf (BKey_type k1))) (ttv2 (TypeTag_OrdinalOf (BKey_type k2))))
    (ite (not (= ttv1 ttv2))
      (< ttv1 ttv2)
      (let ((vv1 (BKey_value k1)) (vv2 (BKey_value k2)))
        (ite (= tt TypeTag_None)
          false
          (ite (= tt TypeTag_Bool)
            (Bool@less (bsqkey_bool_value vv1) (bsqkey_bool_value vv2))
            (ite (= tt TypeTag_Int) 
              (BInt@less (bsqkey_int_value vv1) (bsqkey_int_value vv2))
              (ite (= tt TypeTag_Nat) 
                (BNat@less (bsqkey_nat_value vv1) (bsqkey_nat_value vv2))
                (ite (= tt TypeTag_BigInt)
                  (BBigInt@less (bsqkey_bigint_value vv1) (bsqkey_bigint_value vv2))
                  (ite (= tt TypeTag_BigNat)
                    (BBigNat@less (bsqkey_bignat_value vv1) (bsqkey_bignat_value vv2))
                    (ite (= tt TypeTag_String)
                      (BString@less (bsqkey_string_value vv1) (bsqkey_string_value vv2))
                      (ite (= tt TypeTag_LogicalTime)
                        (BLogicalTime@less (bsqkey_logicaltime_value vv1) (bsqkey_logicaltime_value vv2))
                        (ite (= tt TypeTag_UUID)
                          (BUUID@less (bsqkey_uuid_value vv1) (bsqkey_uuid_value vv2))
                          (BContentHash@less (bsqkey_contenthash_value vv1) (bsqkey_contenthash_value vv2))
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

;;
;; Any Concept datatypes
;;
(declare-datatypes (
    (bsq_regex 0)
    (_DateTime__NSFlows..Flow_ 0)
    (_Float__Float_ 0)
    (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_ 0)
    (_StringOf_NSProduct..ValidProductName___NSProduct..Product_ 0)
    ;;NO DATA;;
    (ListOps 0)
    (MapOps 0)
    (NSCounterParty..Counterparty 0)
    (NSCounterParty..ValidCounterpartyName 0)
    (NSFlows..Flow 0)
    (NSInflows..Rule20a1 0)
    (NSInflows..Rule20a3dash6 0)
    (NSInflows..Rule20b 0)
    (NSInflows..Rule20c 0)
    (NSInflows..Rule22b3L2a 0)
    (NSInflows..Rule22b3L2b 0)
    (NSInflows..Rule33b 0)
    (NSInflows..Rule33c 0)
    (NSInflows..Rule33d1 0)
    (NSInflows..Rule33d2 0)
    (NSInflows..Rule33e 0)
    (NSOutflows..Rule32a1 0)
    (NSOutflows..Rule32a2 0)
    (NSOutflows..Rule32a3 0)
    (NSOutflows..Rule32a4 0)
    (NSOutflows..Rule32a5 0)
    (NSOutflows..Rule32b 0)
    (NSOutflows..Rule32c 0)
    (NSOutflows..Rule32d 0)
    (NSOutflows..Rule32e 0)
    (NSOutflows..Rule32f 0)
    (NSOutflows..Rule32g1 0)
    (NSOutflows..Rule32g2 0)
    (NSOutflows..Rule32g3 0)
    (NSOutflows..Rule32g4 0)
    (NSOutflows..Rule32g5 0)
    (NSOutflows..Rule32g6 0)
    (NSOutflows..Rule32g7 0)
    (NSOutflows..Rule32g8 0)
    (NSOutflows..Rule32g9 0)
    (NSOutflows..Rule32h3 0)
    (NSOutflows..Rule32h4 0)
    (NSOutflows..Rule32l 0)
    (NSOutflows..Rule33f1iii 0)
    (NSOutflows..Rule33f1iv 0)
    (NSProduct..Product 0)
    (NSProduct..ValidProductName 0)
    (List__DateTime__NSFlows..Flow__ 0)
    (List__Float__Float__ 0)
    (List_Bool_ 0)
    (List_DateTime_ 0)
    (List_Float_ 0)
    (List_Int_ 0)
    (List_List_NSFlows..Flow__ 0)
    (List_NSCounterParty..CounterpartyType_ 0)
    (List_NSFlows..Flow_ 0)
    (List_NSRules..Rule_ 0)
    (List_String_ 0)
    (Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_ 0)
    (Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_ 0)
    ($MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_ 0)
    ($MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_ 0)
    (bsq_object 0)
    (BTerm 0)
    ) (
    ( (bsq_regex@cons (bsq_regex_value Int)) )
    ( (_DateTime__NSFlows..Flow_@cons (_DateTime__NSFlows..Flow_@_0 BDateTime) (_DateTime__NSFlows..Flow_@_1 NSFlows..Flow)) )
    ( (_Float__Float_@cons (_Float__Float_@_0 BFloat) (_Float__Float_@_1 BFloat)) )
    ( (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_0 StringOf_NSCounterParty..ValidCounterpartyName_) (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_1 NSCounterParty..Counterparty)) )
    ( (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_0 StringOf_NSProduct..ValidProductName_) (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_1 NSProduct..Product)) )
    ;;NO DATA;;
    ( (ListOps@cons ) )
    ( (MapOps@cons ) )
    ( (NSCounterParty..Counterparty@cons (NSCounterParty..Counterparty@_counterpartyId StringOf_NSCounterParty..ValidCounterpartyName_) (NSCounterParty..Counterparty@_counterpartyType NSCounterParty..CounterpartyType)) )
    ( (NSCounterParty..ValidCounterpartyName@cons ) )
    ( (NSFlows..Flow@cons (NSFlows..Flow@_amount BFloat) (NSFlows..Flow@_assetType NSBasics..AssetCategoryCodes) (NSFlows..Flow@_businessDate BDateTime) (NSFlows..Flow@_collateralClass NSBasics..AssetCategoryCodes) (NSFlows..Flow@_counterpartyId StringOf_NSCounterParty..ValidCounterpartyName_) (NSFlows..Flow@_currency NSCurrency..Currency) (NSFlows..Flow@_ruleCode BString) (NSFlows..Flow@_insured NSBasics..InsuranceType) (NSFlows..Flow@_isTreasuryControl Bool) (NSFlows..Flow@_isUnencumbered Bool) (NSFlows..Flow@_maturityDate BDateTime) (NSFlows..Flow@_effectiveMaturityDate BDateTime) (NSFlows..Flow@_productId StringOf_NSProduct..ValidProductName_)) )
    ( (NSInflows..Rule20a1@cons (NSInflows..Rule20a1@_name BString) (NSInflows..Rule20a1@_weight BFloat) (NSInflows..Rule20a1@_t BDateTime)) )
    ( (NSInflows..Rule20a3dash6@cons (NSInflows..Rule20a3dash6@_name BString) (NSInflows..Rule20a3dash6@_weight BFloat)) )
    ( (NSInflows..Rule20b@cons (NSInflows..Rule20b@_name BString) (NSInflows..Rule20b@_weight BFloat)) )
    ( (NSInflows..Rule20c@cons (NSInflows..Rule20c@_name BString) (NSInflows..Rule20c@_weight BFloat)) )
    ( (NSInflows..Rule22b3L2a@cons (NSInflows..Rule22b3L2a@_name BString) (NSInflows..Rule22b3L2a@_weight BFloat)) )
    ( (NSInflows..Rule22b3L2b@cons (NSInflows..Rule22b3L2b@_name BString) (NSInflows..Rule22b3L2b@_weight BFloat)) )
    ( (NSInflows..Rule33b@cons (NSInflows..Rule33b@_name BString) (NSInflows..Rule33b@_weight BFloat)) )
    ( (NSInflows..Rule33c@cons (NSInflows..Rule33c@_name BString) (NSInflows..Rule33c@_weight BFloat) (NSInflows..Rule33c@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_) (NSInflows..Rule33c@_t BDateTime)) )
    ( (NSInflows..Rule33d1@cons (NSInflows..Rule33d1@_name BString) (NSInflows..Rule33d1@_weight BFloat) (NSInflows..Rule33d1@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) )
    ( (NSInflows..Rule33d2@cons (NSInflows..Rule33d2@_name BString) (NSInflows..Rule33d2@_weight BFloat) (NSInflows..Rule33d2@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) )
    ( (NSInflows..Rule33e@cons (NSInflows..Rule33e@_name BString) (NSInflows..Rule33e@_weight BFloat)) )
    ( (NSOutflows..Rule32a1@cons (NSOutflows..Rule32a1@_name BString) (NSOutflows..Rule32a1@_weight BFloat)) )
    ( (NSOutflows..Rule32a2@cons (NSOutflows..Rule32a2@_name BString) (NSOutflows..Rule32a2@_weight BFloat) (NSOutflows..Rule32a2@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) )
    ( (NSOutflows..Rule32a3@cons (NSOutflows..Rule32a3@_name BString) (NSOutflows..Rule32a3@_weight BFloat) (NSOutflows..Rule32a3@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) )
    ( (NSOutflows..Rule32a4@cons (NSOutflows..Rule32a4@_name BString) (NSOutflows..Rule32a4@_weight BFloat) (NSOutflows..Rule32a4@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) )
    ( (NSOutflows..Rule32a5@cons (NSOutflows..Rule32a5@_name BString) (NSOutflows..Rule32a5@_weight BFloat) (NSOutflows..Rule32a5@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) )
    ( (NSOutflows..Rule32b@cons (NSOutflows..Rule32b@_name BString) (NSOutflows..Rule32b@_weight BFloat)) )
    ( (NSOutflows..Rule32c@cons (NSOutflows..Rule32c@_name BString) (NSOutflows..Rule32c@_weight BFloat)) )
    ( (NSOutflows..Rule32d@cons (NSOutflows..Rule32d@_name BString) (NSOutflows..Rule32d@_weight BFloat)) )
    ( (NSOutflows..Rule32e@cons (NSOutflows..Rule32e@_name BString) (NSOutflows..Rule32e@_weight BFloat)) )
    ( (NSOutflows..Rule32f@cons (NSOutflows..Rule32f@_name BString) (NSOutflows..Rule32f@_weight BFloat)) )
    ( (NSOutflows..Rule32g1@cons (NSOutflows..Rule32g1@_name BString) (NSOutflows..Rule32g1@_weight BFloat) (NSOutflows..Rule32g1@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_) (NSOutflows..Rule32g1@_t BDateTime)) )
    ( (NSOutflows..Rule32g2@cons (NSOutflows..Rule32g2@_name BString) (NSOutflows..Rule32g2@_weight BFloat) (NSOutflows..Rule32g2@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_) (NSOutflows..Rule32g2@_t BDateTime)) )
    ( (NSOutflows..Rule32g3@cons (NSOutflows..Rule32g3@_name BString) (NSOutflows..Rule32g3@_weight BFloat) (NSOutflows..Rule32g3@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_) (NSOutflows..Rule32g3@_t BDateTime)) )
    ( (NSOutflows..Rule32g4@cons (NSOutflows..Rule32g4@_name BString) (NSOutflows..Rule32g4@_weight BFloat) (NSOutflows..Rule32g4@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_) (NSOutflows..Rule32g4@_t BDateTime)) )
    ( (NSOutflows..Rule32g5@cons (NSOutflows..Rule32g5@_name BString) (NSOutflows..Rule32g5@_weight BFloat) (NSOutflows..Rule32g5@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) )
    ( (NSOutflows..Rule32g6@cons (NSOutflows..Rule32g6@_name BString) (NSOutflows..Rule32g6@_weight BFloat) (NSOutflows..Rule32g6@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) )
    ( (NSOutflows..Rule32g7@cons (NSOutflows..Rule32g7@_name BString) (NSOutflows..Rule32g7@_weight BFloat) (NSOutflows..Rule32g7@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) )
    ( (NSOutflows..Rule32g8@cons (NSOutflows..Rule32g8@_name BString) (NSOutflows..Rule32g8@_weight BFloat) (NSOutflows..Rule32g8@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) )
    ( (NSOutflows..Rule32g9@cons (NSOutflows..Rule32g9@_name BString) (NSOutflows..Rule32g9@_weight BFloat) (NSOutflows..Rule32g9@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) )
    ( (NSOutflows..Rule32h3@cons (NSOutflows..Rule32h3@_name BString) (NSOutflows..Rule32h3@_weight BFloat) (NSOutflows..Rule32h3@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) )
    ( (NSOutflows..Rule32h4@cons (NSOutflows..Rule32h4@_name BString) (NSOutflows..Rule32h4@_weight BFloat) (NSOutflows..Rule32h4@_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) )
    ( (NSOutflows..Rule32l@cons (NSOutflows..Rule32l@_name BString) (NSOutflows..Rule32l@_weight BFloat)) )
    ( (NSOutflows..Rule33f1iii@cons (NSOutflows..Rule33f1iii@_name BString) (NSOutflows..Rule33f1iii@_weight BFloat) (NSOutflows..Rule33f1iii@_t BDateTime)) )
    ( (NSOutflows..Rule33f1iv@cons (NSOutflows..Rule33f1iv@_name BString) (NSOutflows..Rule33f1iv@_weight BFloat) (NSOutflows..Rule33f1iv@_t BDateTime)) )
    ( (NSProduct..Product@cons (NSProduct..Product@_productId StringOf_NSProduct..ValidProductName_) (NSProduct..Product@_productType NSProduct..ProductType) (NSProduct..Product@_isHQLA Bool)) )
    ( (NSProduct..ValidProductName@cons ) )
    ( (List__DateTime__NSFlows..Flow__@cons (List__DateTime__NSFlows..Flow___seq (Seq _DateTime__NSFlows..Flow_))) )
    ( (List__Float__Float__@cons (List__Float__Float___seq (Seq _Float__Float_))) )
    ( (List_Bool_@cons (List_Bool__seq (Seq Bool))) )
    ( (List_DateTime_@cons (List_DateTime__seq (Seq BDateTime))) )
    ( (List_Float_@cons (List_Float__seq (Seq BFloat))) )
    ( (List_Int_@cons (List_Int__seq (Seq BInt))) )
    ( (List_List_NSFlows..Flow__@cons (List_List_NSFlows..Flow___seq (Seq List_NSFlows..Flow_))) )
    ( (List_NSCounterParty..CounterpartyType_@cons (List_NSCounterParty..CounterpartyType__seq (Seq NSCounterParty..CounterpartyType))) )
    ( (List_NSFlows..Flow_@cons (List_NSFlows..Flow__seq (Seq NSFlows..Flow))) )
    ( (List_NSRules..Rule_@cons (List_NSRules..Rule__seq (Seq BTerm))) )
    ( (List_String_@cons (List_String__seq (Seq BString))) )
    ( (Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons (Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty__len BNat) (Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty__array (Array StringOf_NSCounterParty..ValidCounterpartyName_ $MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_))) )
    ( (Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons (Map_StringOf_NSProduct..ValidProductName___NSProduct..Product__len BNat) (Map_StringOf_NSProduct..ValidProductName___NSProduct..Product__array (Array StringOf_NSProduct..ValidProductName_ $MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_))) )
    ( ($MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons ($MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty__key StringOf_NSCounterParty..ValidCounterpartyName_) ($MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty__vtup _StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) ($MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@empty) )
    ( ($MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons ($MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product__key StringOf_NSProduct..ValidProductName_) ($MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product__vtup _StringOf_NSProduct..ValidProductName___NSProduct..Product_)) ($MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@empty) )
    (
      (bsqobject_nothing@literal)
      (bsqobject_float@box (bsqobject_float_value BFloat))
      (bsqobject_decimal@box (bsqobject_decimal_value BDecimal))
      (bsqobject_rational@box (bsqobject_rational_value BRational))
      (bsqobject_bytebuffer@box (bsqobject_bytebuffer_value BByteBuffer))
      (bsqobject_datetime@box (bsqobject_datetime_value BDateTime))
      (bsqobject_ticktime@box (bsqobject_ticktime_value BTickTime))
      (bsqobject_regex@box (bsqobject_regex_value bsq_regex))
      (_DateTime__NSFlows..Flow_@box (bsqobject__DateTime__NSFlows..Flow__value _DateTime__NSFlows..Flow_))
      (_Float__Float_@box (bsqobject__Float__Float__value _Float__Float_))
      (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@box (bsqobject__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty__value _StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_))
      (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@box (bsqobject__StringOf_NSProduct..ValidProductName___NSProduct..Product__value _StringOf_NSProduct..ValidProductName___NSProduct..Product_))
      ;;NO DATA;;
      (ListOps@box (bsqobject_ListOps_value ListOps))
      (MapOps@box (bsqobject_MapOps_value MapOps))
      (NSCounterParty..Counterparty@box (bsqobject_NSCounterParty..Counterparty_value NSCounterParty..Counterparty))
      (NSCounterParty..ValidCounterpartyName@box (bsqobject_NSCounterParty..ValidCounterpartyName_value NSCounterParty..ValidCounterpartyName))
      (NSFlows..Flow@box (bsqobject_NSFlows..Flow_value NSFlows..Flow))
      (NSInflows..Rule20a1@box (bsqobject_NSInflows..Rule20a1_value NSInflows..Rule20a1))
      (NSInflows..Rule20a3dash6@box (bsqobject_NSInflows..Rule20a3dash6_value NSInflows..Rule20a3dash6))
      (NSInflows..Rule20b@box (bsqobject_NSInflows..Rule20b_value NSInflows..Rule20b))
      (NSInflows..Rule20c@box (bsqobject_NSInflows..Rule20c_value NSInflows..Rule20c))
      (NSInflows..Rule22b3L2a@box (bsqobject_NSInflows..Rule22b3L2a_value NSInflows..Rule22b3L2a))
      (NSInflows..Rule22b3L2b@box (bsqobject_NSInflows..Rule22b3L2b_value NSInflows..Rule22b3L2b))
      (NSInflows..Rule33b@box (bsqobject_NSInflows..Rule33b_value NSInflows..Rule33b))
      (NSInflows..Rule33c@box (bsqobject_NSInflows..Rule33c_value NSInflows..Rule33c))
      (NSInflows..Rule33d1@box (bsqobject_NSInflows..Rule33d1_value NSInflows..Rule33d1))
      (NSInflows..Rule33d2@box (bsqobject_NSInflows..Rule33d2_value NSInflows..Rule33d2))
      (NSInflows..Rule33e@box (bsqobject_NSInflows..Rule33e_value NSInflows..Rule33e))
      (NSOutflows..Rule32a1@box (bsqobject_NSOutflows..Rule32a1_value NSOutflows..Rule32a1))
      (NSOutflows..Rule32a2@box (bsqobject_NSOutflows..Rule32a2_value NSOutflows..Rule32a2))
      (NSOutflows..Rule32a3@box (bsqobject_NSOutflows..Rule32a3_value NSOutflows..Rule32a3))
      (NSOutflows..Rule32a4@box (bsqobject_NSOutflows..Rule32a4_value NSOutflows..Rule32a4))
      (NSOutflows..Rule32a5@box (bsqobject_NSOutflows..Rule32a5_value NSOutflows..Rule32a5))
      (NSOutflows..Rule32b@box (bsqobject_NSOutflows..Rule32b_value NSOutflows..Rule32b))
      (NSOutflows..Rule32c@box (bsqobject_NSOutflows..Rule32c_value NSOutflows..Rule32c))
      (NSOutflows..Rule32d@box (bsqobject_NSOutflows..Rule32d_value NSOutflows..Rule32d))
      (NSOutflows..Rule32e@box (bsqobject_NSOutflows..Rule32e_value NSOutflows..Rule32e))
      (NSOutflows..Rule32f@box (bsqobject_NSOutflows..Rule32f_value NSOutflows..Rule32f))
      (NSOutflows..Rule32g1@box (bsqobject_NSOutflows..Rule32g1_value NSOutflows..Rule32g1))
      (NSOutflows..Rule32g2@box (bsqobject_NSOutflows..Rule32g2_value NSOutflows..Rule32g2))
      (NSOutflows..Rule32g3@box (bsqobject_NSOutflows..Rule32g3_value NSOutflows..Rule32g3))
      (NSOutflows..Rule32g4@box (bsqobject_NSOutflows..Rule32g4_value NSOutflows..Rule32g4))
      (NSOutflows..Rule32g5@box (bsqobject_NSOutflows..Rule32g5_value NSOutflows..Rule32g5))
      (NSOutflows..Rule32g6@box (bsqobject_NSOutflows..Rule32g6_value NSOutflows..Rule32g6))
      (NSOutflows..Rule32g7@box (bsqobject_NSOutflows..Rule32g7_value NSOutflows..Rule32g7))
      (NSOutflows..Rule32g8@box (bsqobject_NSOutflows..Rule32g8_value NSOutflows..Rule32g8))
      (NSOutflows..Rule32g9@box (bsqobject_NSOutflows..Rule32g9_value NSOutflows..Rule32g9))
      (NSOutflows..Rule32h3@box (bsqobject_NSOutflows..Rule32h3_value NSOutflows..Rule32h3))
      (NSOutflows..Rule32h4@box (bsqobject_NSOutflows..Rule32h4_value NSOutflows..Rule32h4))
      (NSOutflows..Rule32l@box (bsqobject_NSOutflows..Rule32l_value NSOutflows..Rule32l))
      (NSOutflows..Rule33f1iii@box (bsqobject_NSOutflows..Rule33f1iii_value NSOutflows..Rule33f1iii))
      (NSOutflows..Rule33f1iv@box (bsqobject_NSOutflows..Rule33f1iv_value NSOutflows..Rule33f1iv))
      (NSProduct..Product@box (bsqobject_NSProduct..Product_value NSProduct..Product))
      (NSProduct..ValidProductName@box (bsqobject_NSProduct..ValidProductName_value NSProduct..ValidProductName))
      (List__DateTime__NSFlows..Flow__@box (bsqobject_List__DateTime__NSFlows..Flow___value List__DateTime__NSFlows..Flow__))
      (List__Float__Float__@box (bsqobject_List__Float__Float___value List__Float__Float__))
      (List_Bool_@box (bsqobject_List_Bool__value List_Bool_))
      (List_DateTime_@box (bsqobject_List_DateTime__value List_DateTime_))
      (List_Float_@box (bsqobject_List_Float__value List_Float_))
      (List_Int_@box (bsqobject_List_Int__value List_Int_))
      (List_List_NSFlows..Flow__@box (bsqobject_List_List_NSFlows..Flow___value List_List_NSFlows..Flow__))
      (List_NSCounterParty..CounterpartyType_@box (bsqobject_List_NSCounterParty..CounterpartyType__value List_NSCounterParty..CounterpartyType_))
      (List_NSFlows..Flow_@box (bsqobject_List_NSFlows..Flow__value List_NSFlows..Flow_))
      (List_NSRules..Rule_@box (bsqobject_List_NSRules..Rule__value List_NSRules..Rule_))
      (List_String_@box (bsqobject_List_String__value List_String_))
      (Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@box (bsqobject_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty__value Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_))
      (Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@box (bsqobject_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product__value Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_))
    )
    ( 
      (BTerm@termbox (BTerm_termtype TypeTag) (BTerm_termvalue bsq_object))
      (BTerm@keybox (BTerm_keyvalue BKey)) 
    )
))

(declare-const BTerm@none BTerm)
(assert (= BTerm@none (BTerm@keybox BKey@none)))

(declare-const BTerm@nothing BTerm)
(assert (= BTerm@nothing (BTerm@termbox TypeTag_Nothing bsqobject_nothing@literal)))

;;
;;Define utility functions
;;
(define-fun GetTypeTag@BKey ((t BKey)) TypeTag
  (BKey_type t)
)

(define-fun GetTypeTag@BTerm ((t BTerm)) TypeTag
  (ite ((_ is BTerm@termbox) t) (BTerm_termtype t) (BKey_type (BTerm_keyvalue t)))
)

;;
;; Ephemeral datatypes
;;
(declare-datatypes (
    (elistnull 0)
    (__Float__Float__ 0)
      (__Float__List_Float___ 0)
    ) (
    ( (elistnull@cons) )
    ( (__Float__Float__@cons (__Float__Float__@_0 BFloat) (__Float__Float__@_1 BFloat)) )
      ( (__Float__List_Float___@cons (__Float__List_Float___@_0 BFloat) (__Float__List_Float___@_1 List_Float_)) )
))

(declare-datatypes (
      (ErrorID 0)
    ) (
    ( 
      (ErrorID_AssumeCheck)
      (ErrorID_Target)
    )
))

(declare-datatypes (
      ($Result___Float__Float__ 0)
      ($Result___Float__List_Float___ 0)
      ($Result__DateTime__NSFlows..Flow_ 0)
      ($Result__Float__Float_ 0)
      ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_ 0)
      ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_ 0)
      ($Result_BTerm 0)
      ($Result_BBigInt 0)
      ($Result_BBigNat 0)
      ($Result_Bool 0)
      ($Result_BufferCompression 0)
      ($Result_BufferFormat 0)
      ($Result_BByteBuffer 0)
      ($Result_BContentHash 0)
      ($Result_BDateTime 0)
      ($Result_BDecimal 0)
      ($Result_BFloat 0)
      ($Result_HavocSequence 0)
      ($Result_BInt 0)
      ($Result_BKey 0)
      ($Result_List__DateTime__NSFlows..Flow__ 0)
      ($Result_List__Float__Float__ 0)
      ($Result_List_Bool_ 0)
      ($Result_List_DateTime_ 0)
      ($Result_List_Float_ 0)
      ($Result_List_Int_ 0)
      ($Result_List_List_NSFlows..Flow__ 0)
      ($Result_List_NSCounterParty..CounterpartyType_ 0)
      ($Result_List_NSFlows..Flow_ 0)
      ($Result_List_NSRules..Rule_ 0)
      ($Result_List_String_ 0)
      ($Result_ListOps 0)
      ($Result_BLogicalTime 0)
      ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_ 0)
      ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_ 0)
      ($Result_MapOps 0)
      ($Result_BNat 0)
      ($Result_bsq_none 0)
      ($Result_bsq_nothing 0)
      ($Result_NSBasics..AssetCategoryCodes 0)
      ($Result_NSBasics..InsuranceType 0)
      ($Result_NSCounterParty..Counterparty 0)
      ($Result_NSCounterParty..CounterpartyType 0)
      ($Result_NSCounterParty..ValidCounterpartyName 0)
      ($Result_NSCurrency..Currency 0)
      ($Result_NSFlows..Flow 0)
      ($Result_NSInflows..Rule20a1 0)
      ($Result_NSInflows..Rule20a3dash6 0)
      ($Result_NSInflows..Rule20b 0)
      ($Result_NSInflows..Rule20c 0)
      ($Result_NSInflows..Rule22b3L2a 0)
      ($Result_NSInflows..Rule22b3L2b 0)
      ($Result_NSInflows..Rule33b 0)
      ($Result_NSInflows..Rule33c 0)
      ($Result_NSInflows..Rule33d1 0)
      ($Result_NSInflows..Rule33d2 0)
      ($Result_NSInflows..Rule33e 0)
      ($Result_NSOutflows..Rule32a1 0)
      ($Result_NSOutflows..Rule32a2 0)
      ($Result_NSOutflows..Rule32a3 0)
      ($Result_NSOutflows..Rule32a4 0)
      ($Result_NSOutflows..Rule32a5 0)
      ($Result_NSOutflows..Rule32b 0)
      ($Result_NSOutflows..Rule32c 0)
      ($Result_NSOutflows..Rule32d 0)
      ($Result_NSOutflows..Rule32e 0)
      ($Result_NSOutflows..Rule32f 0)
      ($Result_NSOutflows..Rule32g1 0)
      ($Result_NSOutflows..Rule32g2 0)
      ($Result_NSOutflows..Rule32g3 0)
      ($Result_NSOutflows..Rule32g4 0)
      ($Result_NSOutflows..Rule32g5 0)
      ($Result_NSOutflows..Rule32g6 0)
      ($Result_NSOutflows..Rule32g7 0)
      ($Result_NSOutflows..Rule32g8 0)
      ($Result_NSOutflows..Rule32g9 0)
      ($Result_NSOutflows..Rule32h3 0)
      ($Result_NSOutflows..Rule32h4 0)
      ($Result_NSOutflows..Rule32l 0)
      ($Result_NSOutflows..Rule33f1iii 0)
      ($Result_NSOutflows..Rule33f1iv 0)
      ($Result_NSProduct..Product 0)
      ($Result_NSProduct..ProductType 0)
      ($Result_NSProduct..ValidProductName 0)
      ($Result_BRational 0)
      ($Result_bsq_regex 0)
      ($Result_BString 0)
      ($Result_StringOf_NSCounterParty..ValidCounterpartyName_ 0)
      ($Result_StringOf_NSProduct..ValidProductName_ 0)
      ($Result_BTickTime 0)
      ($Result_BUUID 0)
      ;;NO DATA;;
    ) (
    ( ($Result___Float__Float__@success ($Result___Float__Float__@success_value __Float__Float__)) ($Result___Float__Float__@error ($Result___Float__Float__@error_value ErrorID)) )
    ( ($Result___Float__List_Float___@success ($Result___Float__List_Float___@success_value __Float__List_Float___)) ($Result___Float__List_Float___@error ($Result___Float__List_Float___@error_value ErrorID)) )
    ( ($Result__DateTime__NSFlows..Flow_@success ($Result__DateTime__NSFlows..Flow_@success_value _DateTime__NSFlows..Flow_)) ($Result__DateTime__NSFlows..Flow_@error ($Result__DateTime__NSFlows..Flow_@error_value ErrorID)) )
    ( ($Result__Float__Float_@success ($Result__Float__Float_@success_value _Float__Float_)) ($Result__Float__Float_@error ($Result__Float__Float_@error_value ErrorID)) )
    ( ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value _StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@error ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@error_value ErrorID)) )
    ( ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value _StringOf_NSProduct..ValidProductName___NSProduct..Product_)) ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@error ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@error_value ErrorID)) )
    ( ($Result_BTerm@success ($Result_BTerm@success_value BTerm)) ($Result_BTerm@error ($Result_BTerm@error_value ErrorID)) )
    ( ($Result_BBigInt@success ($Result_BBigInt@success_value BBigInt)) ($Result_BBigInt@error ($Result_BBigInt@error_value ErrorID)) )
    ( ($Result_BBigNat@success ($Result_BBigNat@success_value BBigNat)) ($Result_BBigNat@error ($Result_BBigNat@error_value ErrorID)) )
    ( ($Result_Bool@success ($Result_Bool@success_value Bool)) ($Result_Bool@error ($Result_Bool@error_value ErrorID)) )
    ( ($Result_BufferCompression@success ($Result_BufferCompression@success_value BufferCompression)) ($Result_BufferCompression@error ($Result_BufferCompression@error_value ErrorID)) )
    ( ($Result_BufferFormat@success ($Result_BufferFormat@success_value BufferFormat)) ($Result_BufferFormat@error ($Result_BufferFormat@error_value ErrorID)) )
    ( ($Result_BByteBuffer@success ($Result_BByteBuffer@success_value BByteBuffer)) ($Result_BByteBuffer@error ($Result_BByteBuffer@error_value ErrorID)) )
    ( ($Result_BContentHash@success ($Result_BContentHash@success_value BContentHash)) ($Result_BContentHash@error ($Result_BContentHash@error_value ErrorID)) )
    ( ($Result_BDateTime@success ($Result_BDateTime@success_value BDateTime)) ($Result_BDateTime@error ($Result_BDateTime@error_value ErrorID)) )
    ( ($Result_BDecimal@success ($Result_BDecimal@success_value BDecimal)) ($Result_BDecimal@error ($Result_BDecimal@error_value ErrorID)) )
    ( ($Result_BFloat@success ($Result_BFloat@success_value BFloat)) ($Result_BFloat@error ($Result_BFloat@error_value ErrorID)) )
    ( ($Result_HavocSequence@success ($Result_HavocSequence@success_value HavocSequence)) ($Result_HavocSequence@error ($Result_HavocSequence@error_value ErrorID)) )
    ( ($Result_BInt@success ($Result_BInt@success_value BInt)) ($Result_BInt@error ($Result_BInt@error_value ErrorID)) )
    ( ($Result_BKey@success ($Result_BKey@success_value BKey)) ($Result_BKey@error ($Result_BKey@error_value ErrorID)) )
    ( ($Result_List__DateTime__NSFlows..Flow__@success ($Result_List__DateTime__NSFlows..Flow__@success_value List__DateTime__NSFlows..Flow__)) ($Result_List__DateTime__NSFlows..Flow__@error ($Result_List__DateTime__NSFlows..Flow__@error_value ErrorID)) )
    ( ($Result_List__Float__Float__@success ($Result_List__Float__Float__@success_value List__Float__Float__)) ($Result_List__Float__Float__@error ($Result_List__Float__Float__@error_value ErrorID)) )
    ( ($Result_List_Bool_@success ($Result_List_Bool_@success_value List_Bool_)) ($Result_List_Bool_@error ($Result_List_Bool_@error_value ErrorID)) )
    ( ($Result_List_DateTime_@success ($Result_List_DateTime_@success_value List_DateTime_)) ($Result_List_DateTime_@error ($Result_List_DateTime_@error_value ErrorID)) )
    ( ($Result_List_Float_@success ($Result_List_Float_@success_value List_Float_)) ($Result_List_Float_@error ($Result_List_Float_@error_value ErrorID)) )
    ( ($Result_List_Int_@success ($Result_List_Int_@success_value List_Int_)) ($Result_List_Int_@error ($Result_List_Int_@error_value ErrorID)) )
    ( ($Result_List_List_NSFlows..Flow__@success ($Result_List_List_NSFlows..Flow__@success_value List_List_NSFlows..Flow__)) ($Result_List_List_NSFlows..Flow__@error ($Result_List_List_NSFlows..Flow__@error_value ErrorID)) )
    ( ($Result_List_NSCounterParty..CounterpartyType_@success ($Result_List_NSCounterParty..CounterpartyType_@success_value List_NSCounterParty..CounterpartyType_)) ($Result_List_NSCounterParty..CounterpartyType_@error ($Result_List_NSCounterParty..CounterpartyType_@error_value ErrorID)) )
    ( ($Result_List_NSFlows..Flow_@success ($Result_List_NSFlows..Flow_@success_value List_NSFlows..Flow_)) ($Result_List_NSFlows..Flow_@error ($Result_List_NSFlows..Flow_@error_value ErrorID)) )
    ( ($Result_List_NSRules..Rule_@success ($Result_List_NSRules..Rule_@success_value List_NSRules..Rule_)) ($Result_List_NSRules..Rule_@error ($Result_List_NSRules..Rule_@error_value ErrorID)) )
    ( ($Result_List_String_@success ($Result_List_String_@success_value List_String_)) ($Result_List_String_@error ($Result_List_String_@error_value ErrorID)) )
    ( ($Result_ListOps@success ($Result_ListOps@success_value ListOps)) ($Result_ListOps@error ($Result_ListOps@error_value ErrorID)) )
    ( ($Result_BLogicalTime@success ($Result_BLogicalTime@success_value BLogicalTime)) ($Result_BLogicalTime@error ($Result_BLogicalTime@error_value ErrorID)) )
    ( ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@error ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@error_value ErrorID)) )
    ( ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@success ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@error ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@error_value ErrorID)) )
    ( ($Result_MapOps@success ($Result_MapOps@success_value MapOps)) ($Result_MapOps@error ($Result_MapOps@error_value ErrorID)) )
    ( ($Result_BNat@success ($Result_BNat@success_value BNat)) ($Result_BNat@error ($Result_BNat@error_value ErrorID)) )
    ( ($Result_bsq_none@success ($Result_bsq_none@success_value bsq_none)) ($Result_bsq_none@error ($Result_bsq_none@error_value ErrorID)) )
    ( ($Result_bsq_nothing@success ($Result_bsq_nothing@success_value bsq_nothing)) ($Result_bsq_nothing@error ($Result_bsq_nothing@error_value ErrorID)) )
    ( ($Result_NSBasics..AssetCategoryCodes@success ($Result_NSBasics..AssetCategoryCodes@success_value NSBasics..AssetCategoryCodes)) ($Result_NSBasics..AssetCategoryCodes@error ($Result_NSBasics..AssetCategoryCodes@error_value ErrorID)) )
    ( ($Result_NSBasics..InsuranceType@success ($Result_NSBasics..InsuranceType@success_value NSBasics..InsuranceType)) ($Result_NSBasics..InsuranceType@error ($Result_NSBasics..InsuranceType@error_value ErrorID)) )
    ( ($Result_NSCounterParty..Counterparty@success ($Result_NSCounterParty..Counterparty@success_value NSCounterParty..Counterparty)) ($Result_NSCounterParty..Counterparty@error ($Result_NSCounterParty..Counterparty@error_value ErrorID)) )
    ( ($Result_NSCounterParty..CounterpartyType@success ($Result_NSCounterParty..CounterpartyType@success_value NSCounterParty..CounterpartyType)) ($Result_NSCounterParty..CounterpartyType@error ($Result_NSCounterParty..CounterpartyType@error_value ErrorID)) )
    ( ($Result_NSCounterParty..ValidCounterpartyName@success ($Result_NSCounterParty..ValidCounterpartyName@success_value NSCounterParty..ValidCounterpartyName)) ($Result_NSCounterParty..ValidCounterpartyName@error ($Result_NSCounterParty..ValidCounterpartyName@error_value ErrorID)) )
    ( ($Result_NSCurrency..Currency@success ($Result_NSCurrency..Currency@success_value NSCurrency..Currency)) ($Result_NSCurrency..Currency@error ($Result_NSCurrency..Currency@error_value ErrorID)) )
    ( ($Result_NSFlows..Flow@success ($Result_NSFlows..Flow@success_value NSFlows..Flow)) ($Result_NSFlows..Flow@error ($Result_NSFlows..Flow@error_value ErrorID)) )
    ( ($Result_NSInflows..Rule20a1@success ($Result_NSInflows..Rule20a1@success_value NSInflows..Rule20a1)) ($Result_NSInflows..Rule20a1@error ($Result_NSInflows..Rule20a1@error_value ErrorID)) )
    ( ($Result_NSInflows..Rule20a3dash6@success ($Result_NSInflows..Rule20a3dash6@success_value NSInflows..Rule20a3dash6)) ($Result_NSInflows..Rule20a3dash6@error ($Result_NSInflows..Rule20a3dash6@error_value ErrorID)) )
    ( ($Result_NSInflows..Rule20b@success ($Result_NSInflows..Rule20b@success_value NSInflows..Rule20b)) ($Result_NSInflows..Rule20b@error ($Result_NSInflows..Rule20b@error_value ErrorID)) )
    ( ($Result_NSInflows..Rule20c@success ($Result_NSInflows..Rule20c@success_value NSInflows..Rule20c)) ($Result_NSInflows..Rule20c@error ($Result_NSInflows..Rule20c@error_value ErrorID)) )
    ( ($Result_NSInflows..Rule22b3L2a@success ($Result_NSInflows..Rule22b3L2a@success_value NSInflows..Rule22b3L2a)) ($Result_NSInflows..Rule22b3L2a@error ($Result_NSInflows..Rule22b3L2a@error_value ErrorID)) )
    ( ($Result_NSInflows..Rule22b3L2b@success ($Result_NSInflows..Rule22b3L2b@success_value NSInflows..Rule22b3L2b)) ($Result_NSInflows..Rule22b3L2b@error ($Result_NSInflows..Rule22b3L2b@error_value ErrorID)) )
    ( ($Result_NSInflows..Rule33b@success ($Result_NSInflows..Rule33b@success_value NSInflows..Rule33b)) ($Result_NSInflows..Rule33b@error ($Result_NSInflows..Rule33b@error_value ErrorID)) )
    ( ($Result_NSInflows..Rule33c@success ($Result_NSInflows..Rule33c@success_value NSInflows..Rule33c)) ($Result_NSInflows..Rule33c@error ($Result_NSInflows..Rule33c@error_value ErrorID)) )
    ( ($Result_NSInflows..Rule33d1@success ($Result_NSInflows..Rule33d1@success_value NSInflows..Rule33d1)) ($Result_NSInflows..Rule33d1@error ($Result_NSInflows..Rule33d1@error_value ErrorID)) )
    ( ($Result_NSInflows..Rule33d2@success ($Result_NSInflows..Rule33d2@success_value NSInflows..Rule33d2)) ($Result_NSInflows..Rule33d2@error ($Result_NSInflows..Rule33d2@error_value ErrorID)) )
    ( ($Result_NSInflows..Rule33e@success ($Result_NSInflows..Rule33e@success_value NSInflows..Rule33e)) ($Result_NSInflows..Rule33e@error ($Result_NSInflows..Rule33e@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32a1@success ($Result_NSOutflows..Rule32a1@success_value NSOutflows..Rule32a1)) ($Result_NSOutflows..Rule32a1@error ($Result_NSOutflows..Rule32a1@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32a2@success ($Result_NSOutflows..Rule32a2@success_value NSOutflows..Rule32a2)) ($Result_NSOutflows..Rule32a2@error ($Result_NSOutflows..Rule32a2@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32a3@success ($Result_NSOutflows..Rule32a3@success_value NSOutflows..Rule32a3)) ($Result_NSOutflows..Rule32a3@error ($Result_NSOutflows..Rule32a3@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32a4@success ($Result_NSOutflows..Rule32a4@success_value NSOutflows..Rule32a4)) ($Result_NSOutflows..Rule32a4@error ($Result_NSOutflows..Rule32a4@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32a5@success ($Result_NSOutflows..Rule32a5@success_value NSOutflows..Rule32a5)) ($Result_NSOutflows..Rule32a5@error ($Result_NSOutflows..Rule32a5@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32b@success ($Result_NSOutflows..Rule32b@success_value NSOutflows..Rule32b)) ($Result_NSOutflows..Rule32b@error ($Result_NSOutflows..Rule32b@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32c@success ($Result_NSOutflows..Rule32c@success_value NSOutflows..Rule32c)) ($Result_NSOutflows..Rule32c@error ($Result_NSOutflows..Rule32c@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32d@success ($Result_NSOutflows..Rule32d@success_value NSOutflows..Rule32d)) ($Result_NSOutflows..Rule32d@error ($Result_NSOutflows..Rule32d@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32e@success ($Result_NSOutflows..Rule32e@success_value NSOutflows..Rule32e)) ($Result_NSOutflows..Rule32e@error ($Result_NSOutflows..Rule32e@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32f@success ($Result_NSOutflows..Rule32f@success_value NSOutflows..Rule32f)) ($Result_NSOutflows..Rule32f@error ($Result_NSOutflows..Rule32f@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32g1@success ($Result_NSOutflows..Rule32g1@success_value NSOutflows..Rule32g1)) ($Result_NSOutflows..Rule32g1@error ($Result_NSOutflows..Rule32g1@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32g2@success ($Result_NSOutflows..Rule32g2@success_value NSOutflows..Rule32g2)) ($Result_NSOutflows..Rule32g2@error ($Result_NSOutflows..Rule32g2@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32g3@success ($Result_NSOutflows..Rule32g3@success_value NSOutflows..Rule32g3)) ($Result_NSOutflows..Rule32g3@error ($Result_NSOutflows..Rule32g3@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32g4@success ($Result_NSOutflows..Rule32g4@success_value NSOutflows..Rule32g4)) ($Result_NSOutflows..Rule32g4@error ($Result_NSOutflows..Rule32g4@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32g5@success ($Result_NSOutflows..Rule32g5@success_value NSOutflows..Rule32g5)) ($Result_NSOutflows..Rule32g5@error ($Result_NSOutflows..Rule32g5@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32g6@success ($Result_NSOutflows..Rule32g6@success_value NSOutflows..Rule32g6)) ($Result_NSOutflows..Rule32g6@error ($Result_NSOutflows..Rule32g6@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32g7@success ($Result_NSOutflows..Rule32g7@success_value NSOutflows..Rule32g7)) ($Result_NSOutflows..Rule32g7@error ($Result_NSOutflows..Rule32g7@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32g8@success ($Result_NSOutflows..Rule32g8@success_value NSOutflows..Rule32g8)) ($Result_NSOutflows..Rule32g8@error ($Result_NSOutflows..Rule32g8@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32g9@success ($Result_NSOutflows..Rule32g9@success_value NSOutflows..Rule32g9)) ($Result_NSOutflows..Rule32g9@error ($Result_NSOutflows..Rule32g9@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32h3@success ($Result_NSOutflows..Rule32h3@success_value NSOutflows..Rule32h3)) ($Result_NSOutflows..Rule32h3@error ($Result_NSOutflows..Rule32h3@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32h4@success ($Result_NSOutflows..Rule32h4@success_value NSOutflows..Rule32h4)) ($Result_NSOutflows..Rule32h4@error ($Result_NSOutflows..Rule32h4@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule32l@success ($Result_NSOutflows..Rule32l@success_value NSOutflows..Rule32l)) ($Result_NSOutflows..Rule32l@error ($Result_NSOutflows..Rule32l@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule33f1iii@success ($Result_NSOutflows..Rule33f1iii@success_value NSOutflows..Rule33f1iii)) ($Result_NSOutflows..Rule33f1iii@error ($Result_NSOutflows..Rule33f1iii@error_value ErrorID)) )
    ( ($Result_NSOutflows..Rule33f1iv@success ($Result_NSOutflows..Rule33f1iv@success_value NSOutflows..Rule33f1iv)) ($Result_NSOutflows..Rule33f1iv@error ($Result_NSOutflows..Rule33f1iv@error_value ErrorID)) )
    ( ($Result_NSProduct..Product@success ($Result_NSProduct..Product@success_value NSProduct..Product)) ($Result_NSProduct..Product@error ($Result_NSProduct..Product@error_value ErrorID)) )
    ( ($Result_NSProduct..ProductType@success ($Result_NSProduct..ProductType@success_value NSProduct..ProductType)) ($Result_NSProduct..ProductType@error ($Result_NSProduct..ProductType@error_value ErrorID)) )
    ( ($Result_NSProduct..ValidProductName@success ($Result_NSProduct..ValidProductName@success_value NSProduct..ValidProductName)) ($Result_NSProduct..ValidProductName@error ($Result_NSProduct..ValidProductName@error_value ErrorID)) )
    ( ($Result_BRational@success ($Result_BRational@success_value BRational)) ($Result_BRational@error ($Result_BRational@error_value ErrorID)) )
    ( ($Result_bsq_regex@success ($Result_bsq_regex@success_value bsq_regex)) ($Result_bsq_regex@error ($Result_bsq_regex@error_value ErrorID)) )
    ( ($Result_BString@success ($Result_BString@success_value BString)) ($Result_BString@error ($Result_BString@error_value ErrorID)) )
    ( ($Result_StringOf_NSCounterParty..ValidCounterpartyName_@success ($Result_StringOf_NSCounterParty..ValidCounterpartyName_@success_value StringOf_NSCounterParty..ValidCounterpartyName_)) ($Result_StringOf_NSCounterParty..ValidCounterpartyName_@error ($Result_StringOf_NSCounterParty..ValidCounterpartyName_@error_value ErrorID)) )
    ( ($Result_StringOf_NSProduct..ValidProductName_@success ($Result_StringOf_NSProduct..ValidProductName_@success_value StringOf_NSProduct..ValidProductName_)) ($Result_StringOf_NSProduct..ValidProductName_@error ($Result_StringOf_NSProduct..ValidProductName_@error_value ErrorID)) )
    ( ($Result_BTickTime@success ($Result_BTickTime@success_value BTickTime)) ($Result_BTickTime@error ($Result_BTickTime@error_value ErrorID)) )
    ( ($Result_BUUID@success ($Result_BUUID@success_value BUUID)) ($Result_BUUID@error ($Result_BUUID@error_value ErrorID)) )
    ;;NO DATA;;
))

;;
;;Free constructors for entrypoint initialization
;;
(declare-fun BBool@UFCons_API (HavocSequence) Bool)
(declare-fun BInt@UFCons_API (HavocSequence) BInt)
(declare-fun BNat@UFCons_API (HavocSequence) BNat)
(declare-fun BBigInt@UFCons_API (HavocSequence) BBigInt)
(declare-fun BBigNat@UFCons_API (HavocSequence) BBigNat)
(declare-fun BFloat@UFCons_API (HavocSequence) BFloat)
(declare-fun BDecimal@UFCons_API (HavocSequence) BDecimal)
(declare-fun BRational@UFCons_API (HavocSequence) BRational)
(declare-fun BString@UFCons_API (HavocSequence) BString)
(declare-fun BByteBuffer@UFCons_API (HavocSequence) (Seq (_ BitVec 8)))
(declare-fun BDateYear@UFCons_API (HavocSequence) BNat)
(declare-fun BDateMonth@UFCons_API (HavocSequence) BNat)
(declare-fun BDateDay@UFCons_API (HavocSequence) BNat)
(declare-fun BDateHour@UFCons_API (HavocSequence) BNat)
(declare-fun BDateMinute@UFCons_API (HavocSequence) BNat)
(declare-fun BTickTime@UFCons_API (HavocSequence) BTickTime)
(declare-fun BLogicalTime@UFCons_API (HavocSequence) BLogicalTime)
(declare-fun BUUID@UFCons_API (HavocSequence) BUUID)
(declare-fun BContentHash@UFCons_API (HavocSequence) BContentHash)

(declare-fun ContainerSize@UFCons_API (HavocSequence) BNat)
(declare-fun UnionChoice@UFCons_API (HavocSequence) BNat)

(define-fun _@@cons_None_entrypoint ((ctx HavocSequence)) $Result_bsq_none
  ($Result_bsq_none@success bsq_none@literal)
)

(define-fun _@@cons_Nothing_entrypoint ((ctx HavocSequence)) $Result_bsq_nothing
  ($Result_bsq_nothing@success bsq_nothing@literal)
)

;;@BINTMIN, @BINTMAX, @SLENMAX, @BLENMAX
(declare-const @BINTMIN Int) (assert (= @BINTMIN -255))
(declare-const @BINTMAX Int) (assert (= @BINTMAX 256))
(declare-const @SLENMAX Int) (assert (= @SLENMAX 48))
(declare-const @BLENMAX Int) (assert (= @BLENMAX 32))
(declare-const @CONTAINERMAX Int) (assert (= @CONTAINERMAX 3))

(define-fun _@@cons_Bool_entrypoint ((ctx HavocSequence)) $Result_Bool
  ($Result_Bool@success (BBool@UFCons_API ctx))
)

(define-fun _@@cons_Int_entrypoint ((ctx HavocSequence)) $Result_BInt
  (let ((iv (BInt@UFCons_API ctx)))
    (ite (and (<= @BINTMIN iv) (<= iv @BINTMAX))
      ($Result_BInt@success iv)
      ($Result_BInt@error ErrorID_AssumeCheck) 
    )
  )
)

(define-fun _@@cons_Nat_entrypoint ((ctx HavocSequence)) $Result_BNat
  (let ((iv (BNat@UFCons_API ctx)))
    (ite (and (<= 0 iv) (<= iv @BINTMAX))
      ($Result_BNat@success iv)
      ($Result_BNat@error ErrorID_AssumeCheck) 
    )
  )
)

(define-fun _@@cons_BigInt_entrypoint ((ctx HavocSequence)) $Result_BBigInt
  (let ((iv (BBigInt@UFCons_API ctx)))
    (ite (and (<= (+ @BINTMIN @BINTMIN) iv) (<= iv (+ @BINTMAX @BINTMAX)))
      ($Result_BBigInt@success iv)
      ($Result_BBigInt@error ErrorID_AssumeCheck) 
    )
  )
)

(define-fun _@@cons_BigNat_entrypoint ((ctx HavocSequence)) $Result_BBigNat
  (let ((iv (BBigNat@UFCons_API ctx)))
    (ite (and (<= 0 iv) (<= iv (+ @BINTMAX @BINTMAX)))
      ($Result_BBigNat@success iv)
      ($Result_BBigNat@error ErrorID_AssumeCheck) 
    )
  )
)

(define-fun _@@cons_Float_entrypoint ((ctx HavocSequence)) $Result_BFloat
  ($Result_BFloat@success (BFloat@UFCons_API ctx))
)

(define-fun _@@cons_Decimal_entrypoint ((ctx HavocSequence)) $Result_BDecimal
  ($Result_BDecimal@success (BDecimal@UFCons_API ctx))
)

(define-fun _@@cons_Rational_entrypoint ((ctx HavocSequence)) $Result_BRational
  ($Result_BRational@success (BRational@UFCons_API ctx))
)

(define-fun _@@cons_String_entrypoint ((ctx HavocSequence)) $Result_BString
  (let ((sv (BString@UFCons_API ctx)))
    (ite (<= (str.len sv) @SLENMAX)
      ($Result_BString@success sv)
      ($Result_BString@error ErrorID_AssumeCheck) 
    )
  )
)

(define-fun _@@cons_ByteBuffer_entrypoint ((ctx HavocSequence)) $Result_BByteBuffer
  (let ((compress (BNat@UFCons_API (seq.++ ctx (seq.unit 0)))) (format (BNat@UFCons_API (seq.++ ctx (seq.unit 1)))) (buff (BByteBuffer@UFCons_API (seq.++ ctx (seq.unit 2)))))
    (ite (and (< compress 2) (< format 4) (<= (seq.len buff) @BLENMAX))
      ($Result_BByteBuffer@success (BByteBuffer@cons buff compress format))
      ($Result_BByteBuffer@error ErrorID_AssumeCheck) 
    )
  )
)

(define-fun _@@cons_DateTime_entrypoint ((ctx HavocSequence)) $Result_BDateTime
  (let ((tctx (seq.++ ctx (seq.unit 0))))
    (let ((y (BDateYear@UFCons_API (seq.++ tctx (seq.unit 0)))) (m (BDateMonth@UFCons_API (seq.++ tctx (seq.unit 1)))) (d (BDateDay@UFCons_API (seq.++ tctx (seq.unit 2)))) (hh (BDateHour@UFCons_API (seq.++ tctx (seq.unit 3)))) (mm (BDateMinute@UFCons_API (seq.++ tctx (seq.unit 4)))) (tzo (BString@UFCons_API (seq.++ ctx (seq.unit 1)))))
      (ite (and (<= 0 y) (<= y 300) (<= 0 m) (<= m 11) (<= 1 d) (<= d 31) (<= 0 hh) (<= hh 23) (<= 0 mm) (<= mm 59) (or (= tzo "UTC") (= tzo "PST") (= tzo "MST") (= tzo "CEST")))
        ($Result_BDateTime@success (BDateTime@cons y m d hh mm tzo))
        ($Result_BDateTime@error ErrorID_AssumeCheck) 
      )
    )
  )
)

(define-fun _@@cons_TickTime_entrypoint ((ctx HavocSequence)) $Result_BTickTime
  (let ((tv (BTickTime@UFCons_API ctx)))
    (ite (and (<= 0 tv) (<= tv 1048576))
      ($Result_BTickTime@success tv)
      ($Result_BTickTime@error ErrorID_AssumeCheck) 
    )
  )
)

(define-fun _@@cons_LogicalTime_entrypoint ((ctx HavocSequence)) $Result_BLogicalTime
  (let ((lv (BLogicalTime@UFCons_API ctx)))
    (ite (and (<= 0 lv) (<= lv 64))
      ($Result_BLogicalTime@success lv)
      ($Result_BLogicalTime@error ErrorID_AssumeCheck) 
    )
  )
)

(define-fun _@@cons_UUID_entrypoint ((ctx HavocSequence)) $Result_BUUID
  (let ((uuv (BUUID@UFCons_API ctx)))
    (ite (= (seq.len uuv) 16)
      ($Result_BUUID@success uuv)
      ($Result_BUUID@error ErrorID_AssumeCheck) 
    )
  )
)

(define-fun _@@cons_ContentHash_entrypoint ((ctx HavocSequence)) $Result_BContentHash
  ($Result_BContentHash@success (BContentHash@UFCons_API ctx))
)

(declare-fun @@SortedIntSeq@@Create (Int) (Seq Int))

(define-fun @@CheckIntSeqLen ((s (Seq Int)) (len Int)) Bool
  (= (seq.len s) len)
)

(define-fun @@CheckIntSeqSorted ((s (Seq Int)) (len Int)) Bool
  (forall ((i Int)) (=> (and (<= 0 i) (< i len)) (= (seq.nth s i) i)))
)

(declare-const List__DateTime__NSFlows..Flow__@@empty List__DateTime__NSFlows..Flow__) (assert (= List__DateTime__NSFlows..Flow__@@empty (List__DateTime__NSFlows..Flow__@cons (as seq.empty (Seq _DateTime__NSFlows..Flow_)))))
(declare-const List__Float__Float__@@empty List__Float__Float__) (assert (= List__Float__Float__@@empty (List__Float__Float__@cons (as seq.empty (Seq _Float__Float_)))))
(declare-const List_Bool_@@empty List_Bool_) (assert (= List_Bool_@@empty (List_Bool_@cons (as seq.empty (Seq Bool)))))
(declare-const List_DateTime_@@empty List_DateTime_) (assert (= List_DateTime_@@empty (List_DateTime_@cons (as seq.empty (Seq BDateTime)))))
(declare-const List_Float_@@empty List_Float_) (assert (= List_Float_@@empty (List_Float_@cons (as seq.empty (Seq BFloat)))))
(declare-const List_Int_@@empty List_Int_) (assert (= List_Int_@@empty (List_Int_@cons (as seq.empty (Seq BInt)))))
(declare-const List_List_NSFlows..Flow__@@empty List_List_NSFlows..Flow__) (assert (= List_List_NSFlows..Flow__@@empty (List_List_NSFlows..Flow__@cons (as seq.empty (Seq List_NSFlows..Flow_)))))
(declare-const List_NSCounterParty..CounterpartyType_@@empty List_NSCounterParty..CounterpartyType_) (assert (= List_NSCounterParty..CounterpartyType_@@empty (List_NSCounterParty..CounterpartyType_@cons (as seq.empty (Seq NSCounterParty..CounterpartyType)))))
(declare-const List_NSFlows..Flow_@@empty List_NSFlows..Flow_) (assert (= List_NSFlows..Flow_@@empty (List_NSFlows..Flow_@cons (as seq.empty (Seq NSFlows..Flow)))))
(declare-const List_NSRules..Rule_@@empty List_NSRules..Rule_) (assert (= List_NSRules..Rule_@@empty (List_NSRules..Rule_@cons (as seq.empty (Seq BTerm)))))
(declare-const List_String_@@empty List_String_) (assert (= List_String_@@empty (List_String_@cons (as seq.empty (Seq BString)))))
(declare-const Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@@empty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_) (assert (= Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@@empty (Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons 0 ((as const (Array StringOf_NSCounterParty..ValidCounterpartyName_ $MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) $MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@empty))))
(declare-const Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@@empty Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_) (assert (= Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@@empty (Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons 0 ((as const (Array StringOf_NSProduct..ValidProductName_ $MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) $MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@empty))))
(declare-const NSBasics..AssetCategoryCodes..level1Assets NSBasics..AssetCategoryCodes)
(declare-const NSBasics..AssetCategoryCodes..level2aAssets NSBasics..AssetCategoryCodes)
(declare-const NSBasics..AssetCategoryCodes..level2bAssets NSBasics..AssetCategoryCodes)
(declare-const NSBasics..InsuranceType..fdic NSBasics..InsuranceType)
(declare-const NSCounterParty..CounterpartyType..bank NSCounterParty..CounterpartyType)
(declare-const NSCounterParty..CounterpartyType..centralBank NSCounterParty..CounterpartyType)
(declare-const NSCounterParty..CounterpartyType..debtIssuingSpecialPurposeEntity NSCounterParty..CounterpartyType)
(declare-const NSCounterParty..CounterpartyType..governmentSponsoredEntity NSCounterParty..CounterpartyType)
(declare-const NSCounterParty..CounterpartyType..multilateralDevelopmentBank NSCounterParty..CounterpartyType)
(declare-const NSCounterParty..CounterpartyType..nonFinancialCorporate NSCounterParty..CounterpartyType)
(declare-const NSCounterParty..CounterpartyType..other NSCounterParty..CounterpartyType)
(declare-const NSCounterParty..CounterpartyType..otherFinancialEntity NSCounterParty..CounterpartyType)
(declare-const NSCounterParty..CounterpartyType..otherSupranational NSCounterParty..CounterpartyType)
(declare-const NSCounterParty..CounterpartyType..publicSectorEntity NSCounterParty..CounterpartyType)
(declare-const NSCounterParty..CounterpartyType..retail NSCounterParty..CounterpartyType)
(declare-const NSCounterParty..CounterpartyType..smallBusiness NSCounterParty..CounterpartyType)
(declare-const NSCounterParty..CounterpartyType..sovereign NSCounterParty..CounterpartyType)
(declare-const NSCounterParty..CounterpartyType..supervisedNonBankFinancialEntity NSCounterParty..CounterpartyType)
(declare-const NSInflows..Rule33d1..acceptedCounterParty List_NSCounterParty..CounterpartyType_)
(declare-const NSInflows..Rule33d2..acceptedCounterParty List_NSCounterParty..CounterpartyType_)
(declare-const NSOutflows..Rule32h3..acceptedCounterParty List_NSCounterParty..CounterpartyType_)
(declare-const NSOutflows..Rule32h4..acceptedCounterParty List_NSCounterParty..CounterpartyType_)

;;NO DATA;;

(define-fun ListOps..s_list_empty_T__DateTime__NSFlows..Flow__ ((l List__DateTime__NSFlows..Flow__)) Bool
(= l List__DateTime__NSFlows..Flow__@@empty)
)

(define-fun NSDates..datesEqual ((t1 BDateTime) (t2 BDateTime)) Bool
(let (($__ir_ret__ true))
    (let (($return $__ir_ret__))
      $return
    )
  )
)

(define-fun pred--calculations.bsq_k15..16@534 ((fdp _DateTime__NSFlows..Flow_) (t BDateTime)) Bool
(let ((@tmp_3 (_DateTime__NSFlows..Flow_@_0 fdp)))
    (let ((@tmp_0 (NSDates..datesEqual @tmp_3 t)))
      (let (($__ir_ret__ @tmp_0))
        (let (($return $__ir_ret__))
          $return
        )
      )
    )
  )
)

(define-fun ListOps..s_list_map_pred_T__DateTime__NSFlows..Flow___pred--calculations.bsq_k15..16@534_ ((l List__DateTime__NSFlows..Flow__) (@@c_0_t BDateTime)) List_Bool_
(List_Bool_@cons (seq.map (lambda ((@@x _DateTime__NSFlows..Flow_)) (pred--calculations.bsq_k15..16@534 @@x @@c_0_t)) (List__DateTime__NSFlows..Flow___seq l)))
)

(define-fun ListOps..s_list_has_true ((l List_Bool_)) Bool
(seq.contains (List_Bool__seq l) (seq.unit true))
)

(define-fun ListOps..s_list_has_false ((l List_Bool_)) Bool
(seq.contains (List_Bool__seq l) (seq.unit false))
)

(define-fun ListOps..s_list_push_back_T__DateTime__NSFlows..Flow__ ((l List__DateTime__NSFlows..Flow__) (v _DateTime__NSFlows..Flow_)) List__DateTime__NSFlows..Flow__
(List__DateTime__NSFlows..Flow__@cons (seq.++ (List__DateTime__NSFlows..Flow___seq l) (seq.unit v)))
)

(define-fun fn--list.bsq_k1..1124@33448 ((accl List__DateTime__NSFlows..Flow__) (x _DateTime__NSFlows..Flow_) (@@c_0_t BDateTime)) List__DateTime__NSFlows..Flow__
(let ((@tmp_1 (pred--calculations.bsq_k15..16@534 x @@c_0_t)))
    (let ((@tmp_0 (not @tmp_1)))
      (ite @tmp_0
        (let (($__ir_ret__$1 accl))
          (let (($__ir_ret__$2 $__ir_ret__$1))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
        (let ((@tmp_4 (ListOps..s_list_push_back_T__DateTime__NSFlows..Flow__ accl x)))
          (let (($__ir_ret__ @tmp_4))
            (let (($__ir_ret__$2 $__ir_ret__))
              (let (($return $__ir_ret__$2))
                $return
              )
            )
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_reduce_T__DateTime__NSFlows..Flow___U_List__DateTime__NSFlows..Flow____fn--list.bsq_k1..1124@33448_ ((l List__DateTime__NSFlows..Flow__) (init List__DateTime__NSFlows..Flow__) (@@c_0_t BDateTime)) List__DateTime__NSFlows..Flow__
init
)

(define-fun List__DateTime__NSFlows..Flow__..filter_T__DateTime__NSFlows..Flow___pred--calculations.bsq_k15..16@534_ ((this List__DateTime__NSFlows..Flow__) (@@c_0_t BDateTime)) List__DateTime__NSFlows..Flow__
(let ((@tmp_0 (ListOps..s_list_empty_T__DateTime__NSFlows..Flow__ this)))
    (ite @tmp_0
      (let ((@tmp_2 List__DateTime__NSFlows..Flow__@@empty))
        (let (($__ir_ret__$3 @tmp_2))
          (let (($__ir_ret__$4 $__ir_ret__$3))
            (let (($return $__ir_ret__$4))
              $return
            )
          )
        )
      )
      (let ((@tmp_3 (ListOps..s_list_map_pred_T__DateTime__NSFlows..Flow___pred--calculations.bsq_k15..16@534_ this @@c_0_t)))
        (let ((mask @tmp_3))
          (let ((@tmp_7 (ListOps..s_list_has_true @tmp_3)))
            (let ((@tmp_6 (not @tmp_7)))
              (ite @tmp_6
                (let ((@tmp_9 List__DateTime__NSFlows..Flow__@@empty))
                  (let (($__ir_ret__$2 @tmp_9))
                    (let (($__ir_ret__$4 $__ir_ret__$2))
                      (let (($return $__ir_ret__$4))
                        $return
                      )
                    )
                  )
                )
                (let ((@tmp_11 (ListOps..s_list_has_false mask)))
                  (let ((@tmp_10 (not @tmp_11)))
                    (ite @tmp_10
                      (let (($__ir_ret__$1 this))
                        (let (($__ir_ret__$4 $__ir_ret__$1))
                          (let (($return $__ir_ret__$4))
                            $return
                          )
                        )
                      )
                      (let ((@tmp_16 List__DateTime__NSFlows..Flow__@@empty))
                        (let ((@tmp_14 (ListOps..s_list_reduce_T__DateTime__NSFlows..Flow___U_List__DateTime__NSFlows..Flow____fn--list.bsq_k1..1124@33448_ this @tmp_16 @@c_0_t)))
                          (let (($__ir_ret__ @tmp_14))
                            (let (($__ir_ret__$4 $__ir_ret__))
                              (let (($return $__ir_ret__$4))
                                $return
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun fn--calculations.bsq_k15..16@580 ((fdp _DateTime__NSFlows..Flow_)) NSFlows..Flow
(let ((@tmp_2 (_DateTime__NSFlows..Flow_@_1 fdp)))
    (let (($__ir_ret__ @tmp_2))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun ListOps..s_list_map_fn_T__DateTime__NSFlows..Flow___U_NSFlows..Flow__fn--calculations.bsq_k15..16@580_ ((l List__DateTime__NSFlows..Flow__)) List_NSFlows..Flow_
(List_NSFlows..Flow_@cons (seq.map (lambda ((@@x _DateTime__NSFlows..Flow_)) (fn--calculations.bsq_k15..16@580 @@x)) (List__DateTime__NSFlows..Flow___seq l)))
)

(define-fun List__DateTime__NSFlows..Flow__..map_T__DateTime__NSFlows..Flow___U_NSFlows..Flow__fn--calculations.bsq_k15..16@580_ ((this List__DateTime__NSFlows..Flow__)) List_NSFlows..Flow_
(let ((@tmp_0 (ListOps..s_list_empty_T__DateTime__NSFlows..Flow__ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_NSFlows..Flow_@@empty))
        (let (($__ir_ret__$1 @tmp_2))
          (let (($__ir_ret__$2 $__ir_ret__$1))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
      (let ((@tmp_3 (ListOps..s_list_map_fn_T__DateTime__NSFlows..Flow___U_NSFlows..Flow__fn--calculations.bsq_k15..16@580_ this)))
        (let (($__ir_ret__ @tmp_3))
          (let (($__ir_ret__$2 $__ir_ret__))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_empty_T_NSFlows..Flow_ ((l List_NSFlows..Flow_)) Bool
(= l List_NSFlows..Flow_@@empty)
)

(define-fun MapOps..s_map_empty_K_StringOf_NSProduct..ValidProductName___V_NSProduct..Product_ ((m Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) Bool
(= m Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@@empty)
)

(define-fun MapOps..s_map_has_K_StringOf_NSProduct..ValidProductName___V_NSProduct..Product_ ((m Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_) (k StringOf_NSProduct..ValidProductName_)) Bool
(not (= $MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@empty (select (Map_StringOf_NSProduct..ValidProductName___NSProduct..Product__array m) k)))
)

(define-fun map.bsq_k2_pre@0..32@1177..pre@0_K_StringOf_NSProduct..ValidProductName___V_NSProduct..Product_ ((this Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_) (key StringOf_NSProduct..ValidProductName_)) Bool
(let ((@tmp_2 (MapOps..s_map_empty_K_StringOf_NSProduct..ValidProductName___V_NSProduct..Product_ this)))
    (let ((@tmp_1 (not @tmp_2)))
      (let ((@tmp_4 (MapOps..s_map_has_K_StringOf_NSProduct..ValidProductName___V_NSProduct..Product_ this key)))
        (let ((@tmp_0 (and @tmp_1 @tmp_4)))
          (let (($__ir_ret__ @tmp_0))
            (let (($return $__ir_ret__))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun MapOps..s_map_get_K_StringOf_NSProduct..ValidProductName___V_NSProduct..Product_ ((m Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_) (k StringOf_NSProduct..ValidProductName_)) _StringOf_NSProduct..ValidProductName___NSProduct..Product_
($MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product__vtup (select (Map_StringOf_NSProduct..ValidProductName___NSProduct..Product__array m) k))
)

(define-fun Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_..get_K_StringOf_NSProduct..ValidProductName___V_NSProduct..Product_ ((this Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_) (key StringOf_NSProduct..ValidProductName_)) $Result_NSProduct..Product
(let ((@tmp_0 (map.bsq_k2_pre@0..32@1177..pre@0_K_StringOf_NSProduct..ValidProductName___V_NSProduct..Product_ this key)))
    (ite @tmp_0
      (let ((@tmp_1 (MapOps..s_map_get_K_StringOf_NSProduct..ValidProductName___V_NSProduct..Product_ this key)))
        (let ((e @tmp_1))
          (let ((@tmp_6 (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_1 @tmp_1)))
            (let (($__ir_ret__ @tmp_6))
              (let (($return $__ir_ret__))
                ($Result_NSProduct..Product@success $return)
              )
            )
          )
        )
      )
      ($Result_NSProduct..Product@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun NSCalculations..isHQLA ((product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_) (flow NSFlows..Flow)) $Result_Bool
(let ((@tmp_5 (NSFlows..Flow@_productId flow)))
    (let ((_@tmpvar@0 (Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_..get_K_StringOf_NSProduct..ValidProductName___V_NSProduct..Product_ product @tmp_5)))
      (ite ((_ is $Result_NSProduct..Product@error) _@tmpvar@0)
        ($Result_Bool@error ($Result_NSProduct..Product@error_value _@tmpvar@0))
        (let ((@tmp_2 ($Result_NSProduct..Product@success_value _@tmpvar@0)))
          (let ((@tmp_6 (NSProduct..Product@_isHQLA @tmp_2)))
            (let (($__ir_ret__ @tmp_6))
              (let (($return $__ir_ret__))
                ($Result_Bool@success $return)
              )
            )
          )
        )
      )
    )
  )
)

(define-fun pred--calculations.bsq_k15..25@1061$Llogic_and_done_3 ((@tmp_0 Bool)) Bool
(let (($__ir_ret__ @tmp_0))
    (let (($return $__ir_ret__))
      $return
    )
  )
)

(define-fun pred--calculations.bsq_k15..25@1061 ((flow NSFlows..Flow) (product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) $Result_Bool
(let ((@tmp_4 (NSFlows..Flow@_assetType flow)))
    (let ((@tmp_1 (= @tmp_4 NSBasics..AssetCategoryCodes..level1Assets)))
      (let ((@tmp_0 @tmp_1))
        (ite @tmp_1
          (let ((_@tmpvar@1 (NSCalculations..isHQLA product flow)))
            (ite ((_ is $Result_Bool@error) _@tmpvar@1)
              _@tmpvar@1
              (let ((@tmp_6 ($Result_Bool@success_value _@tmpvar@1)))
                (let ((@tmp_0$1 @tmp_6))
                  (let (($__ir_ret__$1 (pred--calculations.bsq_k15..25@1061$Llogic_and_done_3 @tmp_0$1)))
                    (let (($__ir_ret__$2 $__ir_ret__$1))
                      (let (($return $__ir_ret__$2))
                        ($Result_Bool@success $return)
                      )
                    )
                  )
                )
              )
            )
          )
          (let (($__ir_ret__ (pred--calculations.bsq_k15..25@1061$Llogic_and_done_3 @tmp_0)))
            (let (($__ir_ret__$2 $__ir_ret__))
              (let (($return $__ir_ret__$2))
                ($Result_Bool@success $return)
              )
            )
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_map_pred_T_NSFlows..Flow__pred--calculations.bsq_k15..25@1061_ ((l List_NSFlows..Flow_) (@@c_1_product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) $Result_List_Bool_
(let ((@maparray (seq.map (lambda ((@@x NSFlows..Flow)) (pred--calculations.bsq_k15..25@1061 @@x @@c_1_product)) (List_NSFlows..Flow__seq l))))
    (let ((@trgterr (seq.contains @maparray (seq.unit ($Result_Bool@error ErrorID_Target)))) (@othererr (seq.contains @maparray (seq.unit ($Result_Bool@error ErrorID_AssumeCheck)))))
      (ite @trgterr
        ($Result_List_Bool_@error ErrorID_Target)
        (ite @othererr
          ($Result_List_Bool_@error ErrorID_AssumeCheck)
          ($Result_List_Bool_@success (List_Bool_@cons (seq.map (lambda ((@@r $Result_Bool)) ($Result_Bool@success_value @@r)) @maparray)))
        )
      )
    )
  )
)

(define-fun ListOps..s_list_reduce_T_NSFlows..Flow__U_List_NSFlows..Flow___fn--list.bsq_k1..1124@33448_ ((l List_NSFlows..Flow_) (init List_NSFlows..Flow_) (@@c_1_product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) List_NSFlows..Flow_
init
)

(define-fun List_NSFlows..Flow_..filter_T_NSFlows..Flow__pred--calculations.bsq_k15..25@1061_ ((this List_NSFlows..Flow_) (@@c_1_product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) $Result_List_NSFlows..Flow_
(let ((@tmp_0 (ListOps..s_list_empty_T_NSFlows..Flow_ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_NSFlows..Flow_@@empty))
        (let (($__ir_ret__$3 @tmp_2))
          (let (($__ir_ret__$4 $__ir_ret__$3))
            (let (($return $__ir_ret__$4))
              ($Result_List_NSFlows..Flow_@success $return)
            )
          )
        )
      )
      (let ((_@tmpvar@2 (ListOps..s_list_map_pred_T_NSFlows..Flow__pred--calculations.bsq_k15..25@1061_ this @@c_1_product)))
        (ite ((_ is $Result_List_Bool_@error) _@tmpvar@2)
          ($Result_List_NSFlows..Flow_@error ($Result_List_Bool_@error_value _@tmpvar@2))
          (let ((@tmp_3 ($Result_List_Bool_@success_value _@tmpvar@2)))
            (let ((mask @tmp_3))
              (let ((@tmp_7 (ListOps..s_list_has_true @tmp_3)))
                (let ((@tmp_6 (not @tmp_7)))
                  (ite @tmp_6
                    (let ((@tmp_9 List_NSFlows..Flow_@@empty))
                      (let (($__ir_ret__$2 @tmp_9))
                        (let (($__ir_ret__$4 $__ir_ret__$2))
                          (let (($return $__ir_ret__$4))
                            ($Result_List_NSFlows..Flow_@success $return)
                          )
                        )
                      )
                    )
                    (let ((@tmp_11 (ListOps..s_list_has_false mask)))
                      (let ((@tmp_10 (not @tmp_11)))
                        (ite @tmp_10
                          (let (($__ir_ret__$1 this))
                            (let (($__ir_ret__$4 $__ir_ret__$1))
                              (let (($return $__ir_ret__$4))
                                ($Result_List_NSFlows..Flow_@success $return)
                              )
                            )
                          )
                          (let ((@tmp_16 List_NSFlows..Flow_@@empty))
                            (let ((@tmp_14 (ListOps..s_list_reduce_T_NSFlows..Flow__U_List_NSFlows..Flow___fn--list.bsq_k1..1124@33448_ this @tmp_16 @@c_1_product)))
                              (let (($__ir_ret__ @tmp_14))
                                (let (($__ir_ret__$4 $__ir_ret__))
                                  (let (($return $__ir_ret__$4))
                                    ($Result_List_NSFlows..Flow_@success $return)
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun fn--calculations.bsq_k15..26@1178 ((flow NSFlows..Flow)) BFloat
(let ((@tmp_2 (NSFlows..Flow@_amount flow)))
    (let (($__ir_ret__ @tmp_2))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun ListOps..s_list_map_fn_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..26@1178_ ((l List_NSFlows..Flow_)) List_Float_
(List_Float_@cons (seq.map (lambda ((@@x NSFlows..Flow)) (fn--calculations.bsq_k15..26@1178 @@x)) (List_NSFlows..Flow__seq l)))
)

(define-fun List_NSFlows..Flow_..map_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..26@1178_ ((this List_NSFlows..Flow_)) List_Float_
(let ((@tmp_0 (ListOps..s_list_empty_T_NSFlows..Flow_ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_Float_@@empty))
        (let (($__ir_ret__$1 @tmp_2))
          (let (($__ir_ret__$2 $__ir_ret__$1))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
      (let ((@tmp_3 (ListOps..s_list_map_fn_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..26@1178_ this)))
        (let (($__ir_ret__ @tmp_3))
          (let (($__ir_ret__$2 $__ir_ret__))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_empty_T_Float_ ((l List_Float_)) Bool
(= l List_Float_@@empty)
)

(define-fun fn--list.bsq_k1..688@19715 ((a BFloat) (b BFloat)) BFloat
(let ((@tmp_0 (+ a b)))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun ListOps..s_list_reduce_T_Float__U_Float__fn--list.bsq_k1..688@19715_ ((l List_Float_) (init BFloat)) BFloat
init
)

(define-fun List_Float_..sum_T_Float_ ((this List_Float_)) BFloat
(let ((@tmp_0 (ListOps..s_list_empty_T_Float_ this)))
    (ite @tmp_0
      (let (($__ir_ret__$1 BFloat@zero))
        (let (($__ir_ret__$2 $__ir_ret__$1))
          (let (($return $__ir_ret__$2))
            $return
          )
        )
      )
      (let ((@tmp_4 (ListOps..s_list_reduce_T_Float__U_Float__fn--list.bsq_k1..688@19715_ this BFloat@zero)))
        (let (($__ir_ret__ @tmp_4))
          (let (($__ir_ret__$2 $__ir_ret__))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun pred--calculations.bsq_k15..32@1405$Llogic_and_done_3 ((@tmp_0 Bool)) Bool
(let (($__ir_ret__ @tmp_0))
    (let (($return $__ir_ret__))
      $return
    )
  )
)

(define-fun pred--calculations.bsq_k15..32@1405 ((flow NSFlows..Flow) (product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) $Result_Bool
(let ((@tmp_4 (NSFlows..Flow@_assetType flow)))
    (let ((@tmp_1 (= @tmp_4 NSBasics..AssetCategoryCodes..level2aAssets)))
      (let ((@tmp_0 @tmp_1))
        (ite @tmp_1
          (let ((_@tmpvar@3 (NSCalculations..isHQLA product flow)))
            (ite ((_ is $Result_Bool@error) _@tmpvar@3)
              _@tmpvar@3
              (let ((@tmp_6 ($Result_Bool@success_value _@tmpvar@3)))
                (let ((@tmp_0$1 @tmp_6))
                  (let (($__ir_ret__$1 (pred--calculations.bsq_k15..32@1405$Llogic_and_done_3 @tmp_0$1)))
                    (let (($__ir_ret__$2 $__ir_ret__$1))
                      (let (($return $__ir_ret__$2))
                        ($Result_Bool@success $return)
                      )
                    )
                  )
                )
              )
            )
          )
          (let (($__ir_ret__ (pred--calculations.bsq_k15..32@1405$Llogic_and_done_3 @tmp_0)))
            (let (($__ir_ret__$2 $__ir_ret__))
              (let (($return $__ir_ret__$2))
                ($Result_Bool@success $return)
              )
            )
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_map_pred_T_NSFlows..Flow__pred--calculations.bsq_k15..32@1405_ ((l List_NSFlows..Flow_) (@@c_2_product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) $Result_List_Bool_
(let ((@maparray (seq.map (lambda ((@@x NSFlows..Flow)) (pred--calculations.bsq_k15..32@1405 @@x @@c_2_product)) (List_NSFlows..Flow__seq l))))
    (let ((@trgterr (seq.contains @maparray (seq.unit ($Result_Bool@error ErrorID_Target)))) (@othererr (seq.contains @maparray (seq.unit ($Result_Bool@error ErrorID_AssumeCheck)))))
      (ite @trgterr
        ($Result_List_Bool_@error ErrorID_Target)
        (ite @othererr
          ($Result_List_Bool_@error ErrorID_AssumeCheck)
          ($Result_List_Bool_@success (List_Bool_@cons (seq.map (lambda ((@@r $Result_Bool)) ($Result_Bool@success_value @@r)) @maparray)))
        )
      )
    )
  )
)

(define-fun List_NSFlows..Flow_..filter_T_NSFlows..Flow__pred--calculations.bsq_k15..32@1405_ ((this List_NSFlows..Flow_) (@@c_2_product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) $Result_List_NSFlows..Flow_
(let ((@tmp_0 (ListOps..s_list_empty_T_NSFlows..Flow_ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_NSFlows..Flow_@@empty))
        (let (($__ir_ret__$3 @tmp_2))
          (let (($__ir_ret__$4 $__ir_ret__$3))
            (let (($return $__ir_ret__$4))
              ($Result_List_NSFlows..Flow_@success $return)
            )
          )
        )
      )
      (let ((_@tmpvar@4 (ListOps..s_list_map_pred_T_NSFlows..Flow__pred--calculations.bsq_k15..32@1405_ this @@c_2_product)))
        (ite ((_ is $Result_List_Bool_@error) _@tmpvar@4)
          ($Result_List_NSFlows..Flow_@error ($Result_List_Bool_@error_value _@tmpvar@4))
          (let ((@tmp_3 ($Result_List_Bool_@success_value _@tmpvar@4)))
            (let ((mask @tmp_3))
              (let ((@tmp_7 (ListOps..s_list_has_true @tmp_3)))
                (let ((@tmp_6 (not @tmp_7)))
                  (ite @tmp_6
                    (let ((@tmp_9 List_NSFlows..Flow_@@empty))
                      (let (($__ir_ret__$2 @tmp_9))
                        (let (($__ir_ret__$4 $__ir_ret__$2))
                          (let (($return $__ir_ret__$4))
                            ($Result_List_NSFlows..Flow_@success $return)
                          )
                        )
                      )
                    )
                    (let ((@tmp_11 (ListOps..s_list_has_false mask)))
                      (let ((@tmp_10 (not @tmp_11)))
                        (ite @tmp_10
                          (let (($__ir_ret__$1 this))
                            (let (($__ir_ret__$4 $__ir_ret__$1))
                              (let (($return $__ir_ret__$4))
                                ($Result_List_NSFlows..Flow_@success $return)
                              )
                            )
                          )
                          (let ((@tmp_16 List_NSFlows..Flow_@@empty))
                            (let ((@tmp_14 (ListOps..s_list_reduce_T_NSFlows..Flow__U_List_NSFlows..Flow___fn--list.bsq_k1..1124@33448_ this @tmp_16 @@c_2_product)))
                              (let (($__ir_ret__ @tmp_14))
                                (let (($__ir_ret__$4 $__ir_ret__))
                                  (let (($return $__ir_ret__$4))
                                    ($Result_List_NSFlows..Flow_@success $return)
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun fn--calculations.bsq_k15..33@1523 ((flow NSFlows..Flow)) BFloat
(let ((@tmp_2 (NSFlows..Flow@_amount flow)))
    (let (($__ir_ret__ @tmp_2))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun ListOps..s_list_map_fn_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..33@1523_ ((l List_NSFlows..Flow_)) List_Float_
(List_Float_@cons (seq.map (lambda ((@@x NSFlows..Flow)) (fn--calculations.bsq_k15..33@1523 @@x)) (List_NSFlows..Flow__seq l)))
)

(define-fun List_NSFlows..Flow_..map_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..33@1523_ ((this List_NSFlows..Flow_)) List_Float_
(let ((@tmp_0 (ListOps..s_list_empty_T_NSFlows..Flow_ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_Float_@@empty))
        (let (($__ir_ret__$1 @tmp_2))
          (let (($__ir_ret__$2 $__ir_ret__$1))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
      (let ((@tmp_3 (ListOps..s_list_map_fn_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..33@1523_ this)))
        (let (($__ir_ret__ @tmp_3))
          (let (($__ir_ret__$2 $__ir_ret__))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun pred--calculations.bsq_k15..39@1732$Llogic_and_done_3 ((@tmp_0 Bool)) Bool
(let (($__ir_ret__ @tmp_0))
    (let (($return $__ir_ret__))
      $return
    )
  )
)

(define-fun pred--calculations.bsq_k15..39@1732 ((flow NSFlows..Flow) (product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) $Result_Bool
(let ((@tmp_4 (NSFlows..Flow@_assetType flow)))
    (let ((@tmp_1 (= @tmp_4 NSBasics..AssetCategoryCodes..level2bAssets)))
      (let ((@tmp_0 @tmp_1))
        (ite @tmp_1
          (let ((_@tmpvar@5 (NSCalculations..isHQLA product flow)))
            (ite ((_ is $Result_Bool@error) _@tmpvar@5)
              _@tmpvar@5
              (let ((@tmp_6 ($Result_Bool@success_value _@tmpvar@5)))
                (let ((@tmp_0$1 @tmp_6))
                  (let (($__ir_ret__$1 (pred--calculations.bsq_k15..39@1732$Llogic_and_done_3 @tmp_0$1)))
                    (let (($__ir_ret__$2 $__ir_ret__$1))
                      (let (($return $__ir_ret__$2))
                        ($Result_Bool@success $return)
                      )
                    )
                  )
                )
              )
            )
          )
          (let (($__ir_ret__ (pred--calculations.bsq_k15..39@1732$Llogic_and_done_3 @tmp_0)))
            (let (($__ir_ret__$2 $__ir_ret__))
              (let (($return $__ir_ret__$2))
                ($Result_Bool@success $return)
              )
            )
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_map_pred_T_NSFlows..Flow__pred--calculations.bsq_k15..39@1732_ ((l List_NSFlows..Flow_) (@@c_3_product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) $Result_List_Bool_
(let ((@maparray (seq.map (lambda ((@@x NSFlows..Flow)) (pred--calculations.bsq_k15..39@1732 @@x @@c_3_product)) (List_NSFlows..Flow__seq l))))
    (let ((@trgterr (seq.contains @maparray (seq.unit ($Result_Bool@error ErrorID_Target)))) (@othererr (seq.contains @maparray (seq.unit ($Result_Bool@error ErrorID_AssumeCheck)))))
      (ite @trgterr
        ($Result_List_Bool_@error ErrorID_Target)
        (ite @othererr
          ($Result_List_Bool_@error ErrorID_AssumeCheck)
          ($Result_List_Bool_@success (List_Bool_@cons (seq.map (lambda ((@@r $Result_Bool)) ($Result_Bool@success_value @@r)) @maparray)))
        )
      )
    )
  )
)

(define-fun List_NSFlows..Flow_..filter_T_NSFlows..Flow__pred--calculations.bsq_k15..39@1732_ ((this List_NSFlows..Flow_) (@@c_3_product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) $Result_List_NSFlows..Flow_
(let ((@tmp_0 (ListOps..s_list_empty_T_NSFlows..Flow_ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_NSFlows..Flow_@@empty))
        (let (($__ir_ret__$3 @tmp_2))
          (let (($__ir_ret__$4 $__ir_ret__$3))
            (let (($return $__ir_ret__$4))
              ($Result_List_NSFlows..Flow_@success $return)
            )
          )
        )
      )
      (let ((_@tmpvar@6 (ListOps..s_list_map_pred_T_NSFlows..Flow__pred--calculations.bsq_k15..39@1732_ this @@c_3_product)))
        (ite ((_ is $Result_List_Bool_@error) _@tmpvar@6)
          ($Result_List_NSFlows..Flow_@error ($Result_List_Bool_@error_value _@tmpvar@6))
          (let ((@tmp_3 ($Result_List_Bool_@success_value _@tmpvar@6)))
            (let ((mask @tmp_3))
              (let ((@tmp_7 (ListOps..s_list_has_true @tmp_3)))
                (let ((@tmp_6 (not @tmp_7)))
                  (ite @tmp_6
                    (let ((@tmp_9 List_NSFlows..Flow_@@empty))
                      (let (($__ir_ret__$2 @tmp_9))
                        (let (($__ir_ret__$4 $__ir_ret__$2))
                          (let (($return $__ir_ret__$4))
                            ($Result_List_NSFlows..Flow_@success $return)
                          )
                        )
                      )
                    )
                    (let ((@tmp_11 (ListOps..s_list_has_false mask)))
                      (let ((@tmp_10 (not @tmp_11)))
                        (ite @tmp_10
                          (let (($__ir_ret__$1 this))
                            (let (($__ir_ret__$4 $__ir_ret__$1))
                              (let (($return $__ir_ret__$4))
                                ($Result_List_NSFlows..Flow_@success $return)
                              )
                            )
                          )
                          (let ((@tmp_16 List_NSFlows..Flow_@@empty))
                            (let ((@tmp_14 (ListOps..s_list_reduce_T_NSFlows..Flow__U_List_NSFlows..Flow___fn--list.bsq_k1..1124@33448_ this @tmp_16 @@c_3_product)))
                              (let (($__ir_ret__ @tmp_14))
                                (let (($__ir_ret__$4 $__ir_ret__))
                                  (let (($return $__ir_ret__$4))
                                    ($Result_List_NSFlows..Flow_@success $return)
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun fn--calculations.bsq_k15..40@1850 ((flow NSFlows..Flow)) BFloat
(let ((@tmp_2 (NSFlows..Flow@_amount flow)))
    (let (($__ir_ret__ @tmp_2))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun ListOps..s_list_map_fn_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..40@1850_ ((l List_NSFlows..Flow_)) List_Float_
(List_Float_@cons (seq.map (lambda ((@@x NSFlows..Flow)) (fn--calculations.bsq_k15..40@1850 @@x)) (List_NSFlows..Flow__seq l)))
)

(define-fun List_NSFlows..Flow_..map_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..40@1850_ ((this List_NSFlows..Flow_)) List_Float_
(let ((@tmp_0 (ListOps..s_list_empty_T_NSFlows..Flow_ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_Float_@@empty))
        (let (($__ir_ret__$1 @tmp_2))
          (let (($__ir_ret__$2 $__ir_ret__$1))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
      (let ((@tmp_3 (ListOps..s_list_map_fn_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..40@1850_ this)))
        (let (($__ir_ret__ @tmp_3))
          (let (($__ir_ret__$2 $__ir_ret__))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun Float..max ((a BFloat) (b BFloat)) BFloat
(let ((@tmp_0 (> a b)))
    (ite @tmp_0
      (let (($__ir_ret__$1 a))
        (let (($__ir_ret__$2 $__ir_ret__$1))
          (let (($return $__ir_ret__$2))
            $return
          )
        )
      )
      (let (($__ir_ret__ b))
        (let (($__ir_ret__$2 $__ir_ret__))
          (let (($return $__ir_ret__$2))
            $return
          )
        )
      )
    )
  )
)

(define-fun NSCalculations..hqlaAmount ((product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_) (t0Flows List_NSFlows..Flow_) (reserveBalanceRequirement BFloat)) $Result_BFloat
(let ((_@tmpvar@9 (List_NSFlows..Flow_..filter_T_NSFlows..Flow__pred--calculations.bsq_k15..25@1061_ t0Flows product)))
    (ite ((_ is $Result_List_NSFlows..Flow_@error) _@tmpvar@9)
      ($Result_BFloat@error ($Result_List_NSFlows..Flow_@error_value _@tmpvar@9))
      (let ((@tmp_2 ($Result_List_NSFlows..Flow_@success_value _@tmpvar@9)))
        (let ((@tmp_4 (List_NSFlows..Flow_..map_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..26@1178_ @tmp_2)))
          (let ((@tmp_6 (List_Float_..sum_T_Float_ @tmp_4)))
            (let ((level1LiquidAssetsThatAreEligibleHQLA @tmp_6))
              (let ((@tmp_7 (- @tmp_6 reserveBalanceRequirement)))
                (let ((level1LiquidAssetAmount @tmp_7))
                  (let ((_@tmpvar@8 (List_NSFlows..Flow_..filter_T_NSFlows..Flow__pred--calculations.bsq_k15..32@1405_ t0Flows product)))
                    (ite ((_ is $Result_List_NSFlows..Flow_@error) _@tmpvar@8)
                      ($Result_BFloat@error ($Result_List_NSFlows..Flow_@error_value _@tmpvar@8))
                      (let ((@tmp_12 ($Result_List_NSFlows..Flow_@success_value _@tmpvar@8)))
                        (let ((@tmp_14 (List_NSFlows..Flow_..map_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..33@1523_ @tmp_12)))
                          (let ((@tmp_16 (List_Float_..sum_T_Float_ @tmp_14)))
                            (let ((level2aLiquidAssetsThatAreEligibleHQLA @tmp_16))
                              (let ((@tmp_17 (* 0.85 @tmp_16)))
                                (let ((level2aLiquidAssetAmount @tmp_17))
                                  (let ((_@tmpvar@7 (List_NSFlows..Flow_..filter_T_NSFlows..Flow__pred--calculations.bsq_k15..39@1732_ t0Flows product)))
                                    (ite ((_ is $Result_List_NSFlows..Flow_@error) _@tmpvar@7)
                                      ($Result_BFloat@error ($Result_List_NSFlows..Flow_@error_value _@tmpvar@7))
                                      (let ((@tmp_22 ($Result_List_NSFlows..Flow_@success_value _@tmpvar@7)))
                                        (let ((@tmp_24 (List_NSFlows..Flow_..map_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..40@1850_ @tmp_22)))
                                          (let ((@tmp_26 (List_Float_..sum_T_Float_ @tmp_24)))
                                            (let ((level2bLiquidAssetsThatAreEligibleHQLA @tmp_26))
                                              (let ((@tmp_27 (* 0.5 @tmp_26)))
                                                (let ((level2bLiquidAssetAmount @tmp_27))
                                                  (let ((@tmp_32 (+ @tmp_17 @tmp_27)))
                                                    (let ((@tmp_35 (* 0.6667 @tmp_7)))
                                                      (let ((@tmp_31 (- @tmp_32 @tmp_35)))
                                                        (let ((@tmp_30 (Float..max @tmp_31 BFloat@zero)))
                                                          (let ((level2CapExcessAmount @tmp_30))
                                                            (let ((@tmp_41 (- @tmp_27 @tmp_30)))
                                                              (let ((@tmp_46 (+ @tmp_7 @tmp_17)))
                                                                (let ((@tmp_44 (* 0.1765 @tmp_46)))
                                                                  (let ((@tmp_40 (- @tmp_41 @tmp_44)))
                                                                    (let ((@tmp_39 (Float..max @tmp_40 BFloat@zero)))
                                                                      (let ((level2bCapExcessAmount @tmp_39))
                                                                        (let ((@tmp_50 (+ @tmp_30 @tmp_39)))
                                                                          (let ((unadjustedExcessHQLAAmount @tmp_50))
                                                                            (let ((adjustedLevel1LiquidAssetAmount @tmp_7))
                                                                              (let ((@tmp_54 (* @tmp_17 0.85)))
                                                                                (let ((adjustedlevel2aLiquidAssetAmount @tmp_54))
                                                                                  (let ((@tmp_57 (* @tmp_27 0.5)))
                                                                                    (let ((adjustedlevel2bLiquidAssetAmount @tmp_57))
                                                                                      (let ((@tmp_62 (+ @tmp_54 @tmp_57)))
                                                                                        (let ((@tmp_65 (* 0.6667 @tmp_7)))
                                                                                          (let ((@tmp_61 (- @tmp_62 @tmp_65)))
                                                                                            (let ((@tmp_60 (Float..max @tmp_61 BFloat@zero)))
                                                                                              (let ((adjustedLevel2CapExcessAmount @tmp_60))
                                                                                                (let ((@tmp_71 (- @tmp_57 @tmp_60)))
                                                                                                  (let ((@tmp_76 (+ @tmp_7 @tmp_54)))
                                                                                                    (let ((@tmp_74 (* 0.1765 @tmp_76)))
                                                                                                      (let ((@tmp_70 (- @tmp_71 @tmp_74)))
                                                                                                        (let ((@tmp_69 (Float..max @tmp_70 BFloat@zero)))
                                                                                                          (let ((adjustedlevel2bCapExcessAmount @tmp_69))
                                                                                                            (let ((@tmp_80 (+ @tmp_60 @tmp_69)))
                                                                                                              (let ((adjustedExcessHQLAAmount @tmp_80))
                                                                                                                (let ((@tmp_85 (+ @tmp_7 @tmp_17)))
                                                                                                                  (let ((@tmp_84 (+ @tmp_85 @tmp_27)))
                                                                                                                    (let ((@tmp_89 (Float..max @tmp_50 @tmp_80)))
                                                                                                                      (let ((@tmp_83 (- @tmp_84 @tmp_89)))
                                                                                                                        (let (($__ir_ret__ @tmp_83))
                                                                                                                          (let (($return $__ir_ret__))
                                                                                                                            ($Result_BFloat@success $return)
                                                                                                                          )
                                                                                                                        )
                                                                                                                      )
                                                                                                                    )
                                                                                                                  )
                                                                                                                )
                                                                                                              )
                                                                                                            )
                                                                                                          )
                                                                                                        )
                                                                                                      )
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun $ListSingletonCons_2_List_Int_ ((arg0 BInt) (arg1 BInt)) List_Int_
(List_Int_@cons (seq.++ (seq.unit arg0) (seq.unit arg1)))
)

(define-fun ListOps..s_list_empty_T_Int_ ((l List_Int_)) Bool
(= l List_Int_@@empty)
)

(define-fun NSDates..addDays ((dcount BInt) (t BDateTime)) BDateTime
(let (($__ir_ret__ t))
    (let (($return $__ir_ret__))
      $return
    )
  )
)

(define-fun fn--calculations.bsq_k15..138@6125 ((i BInt) (t BDateTime)) BDateTime
(let ((@tmp_0 (NSDates..addDays i t)))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun ListOps..s_list_map_fn_T_Int__U_DateTime__fn--calculations.bsq_k15..138@6125_ ((l List_Int_) (@@c_4_t BDateTime)) List_DateTime_
(List_DateTime_@cons (seq.map (lambda ((@@x BInt)) (fn--calculations.bsq_k15..138@6125 @@x @@c_4_t)) (List_Int__seq l)))
)

(define-fun List_Int_..map_T_Int__U_DateTime__fn--calculations.bsq_k15..138@6125_ ((this List_Int_) (@@c_4_t BDateTime)) List_DateTime_
(let ((@tmp_0 (ListOps..s_list_empty_T_Int_ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_DateTime_@@empty))
        (let (($__ir_ret__$1 @tmp_2))
          (let (($__ir_ret__$2 $__ir_ret__$1))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
      (let ((@tmp_3 (ListOps..s_list_map_fn_T_Int__U_DateTime__fn--calculations.bsq_k15..138@6125_ this @@c_4_t)))
        (let (($__ir_ret__ @tmp_3))
          (let (($__ir_ret__$2 $__ir_ret__))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_empty_T_DateTime_ ((l List_DateTime_)) Bool
(= l List_DateTime_@@empty)
)

(define-fun pred--calculations.bsq_k15..62@3456 ((fdp _DateTime__NSFlows..Flow_) (t BDateTime)) Bool
(let ((@tmp_3 (_DateTime__NSFlows..Flow_@_0 fdp)))
    (let ((@tmp_0 (NSDates..datesEqual @tmp_3 t)))
      (let (($__ir_ret__ @tmp_0))
        (let (($return $__ir_ret__))
          $return
        )
      )
    )
  )
)

(define-fun ListOps..s_list_map_pred_T__DateTime__NSFlows..Flow___pred--calculations.bsq_k15..62@3456_ ((l List__DateTime__NSFlows..Flow__) (@@c_9_t BDateTime)) List_Bool_
(List_Bool_@cons (seq.map (lambda ((@@x _DateTime__NSFlows..Flow_)) (pred--calculations.bsq_k15..62@3456 @@x @@c_9_t)) (List__DateTime__NSFlows..Flow___seq l)))
)

(define-fun List__DateTime__NSFlows..Flow__..filter_T__DateTime__NSFlows..Flow___pred--calculations.bsq_k15..62@3456_ ((this List__DateTime__NSFlows..Flow__) (@@c_9_t BDateTime)) List__DateTime__NSFlows..Flow__
(let ((@tmp_0 (ListOps..s_list_empty_T__DateTime__NSFlows..Flow__ this)))
    (ite @tmp_0
      (let ((@tmp_2 List__DateTime__NSFlows..Flow__@@empty))
        (let (($__ir_ret__$3 @tmp_2))
          (let (($__ir_ret__$4 $__ir_ret__$3))
            (let (($return $__ir_ret__$4))
              $return
            )
          )
        )
      )
      (let ((@tmp_3 (ListOps..s_list_map_pred_T__DateTime__NSFlows..Flow___pred--calculations.bsq_k15..62@3456_ this @@c_9_t)))
        (let ((mask @tmp_3))
          (let ((@tmp_7 (ListOps..s_list_has_true @tmp_3)))
            (let ((@tmp_6 (not @tmp_7)))
              (ite @tmp_6
                (let ((@tmp_9 List__DateTime__NSFlows..Flow__@@empty))
                  (let (($__ir_ret__$2 @tmp_9))
                    (let (($__ir_ret__$4 $__ir_ret__$2))
                      (let (($return $__ir_ret__$4))
                        $return
                      )
                    )
                  )
                )
                (let ((@tmp_11 (ListOps..s_list_has_false mask)))
                  (let ((@tmp_10 (not @tmp_11)))
                    (ite @tmp_10
                      (let (($__ir_ret__$1 this))
                        (let (($__ir_ret__$4 $__ir_ret__$1))
                          (let (($return $__ir_ret__$4))
                            $return
                          )
                        )
                      )
                      (let ((@tmp_16 List__DateTime__NSFlows..Flow__@@empty))
                        (let ((@tmp_14 (ListOps..s_list_reduce_T__DateTime__NSFlows..Flow___U_List__DateTime__NSFlows..Flow____fn--list.bsq_k1..1124@33448_ this @tmp_16 @@c_9_t)))
                          (let (($__ir_ret__ @tmp_14))
                            (let (($__ir_ret__$4 $__ir_ret__))
                              (let (($return $__ir_ret__$4))
                                $return
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun fn--calculations.bsq_k15..62@3502 ((fdp _DateTime__NSFlows..Flow_)) NSFlows..Flow
(let ((@tmp_2 (_DateTime__NSFlows..Flow_@_1 fdp)))
    (let (($__ir_ret__ @tmp_2))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun ListOps..s_list_map_fn_T__DateTime__NSFlows..Flow___U_NSFlows..Flow__fn--calculations.bsq_k15..62@3502_ ((l List__DateTime__NSFlows..Flow__)) List_NSFlows..Flow_
(List_NSFlows..Flow_@cons (seq.map (lambda ((@@x _DateTime__NSFlows..Flow_)) (fn--calculations.bsq_k15..62@3502 @@x)) (List__DateTime__NSFlows..Flow___seq l)))
)

(define-fun List__DateTime__NSFlows..Flow__..map_T__DateTime__NSFlows..Flow___U_NSFlows..Flow__fn--calculations.bsq_k15..62@3502_ ((this List__DateTime__NSFlows..Flow__)) List_NSFlows..Flow_
(let ((@tmp_0 (ListOps..s_list_empty_T__DateTime__NSFlows..Flow__ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_NSFlows..Flow_@@empty))
        (let (($__ir_ret__$1 @tmp_2))
          (let (($__ir_ret__$2 $__ir_ret__$1))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
      (let ((@tmp_3 (ListOps..s_list_map_fn_T__DateTime__NSFlows..Flow___U_NSFlows..Flow__fn--calculations.bsq_k15..62@3502_ this)))
        (let (($__ir_ret__ @tmp_3))
          (let (($__ir_ret__$2 $__ir_ret__))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun fn--calculations.bsq_k15..62@3425 ((t BDateTime) (flowsForDate List__DateTime__NSFlows..Flow__)) List_NSFlows..Flow_
(let ((@tmp_2 (List__DateTime__NSFlows..Flow__..filter_T__DateTime__NSFlows..Flow___pred--calculations.bsq_k15..62@3456_ flowsForDate t)))
    (let ((@tmp_4 (List__DateTime__NSFlows..Flow__..map_T__DateTime__NSFlows..Flow___U_NSFlows..Flow__fn--calculations.bsq_k15..62@3502_ @tmp_2)))
      (let (($__ir_ret__ @tmp_4))
        (let (($return $__ir_ret__))
          $return
        )
      )
    )
  )
)

(define-fun ListOps..s_list_map_fn_T_DateTime__U_List_NSFlows..Flow___fn--calculations.bsq_k15..62@3425_ ((l List_DateTime_) (@@c_10_flowsForDate List__DateTime__NSFlows..Flow__)) List_List_NSFlows..Flow__
(List_List_NSFlows..Flow__@cons (seq.map (lambda ((@@x BDateTime)) (fn--calculations.bsq_k15..62@3425 @@x @@c_10_flowsForDate)) (List_DateTime__seq l)))
)

(define-fun List_DateTime_..map_T_DateTime__U_List_NSFlows..Flow___fn--calculations.bsq_k15..62@3425_ ((this List_DateTime_) (@@c_10_flowsForDate List__DateTime__NSFlows..Flow__)) List_List_NSFlows..Flow__
(let ((@tmp_0 (ListOps..s_list_empty_T_DateTime_ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_List_NSFlows..Flow__@@empty))
        (let (($__ir_ret__$1 @tmp_2))
          (let (($__ir_ret__$2 $__ir_ret__$1))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
      (let ((@tmp_3 (ListOps..s_list_map_fn_T_DateTime__U_List_NSFlows..Flow___fn--calculations.bsq_k15..62@3425_ this @@c_10_flowsForDate)))
        (let (($__ir_ret__ @tmp_3))
          (let (($__ir_ret__$2 $__ir_ret__))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_empty_T_List_NSFlows..Flow__ ((l List_List_NSFlows..Flow__)) Bool
(= l List_List_NSFlows..Flow__@@empty)
)

(define-fun ListOps..s_list_empty_T_NSRules..Rule_ ((l List_NSRules..Rule_)) Bool
(= l List_NSRules..Rule_@@empty)
)

(define-fun pred--rules.bsq_k28..20@468 ((rr BTerm) (flow NSFlows..Flow)) $Result_Bool
(let ((_@tmpvar@28 ($VirtualInvoke_NSRules..Rule@_applies_ rr flow)))
    (ite ((_ is $Result_Bool@error) _@tmpvar@28)
      _@tmpvar@28
      (let ((@tmp_2 ($Result_Bool@success_value _@tmpvar@28)))
        (let (($__ir_ret__ @tmp_2))
          (let (($return $__ir_ret__))
            ($Result_Bool@success $return)
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_map_pred_T_NSRules..Rule__pred--rules.bsq_k28..20@468_ ((l List_NSRules..Rule_) (@@c_12_flow NSFlows..Flow)) $Result_List_Bool_
(let ((@maparray (seq.map (lambda ((@@x BTerm)) (pred--rules.bsq_k28..20@468 @@x @@c_12_flow)) (List_NSRules..Rule__seq l))))
    (let ((@trgterr (seq.contains @maparray (seq.unit ($Result_Bool@error ErrorID_Target)))) (@othererr (seq.contains @maparray (seq.unit ($Result_Bool@error ErrorID_AssumeCheck)))))
      (ite @trgterr
        ($Result_List_Bool_@error ErrorID_Target)
        (ite @othererr
          ($Result_List_Bool_@error ErrorID_AssumeCheck)
          ($Result_List_Bool_@success (List_Bool_@cons (seq.map (lambda ((@@r $Result_Bool)) ($Result_Bool@success_value @@r)) @maparray)))
        )
      )
    )
  )
)

(define-fun List_NSRules..Rule_..someOf_T_NSRules..Rule__pred--rules.bsq_k28..20@468_ ((this List_NSRules..Rule_) (@@c_12_flow NSFlows..Flow)) $Result_Bool
(let ((@tmp_0 (ListOps..s_list_empty_T_NSRules..Rule_ this)))
    (ite @tmp_0
      (let (($__ir_ret__$1 false))
        (let (($__ir_ret__$2 $__ir_ret__$1))
          (let (($return $__ir_ret__$2))
            ($Result_Bool@success $return)
          )
        )
      )
      (let ((_@tmpvar@29 (ListOps..s_list_map_pred_T_NSRules..Rule__pred--rules.bsq_k28..20@468_ this @@c_12_flow)))
        (ite ((_ is $Result_List_Bool_@error) _@tmpvar@29)
          ($Result_Bool@error ($Result_List_Bool_@error_value _@tmpvar@29))
          (let ((@tmp_3 ($Result_List_Bool_@success_value _@tmpvar@29)))
            (let ((mask @tmp_3))
              (let ((@tmp_6 (ListOps..s_list_has_true @tmp_3)))
                (let (($__ir_ret__ @tmp_6))
                  (let (($__ir_ret__$2 $__ir_ret__))
                    (let (($return $__ir_ret__$2))
                      ($Result_Bool@success $return)
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun NSRules..isAnyApplicable ((flow NSFlows..Flow) (rules List_NSRules..Rule_)) $Result_Bool
(let ((_@tmpvar@30 (List_NSRules..Rule_..someOf_T_NSRules..Rule__pred--rules.bsq_k28..20@468_ rules flow)))
    (ite ((_ is $Result_Bool@error) _@tmpvar@30)
      _@tmpvar@30
      (let ((@tmp_2 ($Result_Bool@success_value _@tmpvar@30)))
        (let (($__ir_ret__ @tmp_2))
          (let (($return $__ir_ret__))
            ($Result_Bool@success $return)
          )
        )
      )
    )
  )
)

(define-fun pred--calculations.bsq_k15..149@6688 ((flow NSFlows..Flow) (mmorules List_NSRules..Rule_)) $Result_Bool
(let ((_@tmpvar@31 (NSRules..isAnyApplicable flow mmorules)))
    (ite ((_ is $Result_Bool@error) _@tmpvar@31)
      _@tmpvar@31
      (let ((@tmp_0 ($Result_Bool@success_value _@tmpvar@31)))
        (let (($__ir_ret__ @tmp_0))
          (let (($return $__ir_ret__))
            ($Result_Bool@success $return)
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_map_pred_T_NSFlows..Flow__pred--calculations.bsq_k15..149@6688_ ((l List_NSFlows..Flow_) (@@c_7_mmorules List_NSRules..Rule_)) $Result_List_Bool_
(let ((@maparray (seq.map (lambda ((@@x NSFlows..Flow)) (pred--calculations.bsq_k15..149@6688 @@x @@c_7_mmorules)) (List_NSFlows..Flow__seq l))))
    (let ((@trgterr (seq.contains @maparray (seq.unit ($Result_Bool@error ErrorID_Target)))) (@othererr (seq.contains @maparray (seq.unit ($Result_Bool@error ErrorID_AssumeCheck)))))
      (ite @trgterr
        ($Result_List_Bool_@error ErrorID_Target)
        (ite @othererr
          ($Result_List_Bool_@error ErrorID_AssumeCheck)
          ($Result_List_Bool_@success (List_Bool_@cons (seq.map (lambda ((@@r $Result_Bool)) ($Result_Bool@success_value @@r)) @maparray)))
        )
      )
    )
  )
)

(define-fun List_NSFlows..Flow_..filter_T_NSFlows..Flow__pred--calculations.bsq_k15..149@6688_ ((this List_NSFlows..Flow_) (@@c_7_mmorules List_NSRules..Rule_)) $Result_List_NSFlows..Flow_
(let ((@tmp_0 (ListOps..s_list_empty_T_NSFlows..Flow_ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_NSFlows..Flow_@@empty))
        (let (($__ir_ret__$3 @tmp_2))
          (let (($__ir_ret__$4 $__ir_ret__$3))
            (let (($return $__ir_ret__$4))
              ($Result_List_NSFlows..Flow_@success $return)
            )
          )
        )
      )
      (let ((_@tmpvar@32 (ListOps..s_list_map_pred_T_NSFlows..Flow__pred--calculations.bsq_k15..149@6688_ this @@c_7_mmorules)))
        (ite ((_ is $Result_List_Bool_@error) _@tmpvar@32)
          ($Result_List_NSFlows..Flow_@error ($Result_List_Bool_@error_value _@tmpvar@32))
          (let ((@tmp_3 ($Result_List_Bool_@success_value _@tmpvar@32)))
            (let ((mask @tmp_3))
              (let ((@tmp_7 (ListOps..s_list_has_true @tmp_3)))
                (let ((@tmp_6 (not @tmp_7)))
                  (ite @tmp_6
                    (let ((@tmp_9 List_NSFlows..Flow_@@empty))
                      (let (($__ir_ret__$2 @tmp_9))
                        (let (($__ir_ret__$4 $__ir_ret__$2))
                          (let (($return $__ir_ret__$4))
                            ($Result_List_NSFlows..Flow_@success $return)
                          )
                        )
                      )
                    )
                    (let ((@tmp_11 (ListOps..s_list_has_false mask)))
                      (let ((@tmp_10 (not @tmp_11)))
                        (ite @tmp_10
                          (let (($__ir_ret__$1 this))
                            (let (($__ir_ret__$4 $__ir_ret__$1))
                              (let (($return $__ir_ret__$4))
                                ($Result_List_NSFlows..Flow_@success $return)
                              )
                            )
                          )
                          (let ((@tmp_16 List_NSFlows..Flow_@@empty))
                            (let ((@tmp_14 (ListOps..s_list_reduce_T_NSFlows..Flow__U_List_NSFlows..Flow___fn--list.bsq_k1..1124@33448_ this @tmp_16 @@c_7_mmorules)))
                              (let (($__ir_ret__ @tmp_14))
                                (let (($__ir_ret__$4 $__ir_ret__))
                                  (let (($return $__ir_ret__$4))
                                    ($Result_List_NSFlows..Flow_@success $return)
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun fn--calculations.bsq_k15..71@3971 ((flow NSFlows..Flow)) BFloat
(let ((@tmp_2 (NSFlows..Flow@_amount flow)))
    (let (($__ir_ret__ @tmp_2))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun ListOps..s_list_map_fn_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..71@3971_ ((l List_NSFlows..Flow_)) List_Float_
(List_Float_@cons (seq.map (lambda ((@@x NSFlows..Flow)) (fn--calculations.bsq_k15..71@3971 @@x)) (List_NSFlows..Flow__seq l)))
)

(define-fun List_NSFlows..Flow_..map_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..71@3971_ ((this List_NSFlows..Flow_)) List_Float_
(let ((@tmp_0 (ListOps..s_list_empty_T_NSFlows..Flow_ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_Float_@@empty))
        (let (($__ir_ret__$1 @tmp_2))
          (let (($__ir_ret__$2 $__ir_ret__$1))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
      (let ((@tmp_3 (ListOps..s_list_map_fn_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..71@3971_ this)))
        (let (($__ir_ret__ @tmp_3))
          (let (($__ir_ret__$2 $__ir_ret__))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun NSCalculations..aggregateDaily_pred--calculations.bsq_k15..149@6688_ ((flows List_NSFlows..Flow_) (@@c_7_mmorules List_NSRules..Rule_)) $Result_BFloat
(let ((_@tmpvar@33 (List_NSFlows..Flow_..filter_T_NSFlows..Flow__pred--calculations.bsq_k15..149@6688_ flows @@c_7_mmorules)))
    (ite ((_ is $Result_List_NSFlows..Flow_@error) _@tmpvar@33)
      ($Result_BFloat@error ($Result_List_NSFlows..Flow_@error_value _@tmpvar@33))
      (let ((@tmp_2 ($Result_List_NSFlows..Flow_@success_value _@tmpvar@33)))
        (let ((@tmp_4 (List_NSFlows..Flow_..map_T_NSFlows..Flow__U_Float__fn--calculations.bsq_k15..71@3971_ @tmp_2)))
          (let ((@tmp_6 (List_Float_..sum_T_Float_ @tmp_4)))
            (let (($__ir_ret__ @tmp_6))
              (let (($return $__ir_ret__))
                ($Result_BFloat@success $return)
              )
            )
          )
        )
      )
    )
  )
)

(define-fun fn--calculations.bsq_k15..63@3534 ((flows List_NSFlows..Flow_) (@@c_7_mmorules List_NSRules..Rule_)) $Result_BFloat
(let ((_@tmpvar@34 (NSCalculations..aggregateDaily_pred--calculations.bsq_k15..149@6688_ flows @@c_7_mmorules)))
    (ite ((_ is $Result_BFloat@error) _@tmpvar@34)
      _@tmpvar@34
      (let ((@tmp_0 ($Result_BFloat@success_value _@tmpvar@34)))
        (let (($__ir_ret__ @tmp_0))
          (let (($return $__ir_ret__))
            ($Result_BFloat@success $return)
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_map_fn_T_List_NSFlows..Flow___U_Float__fn--calculations.bsq_k15..63@3534_ ((l List_List_NSFlows..Flow__) (@@c_7_mmorules List_NSRules..Rule_)) $Result_List_Float_
(let ((@maparray (seq.map (lambda ((@@x List_NSFlows..Flow_)) (fn--calculations.bsq_k15..63@3534 @@x)) (List_List_NSFlows..Flow___seq l))))
    (let ((@trgterr (seq.contains @maparray (seq.unit ($Result_BFloat@error ErrorID_Target)))) (@othererr (seq.contains @maparray (seq.unit ($Result_BFloat@error ErrorID_AssumeCheck)))))
      (ite @trgterr
        ($Result_List_Float_@error ErrorID_Target)
        (ite @othererr
          ($Result_List_Float_@error ErrorID_AssumeCheck)
          ($Result_List_Float_@success (List_Float_@cons (seq.map (lambda ((@@r $Result_BFloat)) ($Result_BFloat@success_value @@r)) @maparray)))
        )
      )
    )
  )
)

(define-fun List_List_NSFlows..Flow__..map_T_List_NSFlows..Flow___U_Float__fn--calculations.bsq_k15..63@3534_ ((this List_List_NSFlows..Flow__) (@@c_7_mmorules List_NSRules..Rule_)) $Result_List_Float_
(let ((@tmp_0 (ListOps..s_list_empty_T_List_NSFlows..Flow__ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_Float_@@empty))
        (let (($__ir_ret__$1 @tmp_2))
          (let (($__ir_ret__$2 $__ir_ret__$1))
            (let (($return $__ir_ret__$2))
              ($Result_List_Float_@success $return)
            )
          )
        )
      )
      (let ((_@tmpvar@35 (ListOps..s_list_map_fn_T_List_NSFlows..Flow___U_Float__fn--calculations.bsq_k15..63@3534_ this @@c_7_mmorules)))
        (ite ((_ is $Result_List_Float_@error) _@tmpvar@35)
          _@tmpvar@35
          (let ((@tmp_3 ($Result_List_Float_@success_value _@tmpvar@35)))
            (let (($__ir_ret__ @tmp_3))
              (let (($__ir_ret__$2 $__ir_ret__))
                (let (($return $__ir_ret__$2))
                  ($Result_List_Float_@success $return)
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun NSCalculations..spanDates_pred--calculations.bsq_k15..140@6232_ ((dates List_DateTime_) (flowsForDate List__DateTime__NSFlows..Flow__) (@@c_5_t BDateTime) (@@c_5_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) $Result_List_Float_
(let ((@tmp_2 (List_DateTime_..map_T_DateTime__U_List_NSFlows..Flow___fn--calculations.bsq_k15..62@3425_ dates flowsForDate)))
    (let ((_@tmpvar@36 (List_List_NSFlows..Flow__..map_T_List_NSFlows..Flow___U_Float__fn--calculations.bsq_k15..63@3534_ @tmp_2 @@c_5_t @@c_5_toCounterparty)))
      (ite ((_ is $Result_List_Float_@error) _@tmpvar@36)
        _@tmpvar@36
        (let ((@tmp_4 ($Result_List_Float_@success_value _@tmpvar@36)))
          (let (($__ir_ret__ @tmp_4))
            (let (($return $__ir_ret__))
              ($Result_List_Float_@success $return)
            )
          )
        )
      )
    )
  )
)

(define-fun NSCalculations..aggregateSpan_pred--calculations.bsq_k15..140@6232_ ((dates List_DateTime_) (flowsForDate List__DateTime__NSFlows..Flow__) (@@c_5_t BDateTime) (@@c_5_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) $Result_BFloat
(let ((_@tmpvar@37 (NSCalculations..spanDates_pred--calculations.bsq_k15..140@6232_ dates flowsForDate @@c_5_t @@c_5_toCounterparty)))
    (ite ((_ is $Result_List_Float_@error) _@tmpvar@37)
      ($Result_BFloat@error ($Result_List_Float_@error_value _@tmpvar@37))
      (let ((@tmp_1 ($Result_List_Float_@success_value _@tmpvar@37)))
        (let ((@tmp_5 (List_Float_..sum_T_Float_ @tmp_1)))
          (let (($__ir_ret__ @tmp_5))
            (let (($return $__ir_ret__))
              ($Result_BFloat@success $return)
            )
          )
        )
      )
    )
  )
)

(define-fun NSCalculations..spanDates_pred--calculations.bsq_k15..144@6432_ ((dates List_DateTime_) (flowsForDate List__DateTime__NSFlows..Flow__) (@@c_6_t BDateTime) (@@c_6_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) $Result_List_Float_
(let ((@tmp_2 (List_DateTime_..map_T_DateTime__U_List_NSFlows..Flow___fn--calculations.bsq_k15..62@3425_ dates flowsForDate)))
    (let ((_@tmpvar@38 (List_List_NSFlows..Flow__..map_T_List_NSFlows..Flow___U_Float__fn--calculations.bsq_k15..63@3534_ @tmp_2 @@c_6_t @@c_6_toCounterparty)))
      (ite ((_ is $Result_List_Float_@error) _@tmpvar@38)
        _@tmpvar@38
        (let ((@tmp_4 ($Result_List_Float_@success_value _@tmpvar@38)))
          (let (($__ir_ret__ @tmp_4))
            (let (($return $__ir_ret__))
              ($Result_List_Float_@success $return)
            )
          )
        )
      )
    )
  )
)

(define-fun NSCalculations..aggregateSpan_pred--calculations.bsq_k15..144@6432_ ((dates List_DateTime_) (flowsForDate List__DateTime__NSFlows..Flow__) (@@c_6_t BDateTime) (@@c_6_toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) $Result_BFloat
(let ((_@tmpvar@39 (NSCalculations..spanDates_pred--calculations.bsq_k15..144@6432_ dates flowsForDate @@c_6_t @@c_6_toCounterparty)))
    (ite ((_ is $Result_List_Float_@error) _@tmpvar@39)
      ($Result_BFloat@error ($Result_List_Float_@error_value _@tmpvar@39))
      (let ((@tmp_1 ($Result_List_Float_@success_value _@tmpvar@39)))
        (let ((@tmp_5 (List_Float_..sum_T_Float_ @tmp_1)))
          (let (($__ir_ret__ @tmp_5))
            (let (($return $__ir_ret__))
              ($Result_BFloat@success $return)
            )
          )
        )
      )
    )
  )
)

(define-fun $ListSingletonCons_15_List_String_ ((arg0 BString) (arg1 BString) (arg2 BString) (arg3 BString) (arg4 BString) (arg5 BString) (arg6 BString) (arg7 BString) (arg8 BString) (arg9 BString) (arg10 BString) (arg11 BString) (arg12 BString) (arg13 BString) (arg14 BString)) List_String_
(List_String_@cons (seq.++ (seq.unit arg0) (seq.unit arg1) (seq.unit arg2) (seq.unit arg3) (seq.unit arg4) (seq.unit arg5) (seq.unit arg6) (seq.unit arg7) (seq.unit arg8) (seq.unit arg9) (seq.unit arg10) (seq.unit arg11) (seq.unit arg12) (seq.unit arg13) (seq.unit arg14)))
)

(define-fun $ListSingletonCons_24_List_NSRules..Rule_ ((arg0 BTerm) (arg1 BTerm) (arg2 BTerm) (arg3 BTerm) (arg4 BTerm) (arg5 BTerm) (arg6 BTerm) (arg7 BTerm) (arg8 BTerm) (arg9 BTerm) (arg10 BTerm) (arg11 BTerm) (arg12 BTerm) (arg13 BTerm) (arg14 BTerm) (arg15 BTerm) (arg16 BTerm) (arg17 BTerm) (arg18 BTerm) (arg19 BTerm) (arg20 BTerm) (arg21 BTerm) (arg22 BTerm) (arg23 BTerm)) List_NSRules..Rule_
(List_NSRules..Rule_@cons (seq.++ (seq.unit arg0) (seq.unit arg1) (seq.unit arg2) (seq.unit arg3) (seq.unit arg4) (seq.unit arg5) (seq.unit arg6) (seq.unit arg7) (seq.unit arg8) (seq.unit arg9) (seq.unit arg10) (seq.unit arg11) (seq.unit arg12) (seq.unit arg13) (seq.unit arg14) (seq.unit arg15) (seq.unit arg16) (seq.unit arg17) (seq.unit arg18) (seq.unit arg19) (seq.unit arg20) (seq.unit arg21) (seq.unit arg22) (seq.unit arg23)))
)

(define-fun NSOutflows..outflowRules ((counterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_) (t BDateTime)) List_NSRules..Rule_
(let ((@tmp_1 (NSOutflows..Rule32a1@cons "32(a)(1)" 0.03)))
    (let ((@tmp_4 (BTerm@termbox TypeTag_NSOutflows..Rule32a1 (NSOutflows..Rule32a1@box @tmp_1))))
      (let ((@tmp_5 (NSOutflows..Rule32a2@cons "32(a)(2)" 0.1 counterparty)))
        (let ((@tmp_9 (BTerm@termbox TypeTag_NSOutflows..Rule32a2 (NSOutflows..Rule32a2@box @tmp_5))))
          (let ((@tmp_10 (NSOutflows..Rule32a3@cons "32(a)(3)" 0.2 counterparty)))
            (let ((@tmp_14 (BTerm@termbox TypeTag_NSOutflows..Rule32a3 (NSOutflows..Rule32a3@box @tmp_10))))
              (let ((@tmp_15 (NSOutflows..Rule32a4@cons "32(a)(4)" 0.4 counterparty)))
                (let ((@tmp_19 (BTerm@termbox TypeTag_NSOutflows..Rule32a4 (NSOutflows..Rule32a4@box @tmp_15))))
                  (let ((@tmp_20 (NSOutflows..Rule32a5@cons "32(a)(5)" 0.4 counterparty)))
                    (let ((@tmp_24 (BTerm@termbox TypeTag_NSOutflows..Rule32a5 (NSOutflows..Rule32a5@box @tmp_20))))
                      (let ((@tmp_25 (NSOutflows..Rule32b@cons "32(b)" BFloat@one)))
                        (let ((@tmp_28 (BTerm@termbox TypeTag_NSOutflows..Rule32b (NSOutflows..Rule32b@box @tmp_25))))
                          (let ((@tmp_29 (NSOutflows..Rule32c@cons "32(c)" 0.2)))
                            (let ((@tmp_32 (BTerm@termbox TypeTag_NSOutflows..Rule32c (NSOutflows..Rule32c@box @tmp_29))))
                              (let ((@tmp_33 (NSOutflows..Rule32d@cons "32(d)" 0.1)))
                                (let ((@tmp_36 (BTerm@termbox TypeTag_NSOutflows..Rule32d (NSOutflows..Rule32d@box @tmp_33))))
                                  (let ((@tmp_37 (NSOutflows..Rule32e@cons "32(e)" BFloat@zero)))
                                    (let ((@tmp_40 (BTerm@termbox TypeTag_NSOutflows..Rule32e (NSOutflows..Rule32e@box @tmp_37))))
                                      (let ((@tmp_41 (NSOutflows..Rule32f@cons "32(f)" BFloat@zero)))
                                        (let ((@tmp_44 (BTerm@termbox TypeTag_NSOutflows..Rule32f (NSOutflows..Rule32f@box @tmp_41))))
                                          (let ((@tmp_45 (NSOutflows..Rule32g1@cons "32(g)(1)" BFloat@zero counterparty t)))
                                            (let ((@tmp_50 (BTerm@termbox TypeTag_NSOutflows..Rule32g1 (NSOutflows..Rule32g1@box @tmp_45))))
                                              (let ((@tmp_51 (NSOutflows..Rule32g2@cons "32(g)(2)" BFloat@zero counterparty t)))
                                                (let ((@tmp_56 (BTerm@termbox TypeTag_NSOutflows..Rule32g2 (NSOutflows..Rule32g2@box @tmp_51))))
                                                  (let ((@tmp_57 (NSOutflows..Rule32g3@cons "32(g)(3)" BFloat@zero counterparty t)))
                                                    (let ((@tmp_62 (BTerm@termbox TypeTag_NSOutflows..Rule32g3 (NSOutflows..Rule32g3@box @tmp_57))))
                                                      (let ((@tmp_63 (NSOutflows..Rule32g4@cons "32(g)(4)" BFloat@zero counterparty t)))
                                                        (let ((@tmp_68 (BTerm@termbox TypeTag_NSOutflows..Rule32g4 (NSOutflows..Rule32g4@box @tmp_63))))
                                                          (let ((@tmp_69 (NSOutflows..Rule32g5@cons "32(g)(5)" BFloat@zero counterparty)))
                                                            (let ((@tmp_73 (BTerm@termbox TypeTag_NSOutflows..Rule32g5 (NSOutflows..Rule32g5@box @tmp_69))))
                                                              (let ((@tmp_74 (NSOutflows..Rule32g6@cons "32(g)(6)" BFloat@zero counterparty)))
                                                                (let ((@tmp_78 (BTerm@termbox TypeTag_NSOutflows..Rule32g6 (NSOutflows..Rule32g6@box @tmp_74))))
                                                                  (let ((@tmp_79 (NSOutflows..Rule32g7@cons "32(g)(7)" BFloat@zero counterparty)))
                                                                    (let ((@tmp_83 (BTerm@termbox TypeTag_NSOutflows..Rule32g7 (NSOutflows..Rule32g7@box @tmp_79))))
                                                                      (let ((@tmp_84 (NSOutflows..Rule32g8@cons "32(g)(8)" BFloat@zero counterparty)))
                                                                        (let ((@tmp_88 (BTerm@termbox TypeTag_NSOutflows..Rule32g8 (NSOutflows..Rule32g8@box @tmp_84))))
                                                                          (let ((@tmp_89 (NSOutflows..Rule32g9@cons "32(g)(9)" BFloat@zero counterparty)))
                                                                            (let ((@tmp_93 (BTerm@termbox TypeTag_NSOutflows..Rule32g9 (NSOutflows..Rule32g9@box @tmp_89))))
                                                                              (let ((@tmp_94 (NSOutflows..Rule32h3@cons "32(h)(3)" 0.05 counterparty)))
                                                                                (let ((@tmp_98 (BTerm@termbox TypeTag_NSOutflows..Rule32h3 (NSOutflows..Rule32h3@box @tmp_94))))
                                                                                  (let ((@tmp_99 (NSOutflows..Rule32h4@cons "32(h)(4)" 0.25 counterparty)))
                                                                                    (let ((@tmp_103 (BTerm@termbox TypeTag_NSOutflows..Rule32h4 (NSOutflows..Rule32h4@box @tmp_99))))
                                                                                      (let ((@tmp_104 (NSOutflows..Rule32l@cons "32(l)" BFloat@zero)))
                                                                                        (let ((@tmp_107 (BTerm@termbox TypeTag_NSOutflows..Rule32l (NSOutflows..Rule32l@box @tmp_104))))
                                                                                          (let ((@tmp_108 (NSOutflows..Rule33f1iii@cons "33(f)(1)(iii)" BFloat@zero t)))
                                                                                            (let ((@tmp_112 (BTerm@termbox TypeTag_NSOutflows..Rule33f1iii (NSOutflows..Rule33f1iii@box @tmp_108))))
                                                                                              (let ((@tmp_113 (NSOutflows..Rule33f1iv@cons "33(f)(1)(iv)" 0.15 t)))
                                                                                                (let ((@tmp_117 (BTerm@termbox TypeTag_NSOutflows..Rule33f1iv (NSOutflows..Rule33f1iv@box @tmp_113))))
                                                                                                  (let ((@tmp_0 ($ListSingletonCons_24_List_NSRules..Rule_ @tmp_4 @tmp_9 @tmp_14 @tmp_19 @tmp_24 @tmp_28 @tmp_32 @tmp_36 @tmp_40 @tmp_44 @tmp_50 @tmp_56 @tmp_62 @tmp_68 @tmp_73 @tmp_78 @tmp_83 @tmp_88 @tmp_93 @tmp_98 @tmp_103 @tmp_107 @tmp_112 @tmp_117)))
                                                                                                    (let (($__ir_ret__ @tmp_0))
                                                                                                      (let (($return $__ir_ret__))
                                                                                                        $return
                                                                                                      )
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun $EntityLoad_NSRules..Rule@_name_ ((arg BTerm)) BString
(ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32a1 arg)
    (NSOutflows..Rule32a1@_name (bsqobject_NSOutflows..Rule32a1_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32a2 arg)
    (NSOutflows..Rule32a2@_name (bsqobject_NSOutflows..Rule32a2_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32a3 arg)
    (NSOutflows..Rule32a3@_name (bsqobject_NSOutflows..Rule32a3_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32a4 arg)
    (NSOutflows..Rule32a4@_name (bsqobject_NSOutflows..Rule32a4_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32a5 arg)
    (NSOutflows..Rule32a5@_name (bsqobject_NSOutflows..Rule32a5_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32b arg)
    (NSOutflows..Rule32b@_name (bsqobject_NSOutflows..Rule32b_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32c arg)
    (NSOutflows..Rule32c@_name (bsqobject_NSOutflows..Rule32c_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32d arg)
    (NSOutflows..Rule32d@_name (bsqobject_NSOutflows..Rule32d_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32e arg)
    (NSOutflows..Rule32e@_name (bsqobject_NSOutflows..Rule32e_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32f arg)
    (NSOutflows..Rule32f@_name (bsqobject_NSOutflows..Rule32f_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32g1 arg)
    (NSOutflows..Rule32g1@_name (bsqobject_NSOutflows..Rule32g1_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32g2 arg)
    (NSOutflows..Rule32g2@_name (bsqobject_NSOutflows..Rule32g2_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32g3 arg)
    (NSOutflows..Rule32g3@_name (bsqobject_NSOutflows..Rule32g3_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32g4 arg)
    (NSOutflows..Rule32g4@_name (bsqobject_NSOutflows..Rule32g4_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32g5 arg)
    (NSOutflows..Rule32g5@_name (bsqobject_NSOutflows..Rule32g5_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32g6 arg)
    (NSOutflows..Rule32g6@_name (bsqobject_NSOutflows..Rule32g6_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32g7 arg)
    (NSOutflows..Rule32g7@_name (bsqobject_NSOutflows..Rule32g7_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32g8 arg)
    (NSOutflows..Rule32g8@_name (bsqobject_NSOutflows..Rule32g8_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32g9 arg)
    (NSOutflows..Rule32g9@_name (bsqobject_NSOutflows..Rule32g9_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32h3 arg)
    (NSOutflows..Rule32h3@_name (bsqobject_NSOutflows..Rule32h3_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32h4 arg)
    (NSOutflows..Rule32h4@_name (bsqobject_NSOutflows..Rule32h4_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule32l arg)
    (NSOutflows..Rule32l@_name (bsqobject_NSOutflows..Rule32l_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule33f1iii arg)
    (NSOutflows..Rule33f1iii@_name (bsqobject_NSOutflows..Rule33f1iii_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSOutflows..Rule33f1iv arg)
    (NSOutflows..Rule33f1iv@_name (bsqobject_NSOutflows..Rule33f1iv_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSInflows..Rule20a1 arg)
    (NSInflows..Rule20a1@_name (bsqobject_NSInflows..Rule20a1_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSInflows..Rule20a3dash6 arg)
    (NSInflows..Rule20a3dash6@_name (bsqobject_NSInflows..Rule20a3dash6_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSInflows..Rule22b3L2a arg)
    (NSInflows..Rule22b3L2a@_name (bsqobject_NSInflows..Rule22b3L2a_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSInflows..Rule22b3L2b arg)
    (NSInflows..Rule22b3L2b@_name (bsqobject_NSInflows..Rule22b3L2b_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSInflows..Rule20b arg)
    (NSInflows..Rule20b@_name (bsqobject_NSInflows..Rule20b_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSInflows..Rule20c arg)
    (NSInflows..Rule20c@_name (bsqobject_NSInflows..Rule20c_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSInflows..Rule33b arg)
    (NSInflows..Rule33b@_name (bsqobject_NSInflows..Rule33b_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSInflows..Rule33c arg)
    (NSInflows..Rule33c@_name (bsqobject_NSInflows..Rule33c_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSInflows..Rule33d1 arg)
    (NSInflows..Rule33d1@_name (bsqobject_NSInflows..Rule33d1_value (BTerm_termvalue arg)))
    (ite ($SubtypeCheck_NSRules..Rule_oftype_NSInflows..Rule33d2 arg)
    (NSInflows..Rule33d2@_name (bsqobject_NSInflows..Rule33d2_value (BTerm_termvalue arg)))
    (NSInflows..Rule33e@_name (bsqobject_NSInflows..Rule33e_value (BTerm_termvalue arg)))
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
  )
)

(define-fun ListOps..s_list_empty_T_String_ ((l List_String_)) Bool
(= l List_String_@@empty)
)

(define-fun ListOps..s_list_has_T_String_ ((l List_String_) (v BString)) Bool
(seq.contains (List_String__seq l) (seq.unit v))
)

(define-fun List_String_..contains_T_String_ ((this List_String_) (v BString)) Bool
(let ((@tmp_0 (ListOps..s_list_empty_T_String_ this)))
    (ite @tmp_0
      (let (($__ir_ret__$1 false))
        (let (($__ir_ret__$2 $__ir_ret__$1))
          (let (($return $__ir_ret__$2))
            $return
          )
        )
      )
      (let ((@tmp_3 (ListOps..s_list_has_T_String_ this v)))
        (let (($__ir_ret__ @tmp_3))
          (let (($__ir_ret__$2 $__ir_ret__))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun pred--rules.bsq_k28..28@715 ((rr BTerm) (names List_String_)) Bool
(let ((@tmp_5 ($EntityLoad_NSRules..Rule@_name_ rr)))
    (let ((@tmp_2 (List_String_..contains_T_String_ names @tmp_5)))
      (let (($__ir_ret__ @tmp_2))
        (let (($return $__ir_ret__))
          $return
        )
      )
    )
  )
)

(define-fun ListOps..s_list_map_pred_T_NSRules..Rule__pred--rules.bsq_k28..28@715_ ((l List_NSRules..Rule_) (@@c_11_names List_String_)) List_Bool_
(List_Bool_@cons (seq.map (lambda ((@@x BTerm)) (pred--rules.bsq_k28..28@715 @@x @@c_11_names)) (List_NSRules..Rule__seq l)))
)

(define-fun ListOps..s_list_reduce_T_NSRules..Rule__U_List_NSRules..Rule___fn--list.bsq_k1..1124@33448_ ((l List_NSRules..Rule_) (init List_NSRules..Rule_) (@@c_11_names List_String_)) List_NSRules..Rule_
init
)

(define-fun List_NSRules..Rule_..filter_T_NSRules..Rule__pred--rules.bsq_k28..28@715_ ((this List_NSRules..Rule_) (@@c_11_names List_String_)) List_NSRules..Rule_
(let ((@tmp_0 (ListOps..s_list_empty_T_NSRules..Rule_ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_NSRules..Rule_@@empty))
        (let (($__ir_ret__$3 @tmp_2))
          (let (($__ir_ret__$4 $__ir_ret__$3))
            (let (($return $__ir_ret__$4))
              $return
            )
          )
        )
      )
      (let ((@tmp_3 (ListOps..s_list_map_pred_T_NSRules..Rule__pred--rules.bsq_k28..28@715_ this @@c_11_names)))
        (let ((mask @tmp_3))
          (let ((@tmp_7 (ListOps..s_list_has_true @tmp_3)))
            (let ((@tmp_6 (not @tmp_7)))
              (ite @tmp_6
                (let ((@tmp_9 List_NSRules..Rule_@@empty))
                  (let (($__ir_ret__$2 @tmp_9))
                    (let (($__ir_ret__$4 $__ir_ret__$2))
                      (let (($return $__ir_ret__$4))
                        $return
                      )
                    )
                  )
                )
                (let ((@tmp_11 (ListOps..s_list_has_false mask)))
                  (let ((@tmp_10 (not @tmp_11)))
                    (ite @tmp_10
                      (let (($__ir_ret__$1 this))
                        (let (($__ir_ret__$4 $__ir_ret__$1))
                          (let (($return $__ir_ret__$4))
                            $return
                          )
                        )
                      )
                      (let ((@tmp_16 List_NSRules..Rule_@@empty))
                        (let ((@tmp_14 (ListOps..s_list_reduce_T_NSRules..Rule__U_List_NSRules..Rule___fn--list.bsq_k1..1124@33448_ this @tmp_16 @@c_11_names)))
                          (let (($__ir_ret__ @tmp_14))
                            (let (($__ir_ret__$4 $__ir_ret__))
                              (let (($return $__ir_ret__$4))
                                $return
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun NSRules..findAll ((names List_String_) (rules List_NSRules..Rule_)) List_NSRules..Rule_
(let ((@tmp_2 (List_NSRules..Rule_..filter_T_NSRules..Rule__pred--rules.bsq_k28..28@715_ rules names)))
    (let (($__ir_ret__ @tmp_2))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun NSCalculations..maturityMismatchOutflowRules ((toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_) (t BDateTime)) List_NSRules..Rule_
(let ((@tmp_0 ($ListSingletonCons_15_List_String_ "32(g)(1)" "32(g)(2)" "32(g)(3)" "32(g)(4)" "32(g)(5)" "32(g)(6)" "32(g)(7)" "32(g)(8)" "32(g)(9)" "32(h)(1)" "32(h)(2)" "32(h)(5)" "32(j)" "32(k)" "32(l)")))
    (let ((rrules @tmp_0))
      (let ((@tmp_18 (NSOutflows..outflowRules toCounterparty t)))
        (let ((@tmp_16 (NSRules..findAll @tmp_0 @tmp_18)))
          (let (($__ir_ret__ @tmp_16))
            (let (($return $__ir_ret__))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun NSCalculations..spanDates_pred--calculations.bsq_k15..149@6688_ ((dates List_DateTime_) (flowsForDate List__DateTime__NSFlows..Flow__) (@@c_7_mmorules List_NSRules..Rule_)) $Result_List_Float_
(let ((@tmp_2 (List_DateTime_..map_T_DateTime__U_List_NSFlows..Flow___fn--calculations.bsq_k15..62@3425_ dates flowsForDate)))
    (let ((_@tmpvar@40 (List_List_NSFlows..Flow__..map_T_List_NSFlows..Flow___U_Float__fn--calculations.bsq_k15..63@3534_ @tmp_2 @@c_7_mmorules)))
      (ite ((_ is $Result_List_Float_@error) _@tmpvar@40)
        _@tmpvar@40
        (let ((@tmp_4 ($Result_List_Float_@success_value _@tmpvar@40)))
          (let (($__ir_ret__ @tmp_4))
            (let (($return $__ir_ret__))
              ($Result_List_Float_@success $return)
            )
          )
        )
      )
    )
  )
)

(define-fun $ListSingletonCons_4_List_String_ ((arg0 BString) (arg1 BString) (arg2 BString) (arg3 BString)) List_String_
(List_String_@cons (seq.++ (seq.unit arg0) (seq.unit arg1) (seq.unit arg2) (seq.unit arg3)))
)

(define-fun $ListSingletonCons_12_List_NSRules..Rule_ ((arg0 BTerm) (arg1 BTerm) (arg2 BTerm) (arg3 BTerm) (arg4 BTerm) (arg5 BTerm) (arg6 BTerm) (arg7 BTerm) (arg8 BTerm) (arg9 BTerm) (arg10 BTerm) (arg11 BTerm)) List_NSRules..Rule_
(List_NSRules..Rule_@cons (seq.++ (seq.unit arg0) (seq.unit arg1) (seq.unit arg2) (seq.unit arg3) (seq.unit arg4) (seq.unit arg5) (seq.unit arg6) (seq.unit arg7) (seq.unit arg8) (seq.unit arg9) (seq.unit arg10) (seq.unit arg11)))
)

(define-fun NSInflows..inflowRules ((counterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_) (t BDateTime)) List_NSRules..Rule_
(let ((@tmp_1 (NSInflows..Rule20a1@cons "20(a)(1)" BFloat@one t)))
    (let ((@tmp_5 (BTerm@termbox TypeTag_NSInflows..Rule20a1 (NSInflows..Rule20a1@box @tmp_1))))
      (let ((@tmp_6 (NSInflows..Rule20a3dash6@cons "20(a)(3)-(6)" BFloat@one)))
        (let ((@tmp_9 (BTerm@termbox TypeTag_NSInflows..Rule20a3dash6 (NSInflows..Rule20a3dash6@box @tmp_6))))
          (let ((@tmp_10 (NSInflows..Rule22b3L2a@cons "22(b)(3)L1" -1.0)))
            (let ((@tmp_13 (BTerm@termbox TypeTag_NSInflows..Rule22b3L2a (NSInflows..Rule22b3L2a@box @tmp_10))))
              (let ((@tmp_14 (NSInflows..Rule22b3L2a@cons "22(b)(3)L2a" -0.85)))
                (let ((@tmp_17 (BTerm@termbox TypeTag_NSInflows..Rule22b3L2a (NSInflows..Rule22b3L2a@box @tmp_14))))
                  (let ((@tmp_18 (NSInflows..Rule22b3L2b@cons "22(b)(3)L2b" -0.5)))
                    (let ((@tmp_21 (BTerm@termbox TypeTag_NSInflows..Rule22b3L2b (NSInflows..Rule22b3L2b@box @tmp_18))))
                      (let ((@tmp_22 (NSInflows..Rule20b@cons "20(b)" 0.85)))
                        (let ((@tmp_25 (BTerm@termbox TypeTag_NSInflows..Rule20b (NSInflows..Rule20b@box @tmp_22))))
                          (let ((@tmp_26 (NSInflows..Rule20c@cons "20(c)" 0.5)))
                            (let ((@tmp_29 (BTerm@termbox TypeTag_NSInflows..Rule20c (NSInflows..Rule20c@box @tmp_26))))
                              (let ((@tmp_30 (NSInflows..Rule33b@cons "33(b)" BFloat@one)))
                                (let ((@tmp_33 (BTerm@termbox TypeTag_NSInflows..Rule33b (NSInflows..Rule33b@box @tmp_30))))
                                  (let ((@tmp_34 (NSInflows..Rule33c@cons "33(c)" 0.5 counterparty t)))
                                    (let ((@tmp_39 (BTerm@termbox TypeTag_NSInflows..Rule33c (NSInflows..Rule33c@box @tmp_34))))
                                      (let ((@tmp_40 (NSInflows..Rule33d1@cons "33(d)(1)" BFloat@one counterparty)))
                                        (let ((@tmp_44 (BTerm@termbox TypeTag_NSInflows..Rule33d1 (NSInflows..Rule33d1@box @tmp_40))))
                                          (let ((@tmp_45 (NSInflows..Rule33d2@cons "33(d)(2)" BFloat@one counterparty)))
                                            (let ((@tmp_49 (BTerm@termbox TypeTag_NSInflows..Rule33d2 (NSInflows..Rule33d2@box @tmp_45))))
                                              (let ((@tmp_50 (NSInflows..Rule33e@cons "33(e)" BFloat@one)))
                                                (let ((@tmp_53 (BTerm@termbox TypeTag_NSInflows..Rule33e (NSInflows..Rule33e@box @tmp_50))))
                                                  (let ((@tmp_0 ($ListSingletonCons_12_List_NSRules..Rule_ @tmp_5 @tmp_9 @tmp_13 @tmp_17 @tmp_21 @tmp_25 @tmp_29 @tmp_33 @tmp_39 @tmp_44 @tmp_49 @tmp_53)))
                                                    (let (($__ir_ret__ @tmp_0))
                                                      (let (($return $__ir_ret__))
                                                        $return
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun NSCalculations..maturityMismatchInflowRules ((toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_) (t BDateTime)) List_NSRules..Rule_
(let ((@tmp_0 ($ListSingletonCons_4_List_String_ "33(c)" "33(d)" "33(e)" "33(f)")))
    (let ((rrules @tmp_0))
      (let ((@tmp_7 (NSInflows..inflowRules toCounterparty t)))
        (let ((@tmp_5 (NSRules..findAll @tmp_0 @tmp_7)))
          (let (($__ir_ret__ @tmp_5))
            (let (($return $__ir_ret__))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun NSCalculations..spanDates_pred--calculations.bsq_k15..157@6971_ ((dates List_DateTime_) (flowsForDate List__DateTime__NSFlows..Flow__) (@@c_8_mmorules List_NSRules..Rule_)) $Result_List_Float_
(let ((@tmp_2 (List_DateTime_..map_T_DateTime__U_List_NSFlows..Flow___fn--calculations.bsq_k15..62@3425_ dates flowsForDate)))
    (let ((_@tmpvar@41 (List_List_NSFlows..Flow__..map_T_List_NSFlows..Flow___U_Float__fn--calculations.bsq_k15..63@3534_ @tmp_2 @@c_8_mmorules)))
      (ite ((_ is $Result_List_Float_@error) _@tmpvar@41)
        _@tmpvar@41
        (let ((@tmp_4 ($Result_List_Float_@success_value _@tmpvar@41)))
          (let (($__ir_ret__ @tmp_4))
            (let (($return $__ir_ret__))
              ($Result_List_Float_@success $return)
            )
          )
        )
      )
    )
  )
)

(define-fun List_Float_..transduce_E_Float__T_Float__U_Float__fn--calculations.bsq_k15..186@8568_ ((this List_Float_) (env BFloat)) $Result___Float__List_Float___
(let ((@tmp_0 (ListOps..s_list_empty_T_Float_ this)))
    (ite @tmp_0
      (let ((@tmp_4 List_Float_@@empty))
        (let ((@tmp_2 (__Float__List_Float___@cons env @tmp_4)))
          (let (($__ir_ret__ @tmp_2))
            (let (($return $__ir_ret__))
              ($Result___Float__List_Float___@success $return)
            )
          )
        )
      )
      ($Result___Float__List_Float___@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun ListOps..s_blockingfailure_T_List_Float__ () $Result_List_Float_
($Result_List_Float_@error ErrorID_AssumeCheck)
)

(define-fun List_Float_..reverse_T_Float_ ((this List_Float_)) $Result_List_Float_
(let ((@tmp_0 (ListOps..s_list_empty_T_Float_ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_Float_@@empty))
        (let (($__ir_ret__$1 @tmp_2))
          (let (($__ir_ret__$2 $__ir_ret__$1))
            (let (($return $__ir_ret__$2))
              ($Result_List_Float_@success $return)
            )
          )
        )
      )
      (let ((_@tmpvar@42 ListOps..s_blockingfailure_T_List_Float__))
        (ite ((_ is $Result_List_Float_@error) _@tmpvar@42)
          _@tmpvar@42
          (let ((@tmp_3 ($Result_List_Float_@success_value _@tmpvar@42)))
            (let (($__ir_ret__ @tmp_3))
              (let (($__ir_ret__$2 $__ir_ret__))
                (let (($return $__ir_ret__$2))
                  ($Result_List_Float_@success $return)
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun NSCalculations..accumulate ((starter BFloat) (list List_Float_)) $Result_List_Float_
(let ((_@tmpvar@44 (List_Float_..transduce_E_Float__T_Float__U_Float__fn--calculations.bsq_k15..186@8568_ list starter)))
    (ite ((_ is $Result___Float__List_Float___@error) _@tmpvar@44)
      ($Result_List_Float_@error ($Result___Float__List_Float___@error_value _@tmpvar@44))
      (let ((@tmp_2 ($Result___Float__List_Float___@success_value _@tmpvar@44)))
        (let ((sum (__Float__List_Float___@_0 @tmp_2)) (acc (__Float__List_Float___@_1 @tmp_2)))
          (let ((_@tmpvar@43 (List_Float_..reverse_T_Float_ acc)))
            (ite ((_ is $Result_List_Float_@error) _@tmpvar@43)
              _@tmpvar@43
              (let ((@tmp_7 ($Result_List_Float_@success_value _@tmpvar@43)))
                (let (($__ir_ret__ @tmp_7))
                  (let (($return $__ir_ret__))
                    ($Result_List_Float_@success $return)
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_size_T_Float_ ((l List_Float_)) BNat
(seq.len (List_Float__seq l))
)

(define-fun list.bsq_k1_pre@0..43@1405..pre@0_T_Float__U_Float_ ((this List_Float_) (l List_Float_)) Bool
(let ((@tmp_1 (ListOps..s_list_size_T_Float_ this)))
    (let ((@tmp_3 (ListOps..s_list_size_T_Float_ l)))
      (let ((@tmp_0 (= @tmp_1 @tmp_3)))
        (let (($__ir_ret__ @tmp_0))
          (let (($return $__ir_ret__))
            $return
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_blockingfailure_T_List__Float__Float___ () $Result_List__Float__Float__
($Result_List__Float__Float__@error ErrorID_AssumeCheck)
)

(define-fun List_Float_..zip_T_Float__U_Float_ ((this List_Float_) (l List_Float_)) $Result_List__Float__Float__
(let ((@tmp_0 (list.bsq_k1_pre@0..43@1405..pre@0_T_Float__U_Float_ this l)))
    (ite @tmp_0
      (let ((@tmp_1 (ListOps..s_list_empty_T_Float_ this)))
        (ite @tmp_1
          (let ((@tmp_3 List__Float__Float__@@empty))
            (let (($__ir_ret__$1 @tmp_3))
              (let (($__ir_ret__$2 $__ir_ret__$1))
                (let (($return $__ir_ret__$2))
                  ($Result_List__Float__Float__@success $return)
                )
              )
            )
          )
          (let ((_@tmpvar@45 ListOps..s_blockingfailure_T_List__Float__Float___))
            (ite ((_ is $Result_List__Float__Float__@error) _@tmpvar@45)
              _@tmpvar@45
              (let ((@tmp_4 ($Result_List__Float__Float__@success_value _@tmpvar@45)))
                (let (($__ir_ret__ @tmp_4))
                  (let (($__ir_ret__$2 $__ir_ret__))
                    (let (($return $__ir_ret__$2))
                      ($Result_List__Float__Float__@success $return)
                    )
                  )
                )
              )
            )
          )
        )
      )
      ($Result_List__Float__Float__@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun ListOps..s_list_empty_T__Float__Float__ ((l List__Float__Float__)) Bool
(= l List__Float__Float__@@empty)
)

(define-fun fn--calculations.bsq_k15..168@7466 ((acp _Float__Float_)) BFloat
(let ((@tmp_3 (_Float__Float_@_0 acp)))
    (let ((@tmp_6 (_Float__Float_@_1 acp)))
      (let ((@tmp_0 (- @tmp_3 @tmp_6)))
        (let (($__ir_ret__ @tmp_0))
          (let (($return $__ir_ret__))
            $return
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_map_fn_T__Float__Float___U_Float__fn--calculations.bsq_k15..168@7466_ ((l List__Float__Float__)) List_Float_
(List_Float_@cons (seq.map (lambda ((@@x _Float__Float_)) (fn--calculations.bsq_k15..168@7466 @@x)) (List__Float__Float___seq l)))
)

(define-fun List__Float__Float__..map_T__Float__Float___U_Float__fn--calculations.bsq_k15..168@7466_ ((this List__Float__Float__)) List_Float_
(let ((@tmp_0 (ListOps..s_list_empty_T__Float__Float__ this)))
    (ite @tmp_0
      (let ((@tmp_2 List_Float_@@empty))
        (let (($__ir_ret__$1 @tmp_2))
          (let (($__ir_ret__$2 $__ir_ret__$1))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
      (let ((@tmp_3 (ListOps..s_list_map_fn_T__Float__Float___U_Float__fn--calculations.bsq_k15..168@7466_ this)))
        (let (($__ir_ret__ @tmp_3))
          (let (($__ir_ret__$2 $__ir_ret__))
            (let (($return $__ir_ret__$2))
              $return
            )
          )
        )
      )
    )
  )
)

(define-fun ListOps..s_list_get_front_T_Float_ ((l List_Float_)) BFloat
(seq.nth (List_Float__seq l) 0)
)

(define-fun ListOps..s_blockingfailure_T_Float_ () $Result_BFloat
($Result_BFloat@error ErrorID_AssumeCheck)
)

(define-fun List_Float_..maxOrNone_T_Float_ ((this List_Float_)) $Result_BTerm
(let ((@tmp_0 (ListOps..s_list_empty_T_Float_ this)))
    (ite @tmp_0
      (let ((@tmp_3 BTerm@none))
        (let (($__ir_ret__$2 @tmp_3))
          (let (($__ir_ret__$3 $__ir_ret__$2))
            (let (($return $__ir_ret__$3))
              ($Result_BTerm@success $return)
            )
          )
        )
      )
      (let ((@tmp_5 (ListOps..s_list_size_T_Float_ this)))
        (let ((@tmp_4 (= @tmp_5 1)))
          (ite @tmp_4
            (let ((@tmp_8 (ListOps..s_list_get_front_T_Float_ this)))
              (let ((@tmp_10 (BTerm@termbox TypeTag_Float (bsqobject_float@box @tmp_8))))
                (let (($__ir_ret__$1 @tmp_10))
                  (let (($__ir_ret__$3 $__ir_ret__$1))
                    (let (($return $__ir_ret__$3))
                      ($Result_BTerm@success $return)
                    )
                  )
                )
              )
            )
            (let ((_@tmpvar@46 ListOps..s_blockingfailure_T_Float_))
              (ite ((_ is $Result_BFloat@error) _@tmpvar@46)
                ($Result_BTerm@error ($Result_BFloat@error_value _@tmpvar@46))
                (let ((@tmp_11 ($Result_BFloat@success_value _@tmpvar@46)))
                  (let ((@tmp_12 (BTerm@termbox TypeTag_Float (bsqobject_float@box @tmp_11))))
                    (let (($__ir_ret__ @tmp_12))
                      (let (($__ir_ret__$3 $__ir_ret__))
                        (let (($return $__ir_ret__$3))
                          ($Result_BTerm@success $return)
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun Float..min ((a BFloat) (b BFloat)) BFloat
(let ((@tmp_0 (< a b)))
    (ite @tmp_0
      (let (($__ir_ret__$1 a))
        (let (($__ir_ret__$2 $__ir_ret__$1))
          (let (($return $__ir_ret__$2))
            $return
          )
        )
      )
      (let (($__ir_ret__ b))
        (let (($__ir_ret__$2 $__ir_ret__))
          (let (($return $__ir_ret__$2))
            $return
          )
        )
      )
    )
  )
)

(define-fun __i__NSCalculations..totalNetCashOutflowAmount$Lselect_done_3 ((@tmp_53 BFloat) (aggregatedInflowAmount BFloat) (aggregatedOutflowAmount BFloat) (maturityInflows List_Float_) (maturityOutflows List_Float_)) BFloat
(let ((netCumulativeMaturityOutflowAmount @tmp_53))
    (let ((@tmp_64 (List_Float_..sum_T_Float_ maturityOutflows)))
      (let ((@tmp_67 (List_Float_..sum_T_Float_ maturityInflows)))
        (let ((@tmp_61 (- @tmp_64 @tmp_67)))
          (let ((netDay30CumulativeMaturityOutflowAmount @tmp_61))
            (let ((@tmp_68 (Float..max BFloat@zero @tmp_53)))
              (let ((maxNext30DaysOfCumulativeMaturityOutflowAmountFloor @tmp_68))
                (let ((@tmp_71 (Float..max BFloat@zero @tmp_61)))
                  (let ((netDay30CumulativeMaturityOutflowAmountFloor @tmp_71))
                    (let ((@tmp_74 (- @tmp_68 @tmp_71)))
                      (let ((maturityMismatchAddOn @tmp_74))
                        (let ((@tmp_78 (* 0.75 aggregatedOutflowAmount)))
                          (let ((@tmp_77 (Float..min @tmp_78 aggregatedInflowAmount)))
                            (let ((cappedInflows @tmp_77))
                              (let ((@tmp_83 (- aggregatedOutflowAmount @tmp_77)))
                                (let ((@tmp_82 (+ @tmp_83 @tmp_74)))
                                  (let (($__ir_ret__ @tmp_82))
                                    (let (($return $__ir_ret__))
                                      $return
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun NSCalculations..totalNetCashOutflowAmount ((toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_) (t BDateTime) (flowsForDate List__DateTime__NSFlows..Flow__)) $Result_BFloat
(let ((@tmp_1 ($ListSingletonCons_2_List_Int_ 1 20)))
    (let ((@tmp_4 (List_Int_..map_T_Int__U_DateTime__fn--calculations.bsq_k15..138@6125_ @tmp_1 t)))
      (let ((dates @tmp_4))
        (let ((_@tmpvar@54 (NSCalculations..aggregateSpan_pred--calculations.bsq_k15..140@6232_ @tmp_4 flowsForDate t toCounterparty)))
          (ite ((_ is $Result_BFloat@error) _@tmpvar@54)
            _@tmpvar@54
            (let ((@tmp_6 ($Result_BFloat@success_value _@tmpvar@54)))
              (let ((nonMaturityOutflowAmount @tmp_6))
                (let ((_@tmpvar@53 (NSCalculations..aggregateSpan_pred--calculations.bsq_k15..144@6432_ @tmp_4 flowsForDate t toCounterparty)))
                  (ite ((_ is $Result_BFloat@error) _@tmpvar@53)
                    _@tmpvar@53
                    (let ((@tmp_10 ($Result_BFloat@success_value _@tmpvar@53)))
                      (let ((nonMaturityInflowAmount @tmp_10))
                        (let ((@tmp_14 (NSCalculations..maturityMismatchOutflowRules toCounterparty t)))
                          (let ((mmorules @tmp_14))
                            (let ((_@tmpvar@52 (NSCalculations..spanDates_pred--calculations.bsq_k15..149@6688_ @tmp_4 flowsForDate @tmp_14)))
                              (ite ((_ is $Result_List_Float_@error) _@tmpvar@52)
                                ($Result_BFloat@error ($Result_List_Float_@error_value _@tmpvar@52))
                                (let ((@tmp_17 ($Result_List_Float_@success_value _@tmpvar@52)))
                                  (let ((maturityOutflows @tmp_17))
                                    (let ((@tmp_23 (List_Float_..sum_T_Float_ @tmp_17)))
                                      (let ((maturityOutflowAmount @tmp_23))
                                        (let ((@tmp_24 (NSCalculations..maturityMismatchInflowRules toCounterparty t)))
                                          (let ((mmirules @tmp_24))
                                            (let ((_@tmpvar@51 (NSCalculations..spanDates_pred--calculations.bsq_k15..157@6971_ @tmp_4 flowsForDate @tmp_14)))
                                              (ite ((_ is $Result_List_Float_@error) _@tmpvar@51)
                                                ($Result_BFloat@error ($Result_List_Float_@error_value _@tmpvar@51))
                                                (let ((@tmp_27 ($Result_List_Float_@success_value _@tmpvar@51)))
                                                  (let ((maturityInflows @tmp_27))
                                                    (let ((@tmp_33 (List_Float_..sum_T_Float_ @tmp_27)))
                                                      (let ((maturityInflowAmount @tmp_33))
                                                        (let ((@tmp_34 (+ @tmp_6 @tmp_23)))
                                                          (let ((aggregatedOutflowAmount @tmp_34))
                                                            (let ((@tmp_37 (+ @tmp_10 @tmp_33)))
                                                              (let ((aggregatedInflowAmount @tmp_37))
                                                                (let ((_@tmpvar@50 (NSCalculations..accumulate BFloat@zero @tmp_17)))
                                                                  (ite ((_ is $Result_List_Float_@error) _@tmpvar@50)
                                                                    ($Result_BFloat@error ($Result_List_Float_@error_value _@tmpvar@50))
                                                                    (let ((@tmp_40 ($Result_List_Float_@success_value _@tmpvar@50)))
                                                                      (let ((oaccum @tmp_40))
                                                                        (let ((_@tmpvar@49 (NSCalculations..accumulate BFloat@zero @tmp_27)))
                                                                          (ite ((_ is $Result_List_Float_@error) _@tmpvar@49)
                                                                            ($Result_BFloat@error ($Result_List_Float_@error_value _@tmpvar@49))
                                                                            (let ((@tmp_43 ($Result_List_Float_@success_value _@tmpvar@49)))
                                                                              (let ((iaccum @tmp_43))
                                                                                (let ((_@tmpvar@48 (List_Float_..zip_T_Float__U_Float_ @tmp_40 @tmp_43)))
                                                                                  (ite ((_ is $Result_List__Float__Float__@error) _@tmpvar@48)
                                                                                    ($Result_BFloat@error ($Result_List__Float__Float__@error_value _@tmpvar@48))
                                                                                    (let ((@tmp_48 ($Result_List__Float__Float__@success_value _@tmpvar@48)))
                                                                                      (let ((@tmp_50 (List__Float__Float__..map_T__Float__Float___U_Float__fn--calculations.bsq_k15..168@7466_ @tmp_48)))
                                                                                        (let ((_@tmpvar@47 (List_Float_..maxOrNone_T_Float_ @tmp_50)))
                                                                                          (ite ((_ is $Result_BTerm@error) _@tmpvar@47)
                                                                                            ($Result_BFloat@error ($Result_BTerm@error_value _@tmpvar@47))
                                                                                            (let ((@tmp_52 ($Result_BTerm@success_value _@tmpvar@47)))
                                                                                              (let ((netCumulativeMaturityOutflowAmountMaxOpt @tmp_52))
                                                                                                (let ((@tmp_57 (= @tmp_52 BTerm@none)))
                                                                                                  (let ((@tmp_54 (not @tmp_57)))
                                                                                                    (ite @tmp_54
                                                                                                      (let ((@tmp_60 (bsqobject_float_value (BTerm_termvalue netCumulativeMaturityOutflowAmountMaxOpt))))
                                                                                                        (let ((@tmp_53$1 @tmp_60))
                                                                                                          (let (($__ir_ret__$1 (__i__NSCalculations..totalNetCashOutflowAmount$Lselect_done_3 @tmp_53$1 aggregatedInflowAmount aggregatedOutflowAmount maturityInflows maturityOutflows)))
                                                                                                            (let (($__ir_ret__$2 $__ir_ret__$1))
                                                                                                              (let (($return $__ir_ret__$2))
                                                                                                                ($Result_BFloat@success $return)
                                                                                                              )
                                                                                                            )
                                                                                                          )
                                                                                                        )
                                                                                                      )
                                                                                                      (let ((@tmp_53 BFloat@zero))
                                                                                                        (let (($__ir_ret__ (__i__NSCalculations..totalNetCashOutflowAmount$Lselect_done_3 @tmp_53 aggregatedInflowAmount aggregatedOutflowAmount maturityInflows maturityOutflows)))
                                                                                                          (let (($__ir_ret__$2 $__ir_ret__))
                                                                                                            (let (($return $__ir_ret__$2))
                                                                                                              ($Result_BFloat@success $return)
                                                                                                            )
                                                                                                          )
                                                                                                        )
                                                                                                      )
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun NSCalculations..lcr ((toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_) (product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_) (t BDateTime) (flowsForDate List__DateTime__NSFlows..Flow__) (reserveBalanceRequirement BFloat)) $Result_BFloat
(let ((@tmp_2 (List__DateTime__NSFlows..Flow__..filter_T__DateTime__NSFlows..Flow___pred--calculations.bsq_k15..16@534_ flowsForDate t)))
    (let ((@tmp_4 (List__DateTime__NSFlows..Flow__..map_T__DateTime__NSFlows..Flow___U_NSFlows..Flow__fn--calculations.bsq_k15..16@580_ @tmp_2)))
      (let ((relevantFlows @tmp_4))
        (let ((_@tmpvar@57 (NSCalculations..hqlaAmount product @tmp_4 reserveBalanceRequirement)))
          (ite ((_ is $Result_BFloat@error) _@tmpvar@57)
            _@tmpvar@57
            (let ((@tmp_6 ($Result_BFloat@success_value _@tmpvar@57)))
              (let ((hqla @tmp_6))
                (let ((_@tmpvar@56 (NSCalculations..totalNetCashOutflowAmount toCounterparty t flowsForDate)))
                  (ite ((_ is $Result_BFloat@error) _@tmpvar@56)
                    _@tmpvar@56
                    (let ((@tmp_10 ($Result_BFloat@success_value _@tmpvar@56)))
                      (let ((totalNetCashOutflow @tmp_10))
                        (let ((_@tmpvar@55 (ite (= BFloat@zero @tmp_10) ($Result_BFloat@error ErrorID_AssumeCheck) ($Result_BFloat@success (/ @tmp_6 @tmp_10)))))
                          (ite ((_ is $Result_BFloat@error) _@tmpvar@55)
                            _@tmpvar@55
                            (let ((@tmp_14 ($Result_BFloat@success_value _@tmpvar@55)))
                              (let (($__ir_ret__ @tmp_14))
                                (let (($return $__ir_ret__))
                                  ($Result_BFloat@success $return)
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun Main..main ((toCounterparty Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_) (product Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_) (t BDateTime) (flowsForDate List__DateTime__NSFlows..Flow__) (reserveBalanceRequirement BFloat)) $Result_BFloat
(let ((_@tmpvar@58 (NSCalculations..lcr toCounterparty product t flowsForDate reserveBalanceRequirement)))
    (ite ((_ is $Result_BFloat@error) _@tmpvar@58)
      _@tmpvar@58
      (let ((@tmp_0 ($Result_BFloat@success_value _@tmpvar@58)))
        (let (($__ir_ret__ @tmp_0))
          (let (($return $__ir_ret__))
            ($Result_BFloat@success $return)
          )
        )
      )
    )
  )
)

(define-fun _@@cons_StringOf_NSCounterParty..ValidCounterpartyName__entrypoint ((path HavocSequence)) $Result_StringOf_NSCounterParty..ValidCounterpartyName_
(let ((str (_@@cons_String_entrypoint path)))
    (ite (and ((_ is $Result_BString@success) str) (str.in.re ($Result_BString@success_value str) (re.+ (re.union (re.range "a" "z") (re.range "A" "Z") (re.range "0" "9") (str.to.re "_")))))
      ($Result_StringOf_NSCounterParty..ValidCounterpartyName_@success ($Result_BString@success_value str))
      ($Result_StringOf_NSCounterParty..ValidCounterpartyName_@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun _@@cons_NSCounterParty..CounterpartyType_entrypoint ((path HavocSequence)) $Result_NSCounterParty..CounterpartyType
(let ((vv (BNat@UFCons_API path)))
    (ite (and (<= 0 vv) (< vv 14))
      ($Result_NSCounterParty..CounterpartyType@success vv)
      ($Result_NSCounterParty..CounterpartyType@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun NSCounterParty..Counterparty..@@constructor (($counterpartyId StringOf_NSCounterParty..ValidCounterpartyName_) ($counterpartyType NSCounterParty..CounterpartyType)) NSCounterParty..Counterparty
(let (($__ir_ret__ (NSCounterParty..Counterparty@cons $counterpartyId $counterpartyType)))
    (let (($return $__ir_ret__))
      $return
    )
  )
)

(define-fun _@@cons_NSCounterParty..Counterparty_entrypoint ((path HavocSequence)) $Result_NSCounterParty..Counterparty
(let ((_@tmpvar@60 (_@@cons_StringOf_NSCounterParty..ValidCounterpartyName__entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 0)))) (_@tmpvar@61 (_@@cons_NSCounterParty..CounterpartyType_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 1)))))
    (ite (and ((_ is $Result_StringOf_NSCounterParty..ValidCounterpartyName_@success) _@tmpvar@60) ((_ is $Result_NSCounterParty..CounterpartyType@success) _@tmpvar@61) true)
      ($Result_NSCounterParty..Counterparty@success (NSCounterParty..Counterparty..@@constructor ($Result_StringOf_NSCounterParty..ValidCounterpartyName_@success_value _@tmpvar@60) ($Result_NSCounterParty..CounterpartyType@success_value _@tmpvar@61)))
      ($Result_NSCounterParty..Counterparty@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun _@@cons__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty__entrypoint ((path HavocSequence)) $Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_
(let ((_@tmpvar@59 (_@@cons_StringOf_NSCounterParty..ValidCounterpartyName__entrypoint (seq.++ path (seq.unit 0)))) (_@tmpvar@62 (_@@cons_NSCounterParty..Counterparty_entrypoint (seq.++ path (seq.unit 1)))))
    (ite (and ((_ is $Result_StringOf_NSCounterParty..ValidCounterpartyName_@success) _@tmpvar@59) ((_ is $Result_NSCounterParty..Counterparty@success) _@tmpvar@62))
      ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons ($Result_StringOf_NSCounterParty..ValidCounterpartyName_@success_value _@tmpvar@59) ($Result_NSCounterParty..Counterparty@success_value _@tmpvar@62)))
      ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun _@@cons_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty__entrypoint ((path HavocSequence)) $Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_
(let ((len (ContainerSize@UFCons_API path)))
    (ite (or (< len 0) (< @CONTAINERMAX len))
      ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@error ErrorID_AssumeCheck)
      (ite (= len 0)
        ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@@empty)
        (let ((carg_0 (_@@cons__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty__entrypoint (seq.++ path (seq.unit 0)))))
          (ite ((_ is $Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@error) carg_0)
            ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@error ErrorID_AssumeCheck)
            (ite (= len 1)
              ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success (Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons 1 (store ((as const (Array StringOf_NSCounterParty..ValidCounterpartyName_ $MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) $MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@empty) (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_0 ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_0)) ($MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_0 ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_0)) ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_0)))))
              (let ((carg_1 (_@@cons__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty__entrypoint (seq.++ path (seq.unit 1)))))
                (ite ((_ is $Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@error) carg_1)
                  ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@error ErrorID_AssumeCheck)
                  (ite (= len 2)
                    ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success (Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons 2 (store (store ((as const (Array StringOf_NSCounterParty..ValidCounterpartyName_ $MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) $MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@empty) (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_0 ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_0)) ($MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_0 ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_0)) ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_0))) (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_0 ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_1)) ($MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_0 ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_1)) ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_1)))))
                    (let ((carg_2 (_@@cons__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty__entrypoint (seq.++ path (seq.unit 2)))))
                      (ite ((_ is $Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@error) carg_2)
                        ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@error ErrorID_AssumeCheck)
                        ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success (Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons 3 (store (store (store ((as const (Array StringOf_NSCounterParty..ValidCounterpartyName_ $MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)) $MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@empty) (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_0 ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_0)) ($MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_0 ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_0)) ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_0))) (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_0 ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_1)) ($MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_0 ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_1)) ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_1))) (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_0 ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_2)) ($MapEntry_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@cons (_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@_0 ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_2)) ($Result__StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value carg_2)))))
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun _@@cons_StringOf_NSProduct..ValidProductName__entrypoint ((path HavocSequence)) $Result_StringOf_NSProduct..ValidProductName_
(let ((str (_@@cons_String_entrypoint path)))
    (ite (and ((_ is $Result_BString@success) str) (str.in.re ($Result_BString@success_value str) (re.+ (re.union (re.range "a" "z") (re.range "A" "Z") (re.range "0" "9") (str.to.re "_")))))
      ($Result_StringOf_NSProduct..ValidProductName_@success ($Result_BString@success_value str))
      ($Result_StringOf_NSProduct..ValidProductName_@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun _@@cons_NSProduct..ProductType_entrypoint ((path HavocSequence)) $Result_NSProduct..ProductType
(let ((vv (BNat@UFCons_API path)))
    (ite (and (<= 0 vv) (< vv 4))
      ($Result_NSProduct..ProductType@success vv)
      ($Result_NSProduct..ProductType@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun NSProduct..Product..@@constructor (($productId StringOf_NSProduct..ValidProductName_) ($productType NSProduct..ProductType) ($isHQLA Bool)) NSProduct..Product
(let (($__ir_ret__ (NSProduct..Product@cons $productId $productType $isHQLA)))
    (let (($return $__ir_ret__))
      $return
    )
  )
)

(define-fun _@@cons_NSProduct..Product_entrypoint ((path HavocSequence)) $Result_NSProduct..Product
(let ((_@tmpvar@64 (_@@cons_StringOf_NSProduct..ValidProductName__entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 0)))) (_@tmpvar@65 (_@@cons_NSProduct..ProductType_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 1)))) (_@tmpvar@66 (_@@cons_Bool_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 2)))))
    (ite (and ((_ is $Result_StringOf_NSProduct..ValidProductName_@success) _@tmpvar@64) ((_ is $Result_NSProduct..ProductType@success) _@tmpvar@65) ((_ is $Result_Bool@success) _@tmpvar@66) true)
      ($Result_NSProduct..Product@success (NSProduct..Product..@@constructor ($Result_StringOf_NSProduct..ValidProductName_@success_value _@tmpvar@64) ($Result_NSProduct..ProductType@success_value _@tmpvar@65) ($Result_Bool@success_value _@tmpvar@66)))
      ($Result_NSProduct..Product@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun _@@cons__StringOf_NSProduct..ValidProductName___NSProduct..Product__entrypoint ((path HavocSequence)) $Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_
(let ((_@tmpvar@63 (_@@cons_StringOf_NSProduct..ValidProductName__entrypoint (seq.++ path (seq.unit 0)))) (_@tmpvar@67 (_@@cons_NSProduct..Product_entrypoint (seq.++ path (seq.unit 1)))))
    (ite (and ((_ is $Result_StringOf_NSProduct..ValidProductName_@success) _@tmpvar@63) ((_ is $Result_NSProduct..Product@success) _@tmpvar@67))
      ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons ($Result_StringOf_NSProduct..ValidProductName_@success_value _@tmpvar@63) ($Result_NSProduct..Product@success_value _@tmpvar@67)))
      ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun _@@cons_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product__entrypoint ((path HavocSequence)) $Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_
(let ((len (ContainerSize@UFCons_API path)))
    (ite (or (< len 0) (< @CONTAINERMAX len))
      ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@error ErrorID_AssumeCheck)
      (ite (= len 0)
        ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@success Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@@empty)
        (let ((carg_0 (_@@cons__StringOf_NSProduct..ValidProductName___NSProduct..Product__entrypoint (seq.++ path (seq.unit 0)))))
          (ite ((_ is $Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@error) carg_0)
            ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@error ErrorID_AssumeCheck)
            (ite (= len 1)
              ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@success (Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons 1 (store ((as const (Array StringOf_NSProduct..ValidProductName_ $MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) $MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@empty) (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_0 ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_0)) ($MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_0 ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_0)) ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_0)))))
              (let ((carg_1 (_@@cons__StringOf_NSProduct..ValidProductName___NSProduct..Product__entrypoint (seq.++ path (seq.unit 1)))))
                (ite ((_ is $Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@error) carg_1)
                  ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@error ErrorID_AssumeCheck)
                  (ite (= len 2)
                    ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@success (Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons 2 (store (store ((as const (Array StringOf_NSProduct..ValidProductName_ $MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) $MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@empty) (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_0 ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_0)) ($MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_0 ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_0)) ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_0))) (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_0 ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_1)) ($MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_0 ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_1)) ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_1)))))
                    (let ((carg_2 (_@@cons__StringOf_NSProduct..ValidProductName___NSProduct..Product__entrypoint (seq.++ path (seq.unit 2)))))
                      (ite ((_ is $Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@error) carg_2)
                        ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@error ErrorID_AssumeCheck)
                        ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@success (Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons 3 (store (store (store ((as const (Array StringOf_NSProduct..ValidProductName_ $MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)) $MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@empty) (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_0 ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_0)) ($MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_0 ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_0)) ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_0))) (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_0 ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_1)) ($MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_0 ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_1)) ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_1))) (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_0 ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_2)) ($MapEntry_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@cons (_StringOf_NSProduct..ValidProductName___NSProduct..Product_@_0 ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_2)) ($Result__StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value carg_2)))))
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun _@@cons_NSBasics..AssetCategoryCodes_entrypoint ((path HavocSequence)) $Result_NSBasics..AssetCategoryCodes
(let ((vv (BNat@UFCons_API path)))
    (ite (and (<= 0 vv) (< vv 3))
      ($Result_NSBasics..AssetCategoryCodes@success vv)
      ($Result_NSBasics..AssetCategoryCodes@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun _@@cons_NSCurrency..Currency_entrypoint ((path HavocSequence)) $Result_NSCurrency..Currency
(let ((vv (BNat@UFCons_API path)))
    (ite (and (<= 0 vv) (< vv 14))
      ($Result_NSCurrency..Currency@success vv)
      ($Result_NSCurrency..Currency@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun _@@cons_NSBasics..InsuranceType_entrypoint ((path HavocSequence)) $Result_NSBasics..InsuranceType
(let ((vv (BNat@UFCons_API path)))
    (ite (and (<= 0 vv) (< vv 2))
      ($Result_NSBasics..InsuranceType@success vv)
      ($Result_NSBasics..InsuranceType@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun NSFlows..Flow..@@constructor (($amount BFloat) ($assetType NSBasics..AssetCategoryCodes) ($businessDate BDateTime) ($collateralClass NSBasics..AssetCategoryCodes) ($counterpartyId StringOf_NSCounterParty..ValidCounterpartyName_) ($currency NSCurrency..Currency) ($ruleCode BString) ($insured NSBasics..InsuranceType) ($isTreasuryControl Bool) ($isUnencumbered Bool) ($maturityDate BDateTime) ($effectiveMaturityDate BDateTime) ($productId StringOf_NSProduct..ValidProductName_)) NSFlows..Flow
(let (($__ir_ret__ (NSFlows..Flow@cons $amount $assetType $businessDate $collateralClass $counterpartyId $currency $ruleCode $insured $isTreasuryControl $isUnencumbered $maturityDate $effectiveMaturityDate $productId)))
    (let (($return $__ir_ret__))
      $return
    )
  )
)

(define-fun _@@cons_NSFlows..Flow_entrypoint ((path HavocSequence)) $Result_NSFlows..Flow
(let ((_@tmpvar@69 (_@@cons_Float_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 0)))) (_@tmpvar@70 (_@@cons_NSBasics..AssetCategoryCodes_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 1)))) (_@tmpvar@71 (_@@cons_DateTime_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 2)))) (_@tmpvar@72 (_@@cons_NSBasics..AssetCategoryCodes_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 3)))) (_@tmpvar@73 (_@@cons_StringOf_NSCounterParty..ValidCounterpartyName__entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 4)))) (_@tmpvar@74 (_@@cons_NSCurrency..Currency_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 5)))) (_@tmpvar@75 (_@@cons_String_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 6)))) (_@tmpvar@76 (_@@cons_NSBasics..InsuranceType_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 7)))) (_@tmpvar@77 (_@@cons_Bool_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 8)))) (_@tmpvar@78 (_@@cons_Bool_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 9)))) (_@tmpvar@79 (_@@cons_DateTime_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 10)))) (_@tmpvar@80 (_@@cons_DateTime_entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 11)))) (_@tmpvar@81 (_@@cons_StringOf_NSProduct..ValidProductName__entrypoint (seq.++ (seq.++ path (seq.unit 0)) (seq.unit 12)))))
    (ite (and ((_ is $Result_BFloat@success) _@tmpvar@69) ((_ is $Result_NSBasics..AssetCategoryCodes@success) _@tmpvar@70) ((_ is $Result_BDateTime@success) _@tmpvar@71) ((_ is $Result_NSBasics..AssetCategoryCodes@success) _@tmpvar@72) ((_ is $Result_StringOf_NSCounterParty..ValidCounterpartyName_@success) _@tmpvar@73) ((_ is $Result_NSCurrency..Currency@success) _@tmpvar@74) ((_ is $Result_BString@success) _@tmpvar@75) ((_ is $Result_NSBasics..InsuranceType@success) _@tmpvar@76) ((_ is $Result_Bool@success) _@tmpvar@77) ((_ is $Result_Bool@success) _@tmpvar@78) ((_ is $Result_BDateTime@success) _@tmpvar@79) ((_ is $Result_BDateTime@success) _@tmpvar@80) ((_ is $Result_StringOf_NSProduct..ValidProductName_@success) _@tmpvar@81) true)
      ($Result_NSFlows..Flow@success (NSFlows..Flow..@@constructor ($Result_BFloat@success_value _@tmpvar@69) ($Result_NSBasics..AssetCategoryCodes@success_value _@tmpvar@70) ($Result_BDateTime@success_value _@tmpvar@71) ($Result_NSBasics..AssetCategoryCodes@success_value _@tmpvar@72) ($Result_StringOf_NSCounterParty..ValidCounterpartyName_@success_value _@tmpvar@73) ($Result_NSCurrency..Currency@success_value _@tmpvar@74) ($Result_BString@success_value _@tmpvar@75) ($Result_NSBasics..InsuranceType@success_value _@tmpvar@76) ($Result_Bool@success_value _@tmpvar@77) ($Result_Bool@success_value _@tmpvar@78) ($Result_BDateTime@success_value _@tmpvar@79) ($Result_BDateTime@success_value _@tmpvar@80) ($Result_StringOf_NSProduct..ValidProductName_@success_value _@tmpvar@81)))
      ($Result_NSFlows..Flow@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun _@@cons__DateTime__NSFlows..Flow__entrypoint ((path HavocSequence)) $Result__DateTime__NSFlows..Flow_
(let ((_@tmpvar@68 (_@@cons_DateTime_entrypoint (seq.++ path (seq.unit 0)))) (_@tmpvar@82 (_@@cons_NSFlows..Flow_entrypoint (seq.++ path (seq.unit 1)))))
    (ite (and ((_ is $Result_BDateTime@success) _@tmpvar@68) ((_ is $Result_NSFlows..Flow@success) _@tmpvar@82))
      ($Result__DateTime__NSFlows..Flow_@success (_DateTime__NSFlows..Flow_@cons ($Result_BDateTime@success_value _@tmpvar@68) ($Result_NSFlows..Flow@success_value _@tmpvar@82)))
      ($Result__DateTime__NSFlows..Flow_@error ErrorID_AssumeCheck)
    )
  )
)

(define-fun _@@cons_List__DateTime__NSFlows..Flow___entrypoint ((path HavocSequence)) $Result_List__DateTime__NSFlows..Flow__
(let ((len (ContainerSize@UFCons_API path)))
    (ite (or (< len 0) (< @CONTAINERMAX len))
      ($Result_List__DateTime__NSFlows..Flow__@error ErrorID_AssumeCheck)
      (ite (= len 0)
        ($Result_List__DateTime__NSFlows..Flow__@success List__DateTime__NSFlows..Flow__@@empty)
        (let ((carg_0 (_@@cons__DateTime__NSFlows..Flow__entrypoint (seq.++ path (seq.unit 0)))))
          (ite ((_ is $Result__DateTime__NSFlows..Flow_@error) carg_0)
            ($Result_List__DateTime__NSFlows..Flow__@error ErrorID_AssumeCheck)
            (ite (= len 1)
              ($Result_List__DateTime__NSFlows..Flow__@success (List__DateTime__NSFlows..Flow__@cons (seq.++ (seq.unit ($Result__DateTime__NSFlows..Flow_@success_value carg_0)))))
              (let ((carg_1 (_@@cons__DateTime__NSFlows..Flow__entrypoint (seq.++ path (seq.unit 1)))))
                (ite ((_ is $Result__DateTime__NSFlows..Flow_@error) carg_1)
                  ($Result_List__DateTime__NSFlows..Flow__@error ErrorID_AssumeCheck)
                  (ite (= len 2)
                    ($Result_List__DateTime__NSFlows..Flow__@success (List__DateTime__NSFlows..Flow__@cons (seq.++ (seq.unit ($Result__DateTime__NSFlows..Flow_@success_value carg_0)) (seq.unit ($Result__DateTime__NSFlows..Flow_@success_value carg_1)))))
                    (let ((carg_2 (_@@cons__DateTime__NSFlows..Flow__entrypoint (seq.++ path (seq.unit 2)))))
                      (ite ((_ is $Result__DateTime__NSFlows..Flow_@error) carg_2)
                        ($Result_List__DateTime__NSFlows..Flow__@error ErrorID_AssumeCheck)
                        ($Result_List__DateTime__NSFlows..Flow__@success (List__DateTime__NSFlows..Flow__@cons (seq.++ (seq.unit ($Result__DateTime__NSFlows..Flow_@success_value carg_0)) (seq.unit ($Result__DateTime__NSFlows..Flow_@success_value carg_1)) (seq.unit ($Result__DateTime__NSFlows..Flow_@success_value carg_2)))))
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(define-fun constexp_basics.bsq_k14_constexp..5@41..level1Assets () NSBasics..AssetCategoryCodes
(let ((@tmp_0 0))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_basics.bsq_k14_constexp..5@41..level2aAssets () NSBasics..AssetCategoryCodes
(let ((@tmp_0 1))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_basics.bsq_k14_constexp..5@41..level2bAssets () NSBasics..AssetCategoryCodes
(let ((@tmp_0 2))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_basics.bsq_k14_constexp..12@125..fdic () NSBasics..InsuranceType
(let ((@tmp_0 0))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..bank () NSCounterParty..CounterpartyType
(let ((@tmp_0 0))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..centralBank () NSCounterParty..CounterpartyType
(let ((@tmp_0 5))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..debtIssuingSpecialPurposeEntity () NSCounterParty..CounterpartyType
(let ((@tmp_0 11))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..governmentSponsoredEntity () NSCounterParty..CounterpartyType
(let ((@tmp_0 6))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..multilateralDevelopmentBank () NSCounterParty..CounterpartyType
(let ((@tmp_0 8))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..nonFinancialCorporate () NSCounterParty..CounterpartyType
(let ((@tmp_0 3))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..other () NSCounterParty..CounterpartyType
(let ((@tmp_0 13))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..otherFinancialEntity () NSCounterParty..CounterpartyType
(let ((@tmp_0 12))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..otherSupranational () NSCounterParty..CounterpartyType
(let ((@tmp_0 9))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..publicSectorEntity () NSCounterParty..CounterpartyType
(let ((@tmp_0 7))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..retail () NSCounterParty..CounterpartyType
(let ((@tmp_0 1))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..smallBusiness () NSCounterParty..CounterpartyType
(let ((@tmp_0 2))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..sovereign () NSCounterParty..CounterpartyType
(let ((@tmp_0 4))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_counterparty.bsq_k17_constexp..6@136..supervisedNonBankFinancialEntity () NSCounterParty..CounterpartyType
(let ((@tmp_0 10))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun $ListSingletonCons_5_List_NSCounterParty..CounterpartyType_ ((arg0 NSCounterParty..CounterpartyType) (arg1 NSCounterParty..CounterpartyType) (arg2 NSCounterParty..CounterpartyType) (arg3 NSCounterParty..CounterpartyType) (arg4 NSCounterParty..CounterpartyType)) List_NSCounterParty..CounterpartyType_
(List_NSCounterParty..CounterpartyType_@cons (seq.++ (seq.unit arg0) (seq.unit arg1) (seq.unit arg2) (seq.unit arg3) (seq.unit arg4)))
)

(define-fun constexp_inflows.bsq_k24_constexp..110@4331..acceptedCounterParty () List_NSCounterParty..CounterpartyType_
(let ((@tmp_0 ($ListSingletonCons_5_List_NSCounterParty..CounterpartyType_ NSCounterParty..CounterpartyType..centralBank NSCounterParty..CounterpartyType..bank NSCounterParty..CounterpartyType..supervisedNonBankFinancialEntity NSCounterParty..CounterpartyType..debtIssuingSpecialPurposeEntity NSCounterParty..CounterpartyType..otherFinancialEntity)))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun $ListSingletonCons_7_List_NSCounterParty..CounterpartyType_ ((arg0 NSCounterParty..CounterpartyType) (arg1 NSCounterParty..CounterpartyType) (arg2 NSCounterParty..CounterpartyType) (arg3 NSCounterParty..CounterpartyType) (arg4 NSCounterParty..CounterpartyType) (arg5 NSCounterParty..CounterpartyType) (arg6 NSCounterParty..CounterpartyType)) List_NSCounterParty..CounterpartyType_
(List_NSCounterParty..CounterpartyType_@cons (seq.++ (seq.unit arg0) (seq.unit arg1) (seq.unit arg2) (seq.unit arg3) (seq.unit arg4) (seq.unit arg5) (seq.unit arg6)))
)

(define-fun constexp_inflows.bsq_k24_constexp..133@5348..acceptedCounterParty () List_NSCounterParty..CounterpartyType_
(let ((@tmp_0 ($ListSingletonCons_7_List_NSCounterParty..CounterpartyType_ NSCounterParty..CounterpartyType..nonFinancialCorporate NSCounterParty..CounterpartyType..sovereign NSCounterParty..CounterpartyType..governmentSponsoredEntity NSCounterParty..CounterpartyType..publicSectorEntity NSCounterParty..CounterpartyType..multilateralDevelopmentBank NSCounterParty..CounterpartyType..otherSupranational NSCounterParty..CounterpartyType..other)))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun $ListSingletonCons_12_List_NSCounterParty..CounterpartyType_ ((arg0 NSCounterParty..CounterpartyType) (arg1 NSCounterParty..CounterpartyType) (arg2 NSCounterParty..CounterpartyType) (arg3 NSCounterParty..CounterpartyType) (arg4 NSCounterParty..CounterpartyType) (arg5 NSCounterParty..CounterpartyType) (arg6 NSCounterParty..CounterpartyType) (arg7 NSCounterParty..CounterpartyType) (arg8 NSCounterParty..CounterpartyType) (arg9 NSCounterParty..CounterpartyType) (arg10 NSCounterParty..CounterpartyType) (arg11 NSCounterParty..CounterpartyType)) List_NSCounterParty..CounterpartyType_
(List_NSCounterParty..CounterpartyType_@cons (seq.++ (seq.unit arg0) (seq.unit arg1) (seq.unit arg2) (seq.unit arg3) (seq.unit arg4) (seq.unit arg5) (seq.unit arg6) (seq.unit arg7) (seq.unit arg8) (seq.unit arg9) (seq.unit arg10) (seq.unit arg11)))
)

(define-fun constexp_outflows.bsq_k26_constexp..218@8818..acceptedCounterParty () List_NSCounterParty..CounterpartyType_
(let ((@tmp_0 ($ListSingletonCons_12_List_NSCounterParty..CounterpartyType_ NSCounterParty..CounterpartyType..nonFinancialCorporate NSCounterParty..CounterpartyType..sovereign NSCounterParty..CounterpartyType..centralBank NSCounterParty..CounterpartyType..governmentSponsoredEntity NSCounterParty..CounterpartyType..publicSectorEntity NSCounterParty..CounterpartyType..multilateralDevelopmentBank NSCounterParty..CounterpartyType..otherSupranational NSCounterParty..CounterpartyType..bank NSCounterParty..CounterpartyType..supervisedNonBankFinancialEntity NSCounterParty..CounterpartyType..debtIssuingSpecialPurposeEntity NSCounterParty..CounterpartyType..otherFinancialEntity NSCounterParty..CounterpartyType..other)))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(define-fun constexp_outflows.bsq_k26_constexp..245@10126..acceptedCounterParty () List_NSCounterParty..CounterpartyType_
(let ((@tmp_0 ($ListSingletonCons_12_List_NSCounterParty..CounterpartyType_ NSCounterParty..CounterpartyType..nonFinancialCorporate NSCounterParty..CounterpartyType..sovereign NSCounterParty..CounterpartyType..centralBank NSCounterParty..CounterpartyType..governmentSponsoredEntity NSCounterParty..CounterpartyType..publicSectorEntity NSCounterParty..CounterpartyType..multilateralDevelopmentBank NSCounterParty..CounterpartyType..otherSupranational NSCounterParty..CounterpartyType..bank NSCounterParty..CounterpartyType..supervisedNonBankFinancialEntity NSCounterParty..CounterpartyType..debtIssuingSpecialPurposeEntity NSCounterParty..CounterpartyType..otherFinancialEntity NSCounterParty..CounterpartyType..other)))
    (let (($__ir_ret__ @tmp_0))
      (let (($return $__ir_ret__))
        $return
      )
    )
  )
)

(assert (= NSBasics..AssetCategoryCodes..level1Assets constexp_basics.bsq_k14_constexp..5@41..level1Assets))
(assert (= NSBasics..AssetCategoryCodes..level2aAssets constexp_basics.bsq_k14_constexp..5@41..level2aAssets))
(assert (= NSBasics..AssetCategoryCodes..level2bAssets constexp_basics.bsq_k14_constexp..5@41..level2bAssets))
(assert (= NSBasics..InsuranceType..fdic constexp_basics.bsq_k14_constexp..12@125..fdic))
(assert (= NSCounterParty..CounterpartyType..bank constexp_counterparty.bsq_k17_constexp..6@136..bank))
(assert (= NSCounterParty..CounterpartyType..centralBank constexp_counterparty.bsq_k17_constexp..6@136..centralBank))
(assert (= NSCounterParty..CounterpartyType..debtIssuingSpecialPurposeEntity constexp_counterparty.bsq_k17_constexp..6@136..debtIssuingSpecialPurposeEntity))
(assert (= NSCounterParty..CounterpartyType..governmentSponsoredEntity constexp_counterparty.bsq_k17_constexp..6@136..governmentSponsoredEntity))
(assert (= NSCounterParty..CounterpartyType..multilateralDevelopmentBank constexp_counterparty.bsq_k17_constexp..6@136..multilateralDevelopmentBank))
(assert (= NSCounterParty..CounterpartyType..nonFinancialCorporate constexp_counterparty.bsq_k17_constexp..6@136..nonFinancialCorporate))
(assert (= NSCounterParty..CounterpartyType..other constexp_counterparty.bsq_k17_constexp..6@136..other))
(assert (= NSCounterParty..CounterpartyType..otherFinancialEntity constexp_counterparty.bsq_k17_constexp..6@136..otherFinancialEntity))
(assert (= NSCounterParty..CounterpartyType..otherSupranational constexp_counterparty.bsq_k17_constexp..6@136..otherSupranational))
(assert (= NSCounterParty..CounterpartyType..publicSectorEntity constexp_counterparty.bsq_k17_constexp..6@136..publicSectorEntity))
(assert (= NSCounterParty..CounterpartyType..retail constexp_counterparty.bsq_k17_constexp..6@136..retail))
(assert (= NSCounterParty..CounterpartyType..smallBusiness constexp_counterparty.bsq_k17_constexp..6@136..smallBusiness))
(assert (= NSCounterParty..CounterpartyType..sovereign constexp_counterparty.bsq_k17_constexp..6@136..sovereign))
(assert (= NSCounterParty..CounterpartyType..supervisedNonBankFinancialEntity constexp_counterparty.bsq_k17_constexp..6@136..supervisedNonBankFinancialEntity))
(assert (= NSInflows..Rule33d1..acceptedCounterParty constexp_inflows.bsq_k24_constexp..110@4331..acceptedCounterParty))
(assert (= NSInflows..Rule33d2..acceptedCounterParty constexp_inflows.bsq_k24_constexp..133@5348..acceptedCounterParty))
(assert (= NSOutflows..Rule32h3..acceptedCounterParty constexp_outflows.bsq_k26_constexp..218@8818..acceptedCounterParty))
(assert (= NSOutflows..Rule32h4..acceptedCounterParty constexp_outflows.bsq_k26_constexp..245@10126..acceptedCounterParty))

(declare-const toCounterparty $Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_)
(assert (= toCounterparty (_@@cons_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty__entrypoint (seq.++ (seq.unit 0) (seq.unit 0)))))
(assert ((_ is $Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success) toCounterparty))
(declare-const product $Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_)
(assert (= product (_@@cons_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product__entrypoint (seq.++ (seq.unit 0) (seq.unit 1)))))
(assert ((_ is $Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@success) product))
(declare-const t $Result_BDateTime)
(assert (= t (_@@cons_DateTime_entrypoint (seq.++ (seq.unit 0) (seq.unit 2)))))
(assert ((_ is $Result_BDateTime@success) t))
(declare-const flowsForDate $Result_List__DateTime__NSFlows..Flow__)
(assert (= flowsForDate (_@@cons_List__DateTime__NSFlows..Flow___entrypoint (seq.++ (seq.unit 0) (seq.unit 3)))))
(assert ((_ is $Result_List__DateTime__NSFlows..Flow__@success) flowsForDate))
(declare-const reserveBalanceRequirement $Result_BFloat)
(assert (= reserveBalanceRequirement (_@@cons_Float_entrypoint (seq.++ (seq.unit 0) (seq.unit 4)))))
(assert ((_ is $Result_BFloat@success) reserveBalanceRequirement))
(declare-const _@smtres@ $Result_BFloat)
(assert (= _@smtres@ (Main..main ($Result_Map_StringOf_NSCounterParty..ValidCounterpartyName___NSCounterParty..Counterparty_@success_value toCounterparty) ($Result_Map_StringOf_NSProduct..ValidProductName___NSProduct..Product_@success_value product) ($Result_BDateTime@success_value t) ($Result_List__DateTime__NSFlows..Flow__@success_value flowsForDate) ($Result_BFloat@success_value reserveBalanceRequirement))))
(assert ((_ is $Result_BFloat@success) _@smtres@))

(check-sat)
